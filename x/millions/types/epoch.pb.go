// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/millions/epoch.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochUnbonding struct {
	EpochIdentifier    string     `protobuf:"bytes,1,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	EpochNumber        uint64     `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	PoolId             uint64     `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	WithdrawalIds      []uint64   `protobuf:"varint,4,rep,packed,name=withdrawal_ids,json=withdrawalIds,proto3" json:"withdrawal_ids,omitempty"`
	WithdrawalIdsCount uint64     `protobuf:"varint,5,opt,name=withdrawal_ids_count,json=withdrawalIdsCount,proto3" json:"withdrawal_ids_count,omitempty"`
	TotalAmount        types.Coin `protobuf:"bytes,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
	// metadata
	CreatedAtHeight int64     `protobuf:"varint,7,opt,name=created_at_height,json=createdAtHeight,proto3" json:"created_at_height,omitempty"`
	UpdatedAtHeight int64     `protobuf:"varint,8,opt,name=updated_at_height,json=updatedAtHeight,proto3" json:"updated_at_height,omitempty"`
	CreatedAt       time.Time `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt       time.Time `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *EpochUnbonding) Reset()         { *m = EpochUnbonding{} }
func (m *EpochUnbonding) String() string { return proto.CompactTextString(m) }
func (*EpochUnbonding) ProtoMessage()    {}
func (*EpochUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_edcce9be8a92e833, []int{0}
}
func (m *EpochUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochUnbonding.Merge(m, src)
}
func (m *EpochUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *EpochUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_EpochUnbonding proto.InternalMessageInfo

func (m *EpochUnbonding) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *EpochUnbonding) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochUnbonding) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EpochUnbonding) GetWithdrawalIds() []uint64 {
	if m != nil {
		return m.WithdrawalIds
	}
	return nil
}

func (m *EpochUnbonding) GetWithdrawalIdsCount() uint64 {
	if m != nil {
		return m.WithdrawalIdsCount
	}
	return 0
}

func (m *EpochUnbonding) GetTotalAmount() types.Coin {
	if m != nil {
		return m.TotalAmount
	}
	return types.Coin{}
}

func (m *EpochUnbonding) GetCreatedAtHeight() int64 {
	if m != nil {
		return m.CreatedAtHeight
	}
	return 0
}

func (m *EpochUnbonding) GetUpdatedAtHeight() int64 {
	if m != nil {
		return m.UpdatedAtHeight
	}
	return 0
}

func (m *EpochUnbonding) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *EpochUnbonding) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

type EpochTracker struct {
	EpochTrackerType    string    `protobuf:"bytes,1,opt,name=epoch_tracker_type,json=epochTrackerType,proto3" json:"epoch_tracker_type,omitempty"`
	EpochIdentifier     string    `protobuf:"bytes,2,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	EpochNumber         uint64    `protobuf:"varint,3,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	NextEpochNumber     uint64    `protobuf:"varint,4,opt,name=next_epoch_number,json=nextEpochNumber,proto3" json:"next_epoch_number,omitempty"`
	PreviousEpochNumber uint64    `protobuf:"varint,5,opt,name=previous_epoch_number,json=previousEpochNumber,proto3" json:"previous_epoch_number,omitempty"`
	NextEpochStartTime  time.Time `protobuf:"bytes,6,opt,name=next_epoch_start_time,json=nextEpochStartTime,proto3,stdtime" json:"next_epoch_start_time"`
}

func (m *EpochTracker) Reset()         { *m = EpochTracker{} }
func (m *EpochTracker) String() string { return proto.CompactTextString(m) }
func (*EpochTracker) ProtoMessage()    {}
func (*EpochTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_edcce9be8a92e833, []int{1}
}
func (m *EpochTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochTracker.Merge(m, src)
}
func (m *EpochTracker) XXX_Size() int {
	return m.Size()
}
func (m *EpochTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochTracker.DiscardUnknown(m)
}

var xxx_messageInfo_EpochTracker proto.InternalMessageInfo

func (m *EpochTracker) GetEpochTrackerType() string {
	if m != nil {
		return m.EpochTrackerType
	}
	return ""
}

func (m *EpochTracker) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *EpochTracker) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochTracker) GetNextEpochNumber() uint64 {
	if m != nil {
		return m.NextEpochNumber
	}
	return 0
}

func (m *EpochTracker) GetPreviousEpochNumber() uint64 {
	if m != nil {
		return m.PreviousEpochNumber
	}
	return 0
}

func (m *EpochTracker) GetNextEpochStartTime() time.Time {
	if m != nil {
		return m.NextEpochStartTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*EpochUnbonding)(nil), "lum.network.millions.EpochUnbonding")
	proto.RegisterType((*EpochTracker)(nil), "lum.network.millions.EpochTracker")
}

func init() { proto.RegisterFile("lum/network/millions/epoch.proto", fileDescriptor_edcce9be8a92e833) }

var fileDescriptor_edcce9be8a92e833 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0xb5, 0x6c, 0xab, 0x5b, 0x56, 0x66, 0x3a, 0x11, 0x7a, 0x48, 0xc3, 0x24, 0xa4,
	0x32, 0x31, 0x9b, 0x8d, 0x4f, 0xb0, 0x56, 0x13, 0xf4, 0xc2, 0x21, 0x14, 0x21, 0x71, 0x89, 0x9c,
	0xc4, 0x4b, 0xac, 0x25, 0x76, 0x94, 0x38, 0xeb, 0xf6, 0x2d, 0xf6, 0x9d, 0xb8, 0xec, 0xb8, 0x23,
	0x27, 0x40, 0xed, 0x77, 0xe0, 0x8c, 0xec, 0xa4, 0x6f, 0xc0, 0x61, 0xdc, 0x92, 0xff, 0xff, 0xf7,
	0xbc, 0xe8, 0x79, 0x1e, 0x03, 0x3b, 0x2e, 0x12, 0xcc, 0xa9, 0x9c, 0x8a, 0xec, 0x12, 0x27, 0x2c,
	0x8e, 0x99, 0xe0, 0x39, 0xa6, 0xa9, 0xf0, 0x23, 0x94, 0x66, 0x42, 0x0a, 0xd8, 0x8d, 0x8b, 0x04,
	0x55, 0x04, 0x5a, 0x10, 0x3d, 0xcb, 0x17, 0x79, 0x22, 0x72, 0xec, 0x91, 0x9c, 0xe2, 0xab, 0x13,
	0x8f, 0x4a, 0x72, 0x82, 0x7d, 0xc1, 0x78, 0x19, 0xd5, 0xeb, 0x87, 0x42, 0x84, 0x31, 0xc5, 0xfa,
	0xcf, 0x2b, 0x2e, 0xb0, 0x64, 0x09, 0xcd, 0x25, 0x49, 0xd2, 0x0a, 0xe8, 0x86, 0x22, 0x14, 0xfa,
	0x13, 0xab, 0xaf, 0x52, 0x3d, 0xfc, 0x55, 0x07, 0x7b, 0xe7, 0xaa, 0xf8, 0x27, 0xee, 0x09, 0x1e,
	0x30, 0x1e, 0xc2, 0x57, 0xe0, 0x89, 0x6e, 0xc7, 0x65, 0x01, 0xe5, 0x92, 0x5d, 0x30, 0x9a, 0x99,
	0x86, 0x6d, 0x0c, 0x9a, 0x4e, 0x47, 0xeb, 0xe3, 0xa5, 0x0c, 0x5f, 0x80, 0x76, 0x89, 0xf2, 0x22,
	0xf1, 0x68, 0x66, 0x6e, 0xd9, 0xc6, 0xa0, 0xe1, 0xb4, 0xb4, 0xf6, 0x41, 0x4b, 0xf0, 0x19, 0xd8,
	0x49, 0x85, 0x88, 0x5d, 0x16, 0x98, 0x75, 0xed, 0x6e, 0xab, 0xdf, 0x71, 0x00, 0x5f, 0x82, 0xbd,
	0x29, 0x93, 0x51, 0x90, 0x91, 0x29, 0x51, 0x76, 0x6e, 0x36, 0xec, 0xfa, 0xa0, 0xe1, 0x3c, 0x5e,
	0xa9, 0xe3, 0x20, 0x87, 0x6f, 0x40, 0x77, 0x13, 0x73, 0x7d, 0x51, 0x70, 0x69, 0x3e, 0xd2, 0xc9,
	0xe0, 0x06, 0x3c, 0x52, 0x0e, 0x1c, 0x82, 0xb6, 0x14, 0x92, 0xc4, 0x2e, 0x49, 0x34, 0xb9, 0x6d,
	0x1b, 0x83, 0xd6, 0xe9, 0x73, 0x54, 0x0e, 0x10, 0xa9, 0x01, 0xa2, 0x6a, 0x80, 0x68, 0x24, 0x18,
	0x1f, 0x36, 0xee, 0xbe, 0xf7, 0x6b, 0x4e, 0x4b, 0x07, 0x9d, 0xe9, 0x18, 0x78, 0x04, 0xf6, 0xfd,
	0x8c, 0x12, 0x49, 0x03, 0x97, 0x48, 0x37, 0xa2, 0x2c, 0x8c, 0xa4, 0xb9, 0x63, 0x1b, 0x83, 0xba,
	0xd3, 0xa9, 0x8c, 0x33, 0xf9, 0x5e, 0xcb, 0x8a, 0x2d, 0xd2, 0xe0, 0x0f, 0x76, 0xb7, 0x64, 0x2b,
	0x63, 0xc9, 0x8e, 0x00, 0x58, 0xe5, 0x35, 0x9b, 0xba, 0xb3, 0x1e, 0x2a, 0x57, 0x87, 0x16, 0xab,
	0x43, 0x93, 0xc5, 0xea, 0x86, 0xbb, 0xaa, 0xb5, 0xdb, 0x1f, 0x7d, 0xc3, 0x69, 0x2e, 0xcb, 0xaa,
	0x24, 0xab, 0x82, 0x26, 0xf8, 0x9f, 0x24, 0xcb, 0x7e, 0x0e, 0xbf, 0x6e, 0x81, 0xb6, 0x5e, 0xfc,
	0x24, 0x23, 0xfe, 0x25, 0xcd, 0xe0, 0x6b, 0x00, 0xcb, 0x5d, 0xca, 0x52, 0x70, 0xe5, 0x4d, 0x4a,
	0xab, 0xc5, 0x97, 0x07, 0x51, 0x91, 0x93, 0x9b, 0x94, 0xfe, 0xf3, 0x48, 0xb6, 0x1e, 0x76, 0x24,
	0xf5, 0xbf, 0x8f, 0xe4, 0x08, 0xec, 0x73, 0x7a, 0x2d, 0xdd, 0x0d, 0xae, 0xa1, 0xb9, 0x8e, 0x32,
	0xce, 0xd7, 0xd8, 0x53, 0x70, 0x90, 0x66, 0xf4, 0x8a, 0x89, 0x22, 0xdf, 0xe4, 0xcb, 0x8b, 0x78,
	0xba, 0x30, 0xd7, 0x63, 0x3e, 0x83, 0x83, 0xb5, 0xfc, 0xb9, 0x24, 0x99, 0x74, 0xd5, 0xfb, 0xa8,
	0x6e, 0xe3, 0x61, 0xc3, 0x83, 0xcb, 0x4e, 0x3e, 0xaa, 0x04, 0x0a, 0x19, 0xbe, 0xbb, 0x9b, 0x59,
	0xc6, 0xfd, 0xcc, 0x32, 0x7e, 0xce, 0x2c, 0xe3, 0x76, 0x6e, 0xd5, 0xee, 0xe7, 0x56, 0xed, 0xdb,
	0xdc, 0xaa, 0x7d, 0x39, 0x0e, 0x99, 0x8c, 0x0a, 0x0f, 0xf9, 0x22, 0xc1, 0x71, 0x91, 0x1c, 0x2f,
	0x9e, 0xbc, 0x1f, 0x11, 0xc6, 0xf1, 0xf5, 0xea, 0xe9, 0xab, 0x31, 0xe7, 0xde, 0xb6, 0x2e, 0xfd,
	0xf6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x54, 0x7d, 0x2b, 0x1f, 0x04, 0x00, 0x00,
}

func (m *EpochUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEpoch(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEpoch(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	if m.UpdatedAtHeight != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.UpdatedAtHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAtHeight != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.CreatedAtHeight))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEpoch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.WithdrawalIdsCount != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.WithdrawalIdsCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.WithdrawalIds) > 0 {
		dAtA5 := make([]byte, len(m.WithdrawalIds)*10)
		var j4 int
		for _, num := range m.WithdrawalIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintEpoch(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.NextEpochStartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.NextEpochStartTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintEpoch(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	if m.PreviousEpochNumber != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.PreviousEpochNumber))
		i--
		dAtA[i] = 0x28
	}
	if m.NextEpochNumber != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.NextEpochNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochTrackerType) > 0 {
		i -= len(m.EpochTrackerType)
		copy(dAtA[i:], m.EpochTrackerType)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.EpochTrackerType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpoch(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpoch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovEpoch(uint64(m.EpochNumber))
	}
	if m.PoolId != 0 {
		n += 1 + sovEpoch(uint64(m.PoolId))
	}
	if len(m.WithdrawalIds) > 0 {
		l = 0
		for _, e := range m.WithdrawalIds {
			l += sovEpoch(uint64(e))
		}
		n += 1 + sovEpoch(uint64(l)) + l
	}
	if m.WithdrawalIdsCount != 0 {
		n += 1 + sovEpoch(uint64(m.WithdrawalIdsCount))
	}
	l = m.TotalAmount.Size()
	n += 1 + l + sovEpoch(uint64(l))
	if m.CreatedAtHeight != 0 {
		n += 1 + sovEpoch(uint64(m.CreatedAtHeight))
	}
	if m.UpdatedAtHeight != 0 {
		n += 1 + sovEpoch(uint64(m.UpdatedAtHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovEpoch(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovEpoch(uint64(l))
	return n
}

func (m *EpochTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochTrackerType)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovEpoch(uint64(m.EpochNumber))
	}
	if m.NextEpochNumber != 0 {
		n += 1 + sovEpoch(uint64(m.NextEpochNumber))
	}
	if m.PreviousEpochNumber != 0 {
		n += 1 + sovEpoch(uint64(m.PreviousEpochNumber))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.NextEpochStartTime)
	n += 1 + l + sovEpoch(uint64(l))
	return n
}

func sovEpoch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpoch(x uint64) (n int) {
	return sovEpoch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEpoch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WithdrawalIds = append(m.WithdrawalIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEpoch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEpoch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEpoch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WithdrawalIds) == 0 {
					m.WithdrawalIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEpoch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WithdrawalIds = append(m.WithdrawalIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalIdsCount", wireType)
			}
			m.WithdrawalIdsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalIdsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtHeight", wireType)
			}
			m.CreatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtHeight", wireType)
			}
			m.UpdatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochTrackerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochTrackerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochNumber", wireType)
			}
			m.NextEpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochNumber", wireType)
			}
			m.PreviousEpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousEpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.NextEpochStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpoch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpoch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpoch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpoch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpoch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpoch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpoch = fmt.Errorf("proto: unexpected end of group")
)
