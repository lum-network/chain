// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/millions/callbacks.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferType int32

const (
	TransferType_Unspecified TransferType = 0
	TransferType_Claim       TransferType = 1
	TransferType_Withdraw    TransferType = 2
)

var TransferType_name = map[int32]string{
	0: "TRANSFER_TYPE_UNSPECIFIED",
	1: "TRANSFER_TYPE_CLAIM",
	2: "TRANSFER_TYPE_WITHDRAW",
}

var TransferType_value = map[string]int32{
	"TRANSFER_TYPE_UNSPECIFIED": 0,
	"TRANSFER_TYPE_CLAIM":       1,
	"TRANSFER_TYPE_WITHDRAW":    2,
}

func (x TransferType) String() string {
	return proto.EnumName(TransferType_name, int32(x))
}

func (TransferType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{0}
}

type SplitDelegation struct {
	ValidatorAddress string                                 `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *SplitDelegation) Reset()         { *m = SplitDelegation{} }
func (m *SplitDelegation) String() string { return proto.CompactTextString(m) }
func (*SplitDelegation) ProtoMessage()    {}
func (*SplitDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{0}
}
func (m *SplitDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitDelegation.Merge(m, src)
}
func (m *SplitDelegation) XXX_Size() int {
	return m.Size()
}
func (m *SplitDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_SplitDelegation proto.InternalMessageInfo

func (m *SplitDelegation) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type DelegateCallback struct {
	PoolId           uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DepositId        uint64             `protobuf:"varint,2,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	SplitDelegations []*SplitDelegation `protobuf:"bytes,3,rep,name=split_delegations,json=splitDelegations,proto3" json:"split_delegations,omitempty"`
}

func (m *DelegateCallback) Reset()         { *m = DelegateCallback{} }
func (m *DelegateCallback) String() string { return proto.CompactTextString(m) }
func (*DelegateCallback) ProtoMessage()    {}
func (*DelegateCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{1}
}
func (m *DelegateCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateCallback.Merge(m, src)
}
func (m *DelegateCallback) XXX_Size() int {
	return m.Size()
}
func (m *DelegateCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateCallback.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateCallback proto.InternalMessageInfo

func (m *DelegateCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *DelegateCallback) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

func (m *DelegateCallback) GetSplitDelegations() []*SplitDelegation {
	if m != nil {
		return m.SplitDelegations
	}
	return nil
}

type UndelegateCallback struct {
	PoolId           uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	WithdrawalId     uint64             `protobuf:"varint,2,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
	SplitDelegations []*SplitDelegation `protobuf:"bytes,3,rep,name=split_delegations,json=splitDelegations,proto3" json:"split_delegations,omitempty"`
}

func (m *UndelegateCallback) Reset()         { *m = UndelegateCallback{} }
func (m *UndelegateCallback) String() string { return proto.CompactTextString(m) }
func (*UndelegateCallback) ProtoMessage()    {}
func (*UndelegateCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{2}
}
func (m *UndelegateCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegateCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegateCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegateCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegateCallback.Merge(m, src)
}
func (m *UndelegateCallback) XXX_Size() int {
	return m.Size()
}
func (m *UndelegateCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegateCallback.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegateCallback proto.InternalMessageInfo

func (m *UndelegateCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UndelegateCallback) GetWithdrawalId() uint64 {
	if m != nil {
		return m.WithdrawalId
	}
	return 0
}

func (m *UndelegateCallback) GetSplitDelegations() []*SplitDelegation {
	if m != nil {
		return m.SplitDelegations
	}
	return nil
}

type RedelegateCallback struct {
	PoolId           uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	OperatorAddress  string             `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	SplitDelegations []*SplitDelegation `protobuf:"bytes,3,rep,name=split_delegations,json=splitDelegations,proto3" json:"split_delegations,omitempty"`
}

func (m *RedelegateCallback) Reset()         { *m = RedelegateCallback{} }
func (m *RedelegateCallback) String() string { return proto.CompactTextString(m) }
func (*RedelegateCallback) ProtoMessage()    {}
func (*RedelegateCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{3}
}
func (m *RedelegateCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegateCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegateCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegateCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegateCallback.Merge(m, src)
}
func (m *RedelegateCallback) XXX_Size() int {
	return m.Size()
}
func (m *RedelegateCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegateCallback.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegateCallback proto.InternalMessageInfo

func (m *RedelegateCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *RedelegateCallback) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *RedelegateCallback) GetSplitDelegations() []*SplitDelegation {
	if m != nil {
		return m.SplitDelegations
	}
	return nil
}

type ClaimRewardsCallback struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DrawId uint64 `protobuf:"varint,2,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
}

func (m *ClaimRewardsCallback) Reset()         { *m = ClaimRewardsCallback{} }
func (m *ClaimRewardsCallback) String() string { return proto.CompactTextString(m) }
func (*ClaimRewardsCallback) ProtoMessage()    {}
func (*ClaimRewardsCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{4}
}
func (m *ClaimRewardsCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRewardsCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRewardsCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRewardsCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRewardsCallback.Merge(m, src)
}
func (m *ClaimRewardsCallback) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRewardsCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRewardsCallback.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRewardsCallback proto.InternalMessageInfo

func (m *ClaimRewardsCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *ClaimRewardsCallback) GetDrawId() uint64 {
	if m != nil {
		return m.DrawId
	}
	return 0
}

type TransferToNativeCallback struct {
	PoolId    uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DepositId uint64 `protobuf:"varint,2,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
}

func (m *TransferToNativeCallback) Reset()         { *m = TransferToNativeCallback{} }
func (m *TransferToNativeCallback) String() string { return proto.CompactTextString(m) }
func (*TransferToNativeCallback) ProtoMessage()    {}
func (*TransferToNativeCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{5}
}
func (m *TransferToNativeCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferToNativeCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferToNativeCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferToNativeCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferToNativeCallback.Merge(m, src)
}
func (m *TransferToNativeCallback) XXX_Size() int {
	return m.Size()
}
func (m *TransferToNativeCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferToNativeCallback.DiscardUnknown(m)
}

var xxx_messageInfo_TransferToNativeCallback proto.InternalMessageInfo

func (m *TransferToNativeCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *TransferToNativeCallback) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

type TransferFromNativeCallback struct {
	Type         TransferType `protobuf:"varint,1,opt,name=type,proto3,enum=lum.network.millions.TransferType" json:"type,omitempty"`
	PoolId       uint64       `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DrawId       uint64       `protobuf:"varint,3,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	WithdrawalId uint64       `protobuf:"varint,4,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
}

func (m *TransferFromNativeCallback) Reset()         { *m = TransferFromNativeCallback{} }
func (m *TransferFromNativeCallback) String() string { return proto.CompactTextString(m) }
func (*TransferFromNativeCallback) ProtoMessage()    {}
func (*TransferFromNativeCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{6}
}
func (m *TransferFromNativeCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferFromNativeCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferFromNativeCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferFromNativeCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFromNativeCallback.Merge(m, src)
}
func (m *TransferFromNativeCallback) XXX_Size() int {
	return m.Size()
}
func (m *TransferFromNativeCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFromNativeCallback.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFromNativeCallback proto.InternalMessageInfo

func (m *TransferFromNativeCallback) GetType() TransferType {
	if m != nil {
		return m.Type
	}
	return TransferType_Unspecified
}

func (m *TransferFromNativeCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *TransferFromNativeCallback) GetDrawId() uint64 {
	if m != nil {
		return m.DrawId
	}
	return 0
}

func (m *TransferFromNativeCallback) GetWithdrawalId() uint64 {
	if m != nil {
		return m.WithdrawalId
	}
	return 0
}

type SetWithdrawAddressCallback struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *SetWithdrawAddressCallback) Reset()         { *m = SetWithdrawAddressCallback{} }
func (m *SetWithdrawAddressCallback) String() string { return proto.CompactTextString(m) }
func (*SetWithdrawAddressCallback) ProtoMessage()    {}
func (*SetWithdrawAddressCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{7}
}
func (m *SetWithdrawAddressCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetWithdrawAddressCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetWithdrawAddressCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetWithdrawAddressCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetWithdrawAddressCallback.Merge(m, src)
}
func (m *SetWithdrawAddressCallback) XXX_Size() int {
	return m.Size()
}
func (m *SetWithdrawAddressCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_SetWithdrawAddressCallback.DiscardUnknown(m)
}

var xxx_messageInfo_SetWithdrawAddressCallback proto.InternalMessageInfo

func (m *SetWithdrawAddressCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type BankSendCallback struct {
	PoolId       uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	WithdrawalId uint64 `protobuf:"varint,2,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
}

func (m *BankSendCallback) Reset()         { *m = BankSendCallback{} }
func (m *BankSendCallback) String() string { return proto.CompactTextString(m) }
func (*BankSendCallback) ProtoMessage()    {}
func (*BankSendCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bf5a3c4f1710be, []int{8}
}
func (m *BankSendCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankSendCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankSendCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankSendCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankSendCallback.Merge(m, src)
}
func (m *BankSendCallback) XXX_Size() int {
	return m.Size()
}
func (m *BankSendCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_BankSendCallback.DiscardUnknown(m)
}

var xxx_messageInfo_BankSendCallback proto.InternalMessageInfo

func (m *BankSendCallback) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *BankSendCallback) GetWithdrawalId() uint64 {
	if m != nil {
		return m.WithdrawalId
	}
	return 0
}

func init() {
	proto.RegisterEnum("lum.network.millions.TransferType", TransferType_name, TransferType_value)
	proto.RegisterType((*SplitDelegation)(nil), "lum.network.millions.SplitDelegation")
	proto.RegisterType((*DelegateCallback)(nil), "lum.network.millions.DelegateCallback")
	proto.RegisterType((*UndelegateCallback)(nil), "lum.network.millions.UndelegateCallback")
	proto.RegisterType((*RedelegateCallback)(nil), "lum.network.millions.RedelegateCallback")
	proto.RegisterType((*ClaimRewardsCallback)(nil), "lum.network.millions.ClaimRewardsCallback")
	proto.RegisterType((*TransferToNativeCallback)(nil), "lum.network.millions.TransferToNativeCallback")
	proto.RegisterType((*TransferFromNativeCallback)(nil), "lum.network.millions.TransferFromNativeCallback")
	proto.RegisterType((*SetWithdrawAddressCallback)(nil), "lum.network.millions.SetWithdrawAddressCallback")
	proto.RegisterType((*BankSendCallback)(nil), "lum.network.millions.BankSendCallback")
}

func init() {
	proto.RegisterFile("lum/network/millions/callbacks.proto", fileDescriptor_e5bf5a3c4f1710be)
}

var fileDescriptor_e5bf5a3c4f1710be = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x4f, 0x13, 0x41,
	0x18, 0xed, 0x94, 0x5a, 0x64, 0x40, 0x59, 0xd6, 0x46, 0xca, 0x26, 0x2e, 0xcd, 0xfa, 0x23, 0x44,
	0xd3, 0x6d, 0x82, 0xd1, 0x7b, 0x29, 0xad, 0x6c, 0xa2, 0x84, 0x4c, 0x4b, 0x88, 0x5e, 0x9a, 0xa1,
	0x33, 0x94, 0x49, 0x67, 0x77, 0x36, 0x3b, 0x53, 0x2a, 0xff, 0x80, 0x31, 0x9c, 0x8c, 0x77, 0xbc,
	0x98, 0x78, 0xf1, 0xea, 0xdf, 0x60, 0x38, 0x12, 0x4f, 0xc6, 0x03, 0x31, 0xf0, 0x8f, 0x98, 0xdd,
	0xee, 0xd2, 0x16, 0x30, 0x90, 0x28, 0xa7, 0x76, 0xbe, 0xef, 0xed, 0xcc, 0x7b, 0xef, 0x7b, 0xf9,
	0xe0, 0x03, 0xde, 0x75, 0x4b, 0x1e, 0x55, 0x3d, 0x11, 0x74, 0x4a, 0x2e, 0xe3, 0x9c, 0x09, 0x4f,
	0x96, 0x5a, 0x98, 0xf3, 0x4d, 0xdc, 0xea, 0x48, 0xdb, 0x0f, 0x84, 0x12, 0x7a, 0x8e, 0x77, 0x5d,
	0x3b, 0x46, 0xd9, 0x09, 0xca, 0xc8, 0xb5, 0x45, 0x5b, 0x44, 0x80, 0x52, 0xf8, 0xaf, 0x8f, 0x35,
	0xe6, 0x5a, 0x42, 0xba, 0x42, 0x36, 0xfb, 0x8d, 0xfe, 0xa1, 0xdf, 0xb2, 0xde, 0x01, 0x38, 0x5d,
	0xf7, 0x39, 0x53, 0xcb, 0x94, 0xd3, 0x36, 0x56, 0x4c, 0x78, 0xfa, 0x13, 0x38, 0xb3, 0x83, 0x39,
	0x23, 0x58, 0x89, 0xa0, 0x89, 0x09, 0x09, 0xa8, 0x94, 0x79, 0x50, 0x00, 0x0b, 0x13, 0x48, 0x3b,
	0x6d, 0x94, 0xfb, 0x75, 0xbd, 0x06, 0xb3, 0xd8, 0x15, 0x5d, 0x4f, 0xe5, 0xd3, 0x21, 0x62, 0xc9,
	0x3e, 0x38, 0x9a, 0x4f, 0xfd, 0x3a, 0x9a, 0x7f, 0xd4, 0x66, 0x6a, 0xbb, 0xbb, 0x69, 0xb7, 0x84,
	0x1b, 0xbf, 0x18, 0xff, 0x14, 0x25, 0xe9, 0x94, 0xd4, 0xae, 0x4f, 0xa5, 0xed, 0x78, 0x0a, 0xc5,
	0x5f, 0x5b, 0x9f, 0x00, 0xd4, 0x62, 0x0e, 0xb4, 0x12, 0x6b, 0xd5, 0x67, 0xe1, 0xb8, 0x2f, 0x04,
	0x6f, 0x32, 0x12, 0xbd, 0x9f, 0x41, 0xd9, 0xf0, 0xe8, 0x10, 0xfd, 0x1e, 0x84, 0x84, 0xfa, 0x42,
	0x32, 0x15, 0xf6, 0xd2, 0x51, 0x6f, 0x22, 0xae, 0x38, 0x44, 0x47, 0x70, 0x46, 0x86, 0xa2, 0x9a,
	0xe4, 0x54, 0x95, 0xcc, 0x8f, 0x15, 0xc6, 0x16, 0x26, 0x17, 0x1f, 0xda, 0x17, 0x19, 0x67, 0x9f,
	0xf1, 0x00, 0x69, 0x72, 0xb4, 0x20, 0xad, 0x2f, 0x00, 0xea, 0xeb, 0x1e, 0xb9, 0x32, 0xc5, 0xfb,
	0xf0, 0x56, 0x8f, 0xa9, 0x6d, 0x12, 0xe0, 0x1e, 0xe6, 0x03, 0x96, 0x53, 0x83, 0xe2, 0x35, 0x11,
	0xfd, 0x0e, 0xa0, 0x8e, 0xe8, 0xd5, 0x89, 0x56, 0xa0, 0x26, 0x7c, 0x1a, 0x8c, 0x4c, 0xbb, 0x3f,
	0xcb, 0xfc, 0x8f, 0x6f, 0xc5, 0x5c, 0x1c, 0x97, 0x78, 0xde, 0x75, 0x15, 0x30, 0xaf, 0x8d, 0xa6,
	0x93, 0x2f, 0x92, 0x18, 0x5c, 0x87, 0x90, 0x15, 0x98, 0xab, 0x70, 0xcc, 0x5c, 0x44, 0x7b, 0x38,
	0x20, 0xf2, 0x72, 0x25, 0xb3, 0x70, 0x3c, 0x74, 0x76, 0x60, 0x76, 0x36, 0x3c, 0x3a, 0xc4, 0x42,
	0x30, 0xdf, 0x08, 0xb0, 0x27, 0xb7, 0x68, 0xd0, 0x10, 0xab, 0x58, 0xb1, 0x9d, 0x7f, 0xce, 0x98,
	0xf5, 0x15, 0x40, 0x23, 0xb9, 0xb4, 0x16, 0x08, 0xf7, 0xcc, 0xb5, 0xcf, 0x61, 0x26, 0x0c, 0x79,
	0x74, 0xe7, 0xed, 0x45, 0xeb, 0x62, 0x0f, 0x4e, 0x49, 0xed, 0xfa, 0x14, 0x45, 0xf8, 0x61, 0x3a,
	0xe9, 0xbf, 0x89, 0x1b, 0x1b, 0x16, 0x77, 0x3e, 0x68, 0x99, 0xf3, 0x41, 0xb3, 0x9e, 0x41, 0xa3,
	0x4e, 0xd5, 0x46, 0x5c, 0x8a, 0xa7, 0x76, 0xa9, 0x07, 0xd6, 0x1a, 0xd4, 0x96, 0xb0, 0xd7, 0xa9,
	0x53, 0x8f, 0xfc, 0x9f, 0xc4, 0x3f, 0xfe, 0x08, 0xe0, 0xd4, 0xb0, 0x6c, 0xdd, 0x86, 0x73, 0x0d,
	0x54, 0x5e, 0xad, 0xd7, 0xaa, 0xa8, 0xd9, 0x78, 0xbd, 0x56, 0x6d, 0xae, 0xaf, 0xd6, 0xd7, 0xaa,
	0x15, 0xa7, 0xe6, 0x54, 0x97, 0xb5, 0x94, 0x31, 0xbd, 0xb7, 0x5f, 0x98, 0x5c, 0xf7, 0xa4, 0x4f,
	0x5b, 0x6c, 0x8b, 0x51, 0xa2, 0x5b, 0xf0, 0xce, 0x28, 0xbe, 0xf2, 0xb2, 0xec, 0xbc, 0xd2, 0x80,
	0x31, 0xb1, 0xb7, 0x5f, 0xb8, 0x11, 0x05, 0x46, 0x5f, 0x80, 0x77, 0x47, 0x31, 0x1b, 0x4e, 0x63,
	0x65, 0x19, 0x95, 0x37, 0xb4, 0xb4, 0x31, 0xb5, 0xb7, 0x5f, 0xb8, 0x99, 0x18, 0x61, 0x64, 0xde,
	0x7f, 0x36, 0xc1, 0xd2, 0x8b, 0x83, 0x63, 0x13, 0x1c, 0x1e, 0x9b, 0xe0, 0xf7, 0xb1, 0x09, 0x3e,
	0x9c, 0x98, 0xa9, 0xc3, 0x13, 0x33, 0xf5, 0xf3, 0xc4, 0x4c, 0xbd, 0x29, 0x0e, 0xad, 0x31, 0xde,
	0x75, 0x8b, 0xc9, 0x5e, 0x6e, 0x6d, 0x63, 0xe6, 0x95, 0xde, 0x0e, 0xf6, 0x73, 0xb4, 0xd1, 0x36,
	0xb3, 0xd1, 0x56, 0x7d, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xf3, 0x76, 0x17, 0xc4, 0x05,
	0x00, 0x00,
}

func (m *SplitDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCallbacks(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SplitDelegations) > 0 {
		for iNdEx := len(m.SplitDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SplitDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCallbacks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DepositId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UndelegateCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegateCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegateCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SplitDelegations) > 0 {
		for iNdEx := len(m.SplitDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SplitDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCallbacks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.WithdrawalId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.WithdrawalId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RedelegateCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegateCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegateCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SplitDelegations) > 0 {
		for iNdEx := len(m.SplitDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SplitDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCallbacks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimRewardsCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRewardsCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRewardsCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DrawId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.DrawId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferToNativeCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToNativeCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferToNativeCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferFromNativeCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFromNativeCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferFromNativeCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawalId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.WithdrawalId))
		i--
		dAtA[i] = 0x20
	}
	if m.DrawId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.DrawId))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetWithdrawAddressCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetWithdrawAddressCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetWithdrawAddressCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BankSendCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankSendCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BankSendCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawalId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.WithdrawalId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCallbacks(dAtA []byte, offset int, v uint64) int {
	offset -= sovCallbacks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SplitDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCallbacks(uint64(l))
	return n
}

func (m *DelegateCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	if m.DepositId != 0 {
		n += 1 + sovCallbacks(uint64(m.DepositId))
	}
	if len(m.SplitDelegations) > 0 {
		for _, e := range m.SplitDelegations {
			l = e.Size()
			n += 1 + l + sovCallbacks(uint64(l))
		}
	}
	return n
}

func (m *UndelegateCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	if m.WithdrawalId != 0 {
		n += 1 + sovCallbacks(uint64(m.WithdrawalId))
	}
	if len(m.SplitDelegations) > 0 {
		for _, e := range m.SplitDelegations {
			l = e.Size()
			n += 1 + l + sovCallbacks(uint64(l))
		}
	}
	return n
}

func (m *RedelegateCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	if len(m.SplitDelegations) > 0 {
		for _, e := range m.SplitDelegations {
			l = e.Size()
			n += 1 + l + sovCallbacks(uint64(l))
		}
	}
	return n
}

func (m *ClaimRewardsCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	if m.DrawId != 0 {
		n += 1 + sovCallbacks(uint64(m.DrawId))
	}
	return n
}

func (m *TransferToNativeCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	if m.DepositId != 0 {
		n += 1 + sovCallbacks(uint64(m.DepositId))
	}
	return n
}

func (m *TransferFromNativeCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCallbacks(uint64(m.Type))
	}
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	if m.DrawId != 0 {
		n += 1 + sovCallbacks(uint64(m.DrawId))
	}
	if m.WithdrawalId != 0 {
		n += 1 + sovCallbacks(uint64(m.WithdrawalId))
	}
	return n
}

func (m *SetWithdrawAddressCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	return n
}

func (m *BankSendCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovCallbacks(uint64(m.PoolId))
	}
	if m.WithdrawalId != 0 {
		n += 1 + sovCallbacks(uint64(m.WithdrawalId))
	}
	return n
}

func sovCallbacks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCallbacks(x uint64) (n int) {
	return sovCallbacks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SplitDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitDelegations = append(m.SplitDelegations, &SplitDelegation{})
			if err := m.SplitDelegations[len(m.SplitDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegateCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegateCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegateCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalId", wireType)
			}
			m.WithdrawalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitDelegations = append(m.SplitDelegations, &SplitDelegation{})
			if err := m.SplitDelegations[len(m.SplitDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegateCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegateCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegateCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitDelegations = append(m.SplitDelegations, &SplitDelegation{})
			if err := m.SplitDelegations[len(m.SplitDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimRewardsCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRewardsCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRewardsCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawId", wireType)
			}
			m.DrawId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToNativeCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToNativeCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToNativeCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFromNativeCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFromNativeCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFromNativeCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TransferType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawId", wireType)
			}
			m.DrawId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalId", wireType)
			}
			m.WithdrawalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetWithdrawAddressCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetWithdrawAddressCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetWithdrawAddressCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankSendCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankSendCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankSendCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalId", wireType)
			}
			m.WithdrawalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCallbacks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCallbacks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCallbacks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCallbacks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCallbacks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCallbacks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCallbacks = fmt.Errorf("proto: unexpected end of group")
)
