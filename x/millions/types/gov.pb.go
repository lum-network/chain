// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/millions/gov.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalRegisterPool struct {
	Title               string                                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description         string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChainId             string                                 `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Denom               string                                 `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	NativeDenom         string                                 `protobuf:"bytes,5,opt,name=native_denom,json=nativeDenom,proto3" json:"native_denom,omitempty"`
	ConnectionId        string                                 `protobuf:"bytes,6,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Validators          []string                               `protobuf:"bytes,7,rep,name=validators,proto3" json:"validators,omitempty"`
	MinDepositAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=min_deposit_amount,json=minDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_deposit_amount"`
	DrawSchedule        DrawSchedule                           `protobuf:"bytes,9,opt,name=draw_schedule,json=drawSchedule,proto3" json:"draw_schedule"`
	PrizeStrategy       PrizeStrategy                          `protobuf:"bytes,10,opt,name=prize_strategy,json=prizeStrategy,proto3" json:"prize_strategy"`
	Bech32PrefixAccAddr string                                 `protobuf:"bytes,11,opt,name=bech32_prefix_acc_addr,json=bech32PrefixAccAddr,proto3" json:"bech32_prefix_acc_addr,omitempty"`
	Bech32PrefixValAddr string                                 `protobuf:"bytes,12,opt,name=bech32_prefix_val_addr,json=bech32PrefixValAddr,proto3" json:"bech32_prefix_val_addr,omitempty"`
	TransferChannelId   string                                 `protobuf:"bytes,13,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
	UnbondingDuration   time.Duration                          `protobuf:"bytes,14,opt,name=unbonding_duration,json=unbondingDuration,proto3,stdduration" json:"unbonding_duration"`
	MaxUnbondingEntries github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,15,opt,name=max_unbonding_entries,json=maxUnbondingEntries,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_unbonding_entries"`
	PoolType            PoolType                               `protobuf:"varint,16,opt,name=pool_type,json=poolType,proto3,enum=lum.network.millions.PoolType" json:"pool_type,omitempty"`
	FeeTakers           []FeeTaker                             `protobuf:"bytes,17,rep,name=fee_takers,json=feeTakers,proto3" json:"fee_takers"`
}

func (m *ProposalRegisterPool) Reset()      { *m = ProposalRegisterPool{} }
func (*ProposalRegisterPool) ProtoMessage() {}
func (*ProposalRegisterPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51755d1062ffc9e, []int{0}
}
func (m *ProposalRegisterPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalRegisterPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalRegisterPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalRegisterPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalRegisterPool.Merge(m, src)
}
func (m *ProposalRegisterPool) XXX_Size() int {
	return m.Size()
}
func (m *ProposalRegisterPool) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalRegisterPool.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalRegisterPool proto.InternalMessageInfo

func (m *ProposalRegisterPool) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalRegisterPool) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalRegisterPool) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ProposalRegisterPool) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ProposalRegisterPool) GetNativeDenom() string {
	if m != nil {
		return m.NativeDenom
	}
	return ""
}

func (m *ProposalRegisterPool) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *ProposalRegisterPool) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ProposalRegisterPool) GetDrawSchedule() DrawSchedule {
	if m != nil {
		return m.DrawSchedule
	}
	return DrawSchedule{}
}

func (m *ProposalRegisterPool) GetPrizeStrategy() PrizeStrategy {
	if m != nil {
		return m.PrizeStrategy
	}
	return PrizeStrategy{}
}

func (m *ProposalRegisterPool) GetBech32PrefixAccAddr() string {
	if m != nil {
		return m.Bech32PrefixAccAddr
	}
	return ""
}

func (m *ProposalRegisterPool) GetBech32PrefixValAddr() string {
	if m != nil {
		return m.Bech32PrefixValAddr
	}
	return ""
}

func (m *ProposalRegisterPool) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

func (m *ProposalRegisterPool) GetUnbondingDuration() time.Duration {
	if m != nil {
		return m.UnbondingDuration
	}
	return 0
}

func (m *ProposalRegisterPool) GetPoolType() PoolType {
	if m != nil {
		return m.PoolType
	}
	return PoolType_Unspecified
}

func (m *ProposalRegisterPool) GetFeeTakers() []FeeTaker {
	if m != nil {
		return m.FeeTakers
	}
	return nil
}

type ProposalUpdatePool struct {
	Title               string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description         string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PoolId              uint64                                  `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Validators          []string                                `protobuf:"bytes,4,rep,name=validators,proto3" json:"validators,omitempty"`
	MinDepositAmount    *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=min_deposit_amount,json=minDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_deposit_amount,omitempty"`
	DrawSchedule        *DrawSchedule                           `protobuf:"bytes,6,opt,name=draw_schedule,json=drawSchedule,proto3" json:"draw_schedule,omitempty"`
	PrizeStrategy       *PrizeStrategy                          `protobuf:"bytes,7,opt,name=prize_strategy,json=prizeStrategy,proto3" json:"prize_strategy,omitempty"`
	State               PoolState                               `protobuf:"varint,8,opt,name=state,proto3,enum=lum.network.millions.PoolState" json:"state,omitempty"`
	UnbondingDuration   *time.Duration                          `protobuf:"bytes,9,opt,name=unbonding_duration,json=unbondingDuration,proto3,stdduration" json:"unbonding_duration,omitempty"`
	MaxUnbondingEntries *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=max_unbonding_entries,json=maxUnbondingEntries,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_unbonding_entries,omitempty"`
	FeeTakers           []FeeTaker                              `protobuf:"bytes,11,rep,name=fee_takers,json=feeTakers,proto3" json:"fee_takers"`
}

func (m *ProposalUpdatePool) Reset()      { *m = ProposalUpdatePool{} }
func (*ProposalUpdatePool) ProtoMessage() {}
func (*ProposalUpdatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51755d1062ffc9e, []int{1}
}
func (m *ProposalUpdatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalUpdatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalUpdatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalUpdatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalUpdatePool.Merge(m, src)
}
func (m *ProposalUpdatePool) XXX_Size() int {
	return m.Size()
}
func (m *ProposalUpdatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalUpdatePool.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalUpdatePool proto.InternalMessageInfo

func (m *ProposalUpdatePool) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalUpdatePool) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalUpdatePool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *ProposalUpdatePool) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ProposalUpdatePool) GetDrawSchedule() *DrawSchedule {
	if m != nil {
		return m.DrawSchedule
	}
	return nil
}

func (m *ProposalUpdatePool) GetPrizeStrategy() *PrizeStrategy {
	if m != nil {
		return m.PrizeStrategy
	}
	return nil
}

func (m *ProposalUpdatePool) GetState() PoolState {
	if m != nil {
		return m.State
	}
	return PoolState_Unspecified
}

func (m *ProposalUpdatePool) GetUnbondingDuration() *time.Duration {
	if m != nil {
		return m.UnbondingDuration
	}
	return nil
}

func (m *ProposalUpdatePool) GetFeeTakers() []FeeTaker {
	if m != nil {
		return m.FeeTakers
	}
	return nil
}

type ProposalUpdateParams struct {
	Title                   string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description             string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MinDepositAmount        *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=min_deposit_amount,json=minDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_deposit_amount,omitempty"`
	MaxPrizeStrategyBatches *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=max_prize_strategy_batches,json=maxPrizeStrategyBatches,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_prize_strategy_batches,omitempty"`
	MaxPrizeBatchQuantity   *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=max_prize_batch_quantity,json=maxPrizeBatchQuantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_prize_batch_quantity,omitempty"`
	MinDrawScheduleDelta    *time.Duration                          `protobuf:"bytes,6,opt,name=min_draw_schedule_delta,json=minDrawScheduleDelta,proto3,stdduration" json:"min_draw_schedule_delta,omitempty"`
	MaxDrawScheduleDelta    *time.Duration                          `protobuf:"bytes,7,opt,name=max_draw_schedule_delta,json=maxDrawScheduleDelta,proto3,stdduration" json:"max_draw_schedule_delta,omitempty"`
	PrizeExpirationDelta    *time.Duration                          `protobuf:"bytes,8,opt,name=prize_expiration_delta,json=prizeExpirationDelta,proto3,stdduration" json:"prize_expiration_delta,omitempty"`
	MinDepositDrawDelta     *time.Duration                          `protobuf:"bytes,10,opt,name=min_deposit_draw_delta,json=minDepositDrawDelta,proto3,stdduration" json:"min_deposit_draw_delta,omitempty"`
}

func (m *ProposalUpdateParams) Reset()      { *m = ProposalUpdateParams{} }
func (*ProposalUpdateParams) ProtoMessage() {}
func (*ProposalUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f51755d1062ffc9e, []int{2}
}
func (m *ProposalUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalUpdateParams.Merge(m, src)
}
func (m *ProposalUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *ProposalUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalUpdateParams proto.InternalMessageInfo

func (m *ProposalUpdateParams) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalUpdateParams) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalUpdateParams) GetMinDrawScheduleDelta() *time.Duration {
	if m != nil {
		return m.MinDrawScheduleDelta
	}
	return nil
}

func (m *ProposalUpdateParams) GetMaxDrawScheduleDelta() *time.Duration {
	if m != nil {
		return m.MaxDrawScheduleDelta
	}
	return nil
}

func (m *ProposalUpdateParams) GetPrizeExpirationDelta() *time.Duration {
	if m != nil {
		return m.PrizeExpirationDelta
	}
	return nil
}

func (m *ProposalUpdateParams) GetMinDepositDrawDelta() *time.Duration {
	if m != nil {
		return m.MinDepositDrawDelta
	}
	return nil
}

func init() {
	proto.RegisterType((*ProposalRegisterPool)(nil), "lum.network.millions.ProposalRegisterPool")
	proto.RegisterType((*ProposalUpdatePool)(nil), "lum.network.millions.ProposalUpdatePool")
	proto.RegisterType((*ProposalUpdateParams)(nil), "lum.network.millions.ProposalUpdateParams")
}

func init() { proto.RegisterFile("lum/network/millions/gov.proto", fileDescriptor_f51755d1062ffc9e) }

var fileDescriptor_f51755d1062ffc9e = []byte{
	// 948 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6f, 0x23, 0x35,
	0x14, 0xc7, 0x3b, 0x34, 0x69, 0x12, 0xf7, 0x07, 0xad, 0x9b, 0x6d, 0x67, 0x7b, 0x98, 0x84, 0x2e,
	0x42, 0xe1, 0xd0, 0x89, 0xd4, 0x8a, 0x0b, 0x9c, 0xda, 0xcd, 0x82, 0x82, 0x84, 0x14, 0xa6, 0xbb,
	0x08, 0x56, 0x48, 0x23, 0x67, 0xec, 0x4c, 0xac, 0xce, 0xd8, 0x83, 0xed, 0x69, 0x53, 0xfe, 0x0a,
	0x8e, 0x7b, 0xe4, 0x4f, 0xe1, 0xc0, 0x61, 0x8f, 0x7b, 0x44, 0x1c, 0x16, 0xd4, 0xfe, 0x19, 0x5c,
	0x90, 0xed, 0x49, 0x93, 0xd0, 0x54, 0x34, 0xdd, 0x3d, 0x35, 0xf6, 0xfb, 0xbe, 0xcf, 0xf3, 0xf8,
	0xbd, 0x6f, 0x67, 0x80, 0x97, 0xe4, 0x69, 0x9b, 0x11, 0x75, 0xc1, 0xc5, 0x59, 0x3b, 0xa5, 0x49,
	0x42, 0x39, 0x93, 0xed, 0x98, 0x9f, 0xfb, 0x99, 0xe0, 0x8a, 0xc3, 0x7a, 0x92, 0xa7, 0x7e, 0x11,
	0xf7, 0xc7, 0xf1, 0xbd, 0x7a, 0xcc, 0x63, 0x6e, 0x04, 0x6d, 0xfd, 0xcb, 0x6a, 0xf7, 0xbc, 0x98,
	0xf3, 0x38, 0x21, 0x6d, 0xb3, 0xea, 0xe7, 0x83, 0x36, 0xce, 0x05, 0x52, 0x94, 0xb3, 0x22, 0xde,
	0x98, 0x5b, 0x2b, 0xe3, 0x3c, 0x29, 0x04, 0xad, 0xb9, 0x02, 0x2c, 0xd0, 0x45, 0x28, 0xa3, 0x21,
	0xc1, 0x79, 0x42, 0x0a, 0xe5, 0xa7, 0xf3, 0x51, 0x82, 0xfe, 0x4c, 0x42, 0xa9, 0x04, 0x52, 0x24,
	0xbe, 0xb4, 0xd2, 0xfd, 0xdf, 0x2a, 0xa0, 0xde, 0x13, 0x3c, 0xe3, 0x12, 0x25, 0x01, 0x89, 0xa9,
	0x54, 0x44, 0xf4, 0x38, 0x4f, 0x60, 0x1d, 0x94, 0x15, 0x55, 0x09, 0x71, 0x9d, 0xa6, 0xd3, 0xaa,
	0x05, 0x76, 0x01, 0x9b, 0x60, 0x15, 0x13, 0x19, 0x09, 0x9a, 0xe9, 0x93, 0xbb, 0x1f, 0x98, 0xd8,
	0xf4, 0x16, 0x7c, 0x0c, 0xaa, 0xd1, 0x10, 0x51, 0x16, 0x52, 0xec, 0x2e, 0x9b, 0x70, 0xc5, 0xac,
	0xbb, 0x58, 0x23, 0x31, 0x61, 0x3c, 0x75, 0x4b, 0x16, 0x69, 0x16, 0xf0, 0x23, 0xb0, 0xc6, 0x90,
	0xa2, 0xe7, 0x24, 0xb4, 0xc1, 0xb2, 0x65, 0xda, 0xbd, 0x8e, 0x91, 0x3c, 0x01, 0xeb, 0x11, 0x67,
	0x8c, 0x44, 0xba, 0x82, 0x06, 0xaf, 0x18, 0xcd, 0xda, 0x64, 0xb3, 0x8b, 0xa1, 0x07, 0xc0, 0x39,
	0x4a, 0x28, 0x46, 0x8a, 0x0b, 0xe9, 0x56, 0x9a, 0xcb, 0xad, 0x5a, 0x30, 0xb5, 0x03, 0x7f, 0x04,
	0x30, 0xa5, 0x2c, 0xc4, 0x24, 0xe3, 0x92, 0xaa, 0x10, 0xa5, 0x3c, 0x67, 0xca, 0xad, 0x6a, 0xd2,
	0x89, 0xff, 0xfa, 0x6d, 0x63, 0xe9, 0xcf, 0xb7, 0x8d, 0x4f, 0x62, 0xaa, 0x86, 0x79, 0xdf, 0x8f,
	0x78, 0xda, 0x8e, 0xb8, 0x4c, 0xb9, 0x2c, 0xfe, 0x1c, 0x48, 0x7c, 0xd6, 0x56, 0x97, 0x19, 0x91,
	0x7e, 0x97, 0xa9, 0x60, 0x33, 0xa5, 0xac, 0x63, 0x41, 0xc7, 0x86, 0x03, 0xbf, 0x01, 0xeb, 0x33,
	0x9d, 0x70, 0x6b, 0x4d, 0xa7, 0xb5, 0x7a, 0xb8, 0xef, 0xcf, 0x9b, 0x10, 0xbf, 0x23, 0xd0, 0xc5,
	0x69, 0xa1, 0x3c, 0x29, 0xe9, 0xe2, 0xc1, 0x1a, 0x9e, 0xda, 0x83, 0x3d, 0xb0, 0x31, 0xdb, 0x2e,
	0x17, 0x18, 0xde, 0x93, 0xf9, 0xbc, 0x9e, 0xd6, 0x9e, 0x16, 0xd2, 0x02, 0xb8, 0x9e, 0x4d, 0x6f,
	0xc2, 0x23, 0xb0, 0xd3, 0x27, 0xd1, 0xf0, 0xe8, 0x30, 0xcc, 0x04, 0x19, 0xd0, 0x51, 0x88, 0xa2,
	0x28, 0x44, 0x18, 0x0b, 0x77, 0xd5, 0x5c, 0xe6, 0xb6, 0x8d, 0xf6, 0x4c, 0xf0, 0x38, 0x8a, 0x8e,
	0x31, 0x16, 0xb7, 0x93, 0xce, 0x51, 0x62, 0x93, 0xd6, 0x6e, 0x27, 0x7d, 0x87, 0x12, 0x93, 0xe4,
	0x83, 0x6d, 0x25, 0x10, 0x93, 0x03, 0x22, 0xc2, 0x68, 0x88, 0x18, 0x23, 0x89, 0xee, 0xd9, 0xba,
	0xc9, 0xd8, 0x1a, 0x87, 0x9e, 0xda, 0x48, 0x17, 0xc3, 0x00, 0xc0, 0x9c, 0xf5, 0x39, 0xc3, 0x94,
	0xc5, 0xe1, 0xd8, 0x14, 0xee, 0x86, 0x79, 0xde, 0xc7, 0xbe, 0x75, 0x8d, 0x3f, 0x76, 0x8d, 0xdf,
	0x29, 0x04, 0x27, 0x55, 0xfd, 0x94, 0xaf, 0xfe, 0x6a, 0x38, 0xc1, 0xd6, 0x4d, 0xfa, 0x38, 0x08,
	0xfb, 0xe0, 0x51, 0x8a, 0x46, 0xe1, 0x84, 0x4b, 0x98, 0x12, 0x94, 0x48, 0xf7, 0xc3, 0x07, 0xf5,
	0x7b, 0x3b, 0x45, 0xa3, 0x17, 0x63, 0xd6, 0x33, 0x8b, 0x82, 0x5f, 0x80, 0x9a, 0x76, 0x67, 0xa8,
	0x65, 0xee, 0x66, 0xd3, 0x69, 0x6d, 0x1c, 0x7a, 0x77, 0xb4, 0x87, 0xf3, 0xe4, 0xf9, 0x65, 0x46,
	0x82, 0x6a, 0x56, 0xfc, 0x82, 0x4f, 0x01, 0x18, 0x10, 0x12, 0x2a, 0x74, 0x46, 0x84, 0x74, 0xb7,
	0x9a, 0xcb, 0xad, 0xd5, 0xbb, 0xb2, 0xbf, 0x24, 0xe4, 0xb9, 0x96, 0x15, 0x7d, 0xad, 0x0d, 0x8a,
	0xb5, 0xfc, 0xbc, 0xf4, 0xea, 0xd7, 0xc6, 0xd2, 0xfe, 0xef, 0x65, 0x00, 0xc7, 0x16, 0x7e, 0x91,
	0x61, 0xa4, 0xc8, 0x3b, 0x19, 0x78, 0x17, 0x54, 0xcc, 0x63, 0x15, 0xfe, 0x2d, 0x05, 0x2b, 0x7a,
	0xd9, 0xc5, 0xf0, 0xe3, 0x19, 0x83, 0x95, 0xb4, 0xc1, 0xcc, 0x91, 0x9c, 0x7b, 0xd8, 0xac, 0x7c,
	0x73, 0xed, 0xce, 0xfb, 0xb5, 0xd9, 0xca, 0x42, 0x36, 0x73, 0xfe, 0xd7, 0x66, 0x95, 0xc5, 0x6c,
	0xe6, 0xfc, 0xd7, 0x66, 0x9f, 0x81, 0xb2, 0x54, 0x48, 0x11, 0xf3, 0x8f, 0x65, 0xe3, 0xb0, 0x71,
	0xf7, 0x40, 0x9c, 0x6a, 0x59, 0x60, 0xd5, 0x77, 0x78, 0xa0, 0x76, 0x1f, 0x0f, 0x38, 0x0b, 0x7b,
	0x00, 0x3c, 0xa8, 0x19, 0x73, 0x3d, 0x30, 0x3b, 0xc6, 0xab, 0xef, 0x32, 0xc6, 0xff, 0x94, 0x27,
	0x6f, 0xa2, 0x62, 0x8c, 0x91, 0x40, 0xa9, 0x7c, 0xf0, 0x20, 0xcf, 0x9f, 0xc4, 0xe5, 0xf7, 0x34,
	0x89, 0x67, 0x60, 0x4f, 0xdf, 0xee, 0xec, 0xf8, 0x84, 0x7d, 0xa4, 0xa2, 0x21, 0x91, 0xf6, 0x0d,
	0xb7, 0x70, 0x95, 0xdd, 0x14, 0x8d, 0x66, 0x67, 0xcc, 0xe2, 0x60, 0x0c, 0xdc, 0x49, 0x31, 0x53,
	0x23, 0xfc, 0x29, 0x47, 0x4c, 0x51, 0x75, 0xf9, 0x40, 0x6b, 0x3d, 0x1a, 0x97, 0x32, 0x25, 0xbe,
	0x2d, 0x60, 0xf0, 0x25, 0xd8, 0x35, 0x77, 0x36, 0xed, 0xb1, 0x10, 0x93, 0x44, 0xa1, 0xc2, 0x69,
	0xf7, 0x1a, 0xc6, 0xba, 0xbe, 0xad, 0x29, 0x9f, 0x75, 0x34, 0xc0, 0xb0, 0xd1, 0x68, 0x2e, 0xbb,
	0xb2, 0x08, 0x1b, 0x8d, 0x6e, 0xb3, 0x7f, 0x00, 0x3b, 0xf6, 0x72, 0xc8, 0x28, 0xa3, 0x36, 0xa7,
	0x40, 0x57, 0x17, 0x40, 0x1b, 0xc4, 0xb3, 0x1b, 0x82, 0x45, 0x7f, 0x0f, 0x76, 0xa6, 0xc7, 0xc8,
	0x1c, 0xdf, 0xa2, 0xc1, 0xfd, 0xd1, 0xdb, 0x93, 0xf9, 0xd1, 0x87, 0x37, 0x64, 0x3b, 0xf7, 0x5f,
	0x97, 0xaa, 0xb5, 0x4d, 0x70, 0xf2, 0xd5, 0xeb, 0x2b, 0xcf, 0x79, 0x73, 0xe5, 0x39, 0x7f, 0x5f,
	0x79, 0xce, 0x2f, 0xd7, 0xde, 0xd2, 0x9b, 0x6b, 0x6f, 0xe9, 0x8f, 0x6b, 0x6f, 0xe9, 0xe5, 0xc1,
	0x54, 0x47, 0x93, 0x3c, 0x3d, 0x18, 0x7f, 0xd7, 0x99, 0xaf, 0xaa, 0xf6, 0x68, 0xf2, 0x7d, 0x67,
	0x9a, 0xdb, 0x5f, 0x31, 0xc7, 0x38, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xbc, 0xfd, 0x77,
	0xbb, 0x0a, 0x00, 0x00,
}

func (m *ProposalRegisterPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalRegisterPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalRegisterPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeTakers) > 0 {
		for iNdEx := len(m.FeeTakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.PoolType != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.PoolType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size := m.MaxUnbondingEntries.Size()
		i -= size
		if _, err := m.MaxUnbondingEntries.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGov(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x72
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintGov(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Bech32PrefixValAddr) > 0 {
		i -= len(m.Bech32PrefixValAddr)
		copy(dAtA[i:], m.Bech32PrefixValAddr)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Bech32PrefixValAddr)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Bech32PrefixAccAddr) > 0 {
		i -= len(m.Bech32PrefixAccAddr)
		copy(dAtA[i:], m.Bech32PrefixAccAddr)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Bech32PrefixAccAddr)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size, err := m.PrizeStrategy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.DrawSchedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.MinDepositAmount.Size()
		i -= size
		if _, err := m.MinDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintGov(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NativeDenom) > 0 {
		i -= len(m.NativeDenom)
		copy(dAtA[i:], m.NativeDenom)
		i = encodeVarintGov(dAtA, i, uint64(len(m.NativeDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalUpdatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalUpdatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalUpdatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeTakers) > 0 {
		for iNdEx := len(m.FeeTakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.MaxUnbondingEntries != nil {
		{
			size := m.MaxUnbondingEntries.Size()
			i -= size
			if _, err := m.MaxUnbondingEntries.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UnbondingDuration != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.UnbondingDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.UnbondingDuration):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintGov(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x4a
	}
	if m.State != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.PrizeStrategy != nil {
		{
			size, err := m.PrizeStrategy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DrawSchedule != nil {
		{
			size, err := m.DrawSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MinDepositAmount != nil {
		{
			size := m.MinDepositAmount.Size()
			i -= size
			if _, err := m.MinDepositAmount.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintGov(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinDepositDrawDelta != nil {
		n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.MinDepositDrawDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MinDepositDrawDelta):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintGov(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x52
	}
	if m.PrizeExpirationDelta != nil {
		n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.PrizeExpirationDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.PrizeExpirationDelta):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintGov(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x42
	}
	if m.MaxDrawScheduleDelta != nil {
		n9, err9 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.MaxDrawScheduleDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MaxDrawScheduleDelta):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintGov(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x3a
	}
	if m.MinDrawScheduleDelta != nil {
		n10, err10 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.MinDrawScheduleDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MinDrawScheduleDelta):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintGov(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxPrizeBatchQuantity != nil {
		{
			size := m.MaxPrizeBatchQuantity.Size()
			i -= size
			if _, err := m.MaxPrizeBatchQuantity.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxPrizeStrategyBatches != nil {
		{
			size := m.MaxPrizeStrategyBatches.Size()
			i -= size
			if _, err := m.MaxPrizeStrategyBatches.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MinDepositAmount != nil {
		{
			size := m.MinDepositAmount.Size()
			i -= size
			if _, err := m.MinDepositAmount.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalRegisterPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.NativeDenom)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovGov(uint64(l))
		}
	}
	l = m.MinDepositAmount.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.DrawSchedule.Size()
	n += 1 + l + sovGov(uint64(l))
	l = m.PrizeStrategy.Size()
	n += 1 + l + sovGov(uint64(l))
	l = len(m.Bech32PrefixAccAddr)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Bech32PrefixValAddr)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingDuration)
	n += 1 + l + sovGov(uint64(l))
	l = m.MaxUnbondingEntries.Size()
	n += 1 + l + sovGov(uint64(l))
	if m.PoolType != 0 {
		n += 2 + sovGov(uint64(m.PoolType))
	}
	if len(m.FeeTakers) > 0 {
		for _, e := range m.FeeTakers {
			l = e.Size()
			n += 2 + l + sovGov(uint64(l))
		}
	}
	return n
}

func (m *ProposalUpdatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovGov(uint64(m.PoolId))
	}
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovGov(uint64(l))
		}
	}
	if m.MinDepositAmount != nil {
		l = m.MinDepositAmount.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.DrawSchedule != nil {
		l = m.DrawSchedule.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.PrizeStrategy != nil {
		l = m.PrizeStrategy.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGov(uint64(m.State))
	}
	if m.UnbondingDuration != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.UnbondingDuration)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.MaxUnbondingEntries != nil {
		l = m.MaxUnbondingEntries.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if len(m.FeeTakers) > 0 {
		for _, e := range m.FeeTakers {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	return n
}

func (m *ProposalUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.MinDepositAmount != nil {
		l = m.MinDepositAmount.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.MaxPrizeStrategyBatches != nil {
		l = m.MaxPrizeStrategyBatches.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.MaxPrizeBatchQuantity != nil {
		l = m.MaxPrizeBatchQuantity.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	if m.MinDrawScheduleDelta != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MinDrawScheduleDelta)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.MaxDrawScheduleDelta != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MaxDrawScheduleDelta)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.PrizeExpirationDelta != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.PrizeExpirationDelta)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.MinDepositDrawDelta != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MinDepositDrawDelta)
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalRegisterPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalRegisterPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalRegisterPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DrawSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrizeStrategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32PrefixAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32PrefixAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32PrefixValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32PrefixValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnbondingEntries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxUnbondingEntries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolType", wireType)
			}
			m.PoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolType |= PoolType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTakers = append(m.FeeTakers, FeeTaker{})
			if err := m.FeeTakers[len(m.FeeTakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalUpdatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalUpdatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalUpdatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MinDepositAmount = &v
			if err := m.MinDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrawSchedule == nil {
				m.DrawSchedule = &DrawSchedule{}
			}
			if err := m.DrawSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrizeStrategy == nil {
				m.PrizeStrategy = &PrizeStrategy{}
			}
			if err := m.PrizeStrategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PoolState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnbondingDuration == nil {
				m.UnbondingDuration = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.UnbondingDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnbondingEntries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MaxUnbondingEntries = &v
			if err := m.MaxUnbondingEntries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTakers = append(m.FeeTakers, FeeTaker{})
			if err := m.FeeTakers[len(m.FeeTakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MinDepositAmount = &v
			if err := m.MinDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrizeStrategyBatches", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MaxPrizeStrategyBatches = &v
			if err := m.MaxPrizeStrategyBatches.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrizeBatchQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MaxPrizeBatchQuantity = &v
			if err := m.MaxPrizeBatchQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDrawScheduleDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinDrawScheduleDelta == nil {
				m.MinDrawScheduleDelta = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.MinDrawScheduleDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDrawScheduleDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDrawScheduleDelta == nil {
				m.MaxDrawScheduleDelta = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.MaxDrawScheduleDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeExpirationDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrizeExpirationDelta == nil {
				m.PrizeExpirationDelta = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.PrizeExpirationDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositDrawDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinDepositDrawDelta == nil {
				m.MinDepositDrawDelta = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.MinDepositDrawDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
