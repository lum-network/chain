// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/millions/prize.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrizeState int32

const (
	PrizeState_Unspecified PrizeState = 0
	PrizeState_Pending     PrizeState = 1
)

var PrizeState_name = map[int32]string{
	0: "PRIZE_STATE_UNSPECIFIED",
	1: "PRIZE_STATE_PENDING",
}

var PrizeState_value = map[string]int32{
	"PRIZE_STATE_UNSPECIFIED": 0,
	"PRIZE_STATE_PENDING":     1,
}

func (x PrizeState) String() string {
	return proto.EnumName(PrizeState_name, int32(x))
}

func (PrizeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b061a1908a183d7c, []int{0}
}

type Prize struct {
	PoolId          uint64     `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DrawId          uint64     `protobuf:"varint,2,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	PrizeId         uint64     `protobuf:"varint,3,opt,name=prize_id,json=prizeId,proto3" json:"prize_id,omitempty"`
	State           PrizeState `protobuf:"varint,4,opt,name=state,proto3,enum=lum.network.millions.PrizeState" json:"state,omitempty"`
	WinnerAddress   string     `protobuf:"bytes,5,opt,name=winner_address,json=winnerAddress,proto3" json:"winner_address,omitempty"`
	Amount          types.Coin `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount"`
	CreatedAtHeight int64      `protobuf:"varint,7,opt,name=created_at_height,json=createdAtHeight,proto3" json:"created_at_height,omitempty"`
	UpdatedAtHeight int64      `protobuf:"varint,8,opt,name=updated_at_height,json=updatedAtHeight,proto3" json:"updated_at_height,omitempty"`
	ExpiresAt       time.Time  `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at"`
	CreatedAt       time.Time  `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt       time.Time  `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *Prize) Reset()         { *m = Prize{} }
func (m *Prize) String() string { return proto.CompactTextString(m) }
func (*Prize) ProtoMessage()    {}
func (*Prize) Descriptor() ([]byte, []int) {
	return fileDescriptor_b061a1908a183d7c, []int{0}
}
func (m *Prize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Prize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prize.Merge(m, src)
}
func (m *Prize) XXX_Size() int {
	return m.Size()
}
func (m *Prize) XXX_DiscardUnknown() {
	xxx_messageInfo_Prize.DiscardUnknown(m)
}

var xxx_messageInfo_Prize proto.InternalMessageInfo

func (m *Prize) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Prize) GetDrawId() uint64 {
	if m != nil {
		return m.DrawId
	}
	return 0
}

func (m *Prize) GetPrizeId() uint64 {
	if m != nil {
		return m.PrizeId
	}
	return 0
}

func (m *Prize) GetState() PrizeState {
	if m != nil {
		return m.State
	}
	return PrizeState_Unspecified
}

func (m *Prize) GetWinnerAddress() string {
	if m != nil {
		return m.WinnerAddress
	}
	return ""
}

func (m *Prize) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Prize) GetCreatedAtHeight() int64 {
	if m != nil {
		return m.CreatedAtHeight
	}
	return 0
}

func (m *Prize) GetUpdatedAtHeight() int64 {
	if m != nil {
		return m.UpdatedAtHeight
	}
	return 0
}

func (m *Prize) GetExpiresAt() time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return time.Time{}
}

func (m *Prize) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Prize) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

type PrizeIDs struct {
	PoolId  uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DrawId  uint64 `protobuf:"varint,2,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	PrizeId uint64 `protobuf:"varint,3,opt,name=prize_id,json=prizeId,proto3" json:"prize_id,omitempty"`
}

func (m *PrizeIDs) Reset()         { *m = PrizeIDs{} }
func (m *PrizeIDs) String() string { return proto.CompactTextString(m) }
func (*PrizeIDs) ProtoMessage()    {}
func (*PrizeIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b061a1908a183d7c, []int{1}
}
func (m *PrizeIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrizeIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrizeIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrizeIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrizeIDs.Merge(m, src)
}
func (m *PrizeIDs) XXX_Size() int {
	return m.Size()
}
func (m *PrizeIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_PrizeIDs.DiscardUnknown(m)
}

var xxx_messageInfo_PrizeIDs proto.InternalMessageInfo

func (m *PrizeIDs) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PrizeIDs) GetDrawId() uint64 {
	if m != nil {
		return m.DrawId
	}
	return 0
}

func (m *PrizeIDs) GetPrizeId() uint64 {
	if m != nil {
		return m.PrizeId
	}
	return 0
}

type PrizeIDsCollection struct {
	PrizesIds []PrizeIDs `protobuf:"bytes,1,rep,name=prizes_ids,json=prizesIds,proto3" json:"prizes_ids"`
}

func (m *PrizeIDsCollection) Reset()         { *m = PrizeIDsCollection{} }
func (m *PrizeIDsCollection) String() string { return proto.CompactTextString(m) }
func (*PrizeIDsCollection) ProtoMessage()    {}
func (*PrizeIDsCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_b061a1908a183d7c, []int{2}
}
func (m *PrizeIDsCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrizeIDsCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrizeIDsCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrizeIDsCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrizeIDsCollection.Merge(m, src)
}
func (m *PrizeIDsCollection) XXX_Size() int {
	return m.Size()
}
func (m *PrizeIDsCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_PrizeIDsCollection.DiscardUnknown(m)
}

var xxx_messageInfo_PrizeIDsCollection proto.InternalMessageInfo

func (m *PrizeIDsCollection) GetPrizesIds() []PrizeIDs {
	if m != nil {
		return m.PrizesIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("lum.network.millions.PrizeState", PrizeState_name, PrizeState_value)
	proto.RegisterType((*Prize)(nil), "lum.network.millions.Prize")
	proto.RegisterType((*PrizeIDs)(nil), "lum.network.millions.PrizeIDs")
	proto.RegisterType((*PrizeIDsCollection)(nil), "lum.network.millions.PrizeIDsCollection")
}

func init() { proto.RegisterFile("lum/network/millions/prize.proto", fileDescriptor_b061a1908a183d7c) }

var fileDescriptor_b061a1908a183d7c = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xd4, 0x3e,
	0x14, 0xc5, 0xc7, 0xff, 0x4e, 0xe7, 0xc3, 0xa3, 0x7f, 0x5b, 0x42, 0xa5, 0xa6, 0xb3, 0x48, 0xa3,
	0x8a, 0xc5, 0xa8, 0xa2, 0x89, 0x5a, 0x24, 0x58, 0xa2, 0xf9, 0xa2, 0x64, 0x53, 0x8d, 0x32, 0xad,
	0x10, 0xdd, 0x44, 0x99, 0xd8, 0xcd, 0x58, 0x24, 0x76, 0x14, 0x3b, 0xb4, 0xf0, 0x04, 0xa8, 0xab,
	0xbe, 0x40, 0x57, 0xac, 0xd9, 0xf1, 0x10, 0x5d, 0x56, 0xac, 0x58, 0x01, 0x6a, 0x5f, 0x04, 0x39,
	0xf6, 0xcc, 0x20, 0x84, 0x90, 0x2a, 0xb1, 0xcb, 0xf5, 0xf9, 0xf9, 0xe6, 0xd8, 0xe7, 0xca, 0xd0,
	0x4e, 0x8a, 0xd4, 0xa5, 0x58, 0x9c, 0xb1, 0xfc, 0x8d, 0x9b, 0x92, 0x24, 0x21, 0x8c, 0x72, 0x37,
	0xcb, 0xc9, 0x7b, 0xec, 0x64, 0x39, 0x13, 0xcc, 0x58, 0x4f, 0x8a, 0xd4, 0xd1, 0x84, 0x33, 0x23,
	0xda, 0xeb, 0x31, 0x8b, 0x59, 0x09, 0xb8, 0xf2, 0x4b, 0xb1, 0xed, 0xad, 0x98, 0xb1, 0x38, 0xc1,
	0x6e, 0x59, 0x4d, 0x8a, 0x53, 0x57, 0x90, 0x14, 0x73, 0x11, 0xa6, 0x99, 0x06, 0xac, 0x88, 0xf1,
	0x94, 0x71, 0x77, 0x12, 0x72, 0xec, 0xbe, 0xdd, 0x9b, 0x60, 0x11, 0xee, 0xb9, 0x11, 0x23, 0x54,
	0xeb, 0x9b, 0x4a, 0x0f, 0x54, 0x67, 0x55, 0x28, 0x69, 0xfb, 0x53, 0x15, 0x2e, 0x8f, 0xa4, 0x2f,
	0x63, 0x03, 0xd6, 0x33, 0xc6, 0x92, 0x80, 0x20, 0x13, 0xd8, 0xa0, 0x53, 0xf5, 0x6b, 0xb2, 0xf4,
	0x90, 0x14, 0x50, 0x1e, 0x9e, 0x49, 0xe1, 0x3f, 0x25, 0xc8, 0xd2, 0x43, 0xc6, 0x26, 0x6c, 0x94,
	0x47, 0x92, 0xca, 0x52, 0xa9, 0xd4, 0xcb, 0xda, 0x43, 0xc6, 0x53, 0xb8, 0xcc, 0x45, 0x28, 0xb0,
	0x59, 0xb5, 0x41, 0x67, 0x65, 0xdf, 0x76, 0xfe, 0x74, 0x5c, 0xa7, 0xfc, 0xf1, 0x58, 0x72, 0xbe,
	0xc2, 0x8d, 0xe7, 0x70, 0xe5, 0x8c, 0x50, 0x8a, 0xf3, 0x20, 0x44, 0x28, 0xc7, 0x9c, 0x9b, 0xcb,
	0x36, 0xe8, 0x34, 0x7b, 0xe6, 0x97, 0xcf, 0xbb, 0xeb, 0xda, 0x78, 0x57, 0x29, 0x63, 0x91, 0x13,
	0x1a, 0xfb, 0xff, 0x2b, 0x5e, 0x2f, 0x1a, 0xcf, 0x60, 0x2d, 0x4c, 0x59, 0x41, 0x85, 0x59, 0xb3,
	0x41, 0xa7, 0xb5, 0xbf, 0xe9, 0xe8, 0x5d, 0xf2, 0x6e, 0x1c, 0x7d, 0x37, 0x4e, 0x9f, 0x11, 0xda,
	0xab, 0x5e, 0x7f, 0xdb, 0xaa, 0xf8, 0x1a, 0x37, 0x76, 0xe0, 0x83, 0x28, 0xc7, 0xa1, 0xc0, 0x28,
	0x08, 0x45, 0x30, 0xc5, 0x24, 0x9e, 0x0a, 0xb3, 0x6e, 0x83, 0xce, 0x92, 0xbf, 0xaa, 0x85, 0xae,
	0x78, 0x59, 0x2e, 0x4b, 0xb6, 0xc8, 0xd0, 0x6f, 0x6c, 0x43, 0xb1, 0x5a, 0x98, 0xb3, 0x7d, 0x08,
	0xf1, 0x79, 0x46, 0x72, 0xcc, 0x83, 0x50, 0x98, 0xcd, 0xd2, 0x54, 0xdb, 0x51, 0x89, 0x3a, 0xb3,
	0x44, 0x9d, 0xa3, 0x59, 0xa2, 0xbd, 0x86, 0x74, 0x75, 0xf9, 0x7d, 0x0b, 0xf8, 0x4d, 0xbd, 0xaf,
	0x5b, 0x36, 0x59, 0x98, 0x33, 0xe1, 0x7d, 0x9a, 0xcc, 0xbd, 0xcb, 0x26, 0x0b, 0xd7, 0x66, 0xeb,
	0x3e, 0x4d, 0xe6, 0x87, 0xda, 0x7e, 0x05, 0x1b, 0x65, 0x6a, 0xde, 0x80, 0xff, 0xd3, 0x89, 0xd9,
	0x7e, 0x0d, 0x8d, 0x59, 0xe3, 0x3e, 0x4b, 0x12, 0x1c, 0x09, 0xc2, 0xa8, 0xf4, 0x5c, 0x02, 0x3c,
	0x20, 0x88, 0x9b, 0xc0, 0x5e, 0xea, 0xb4, 0xf6, 0xad, 0xbf, 0x0c, 0x93, 0x37, 0xe0, 0x3a, 0xd7,
	0xa6, 0xda, 0xe7, 0x21, 0xbe, 0x73, 0x0a, 0xe1, 0x62, 0xd2, 0x8c, 0xc7, 0x70, 0x63, 0xe4, 0x7b,
	0x27, 0xc3, 0x60, 0x7c, 0xd4, 0x3d, 0x1a, 0x06, 0xc7, 0x87, 0xe3, 0xd1, 0xb0, 0xef, 0xbd, 0xf0,
	0x86, 0x83, 0xb5, 0x4a, 0x7b, 0xf5, 0xe2, 0xca, 0x6e, 0x1d, 0x53, 0x9e, 0xe1, 0x88, 0x9c, 0x12,
	0x8c, 0x8c, 0x47, 0xf0, 0xe1, 0xaf, 0xf4, 0x68, 0x78, 0x38, 0xf0, 0x0e, 0x0f, 0xd6, 0x40, 0xbb,
	0x75, 0x71, 0x65, 0xd7, 0x47, 0x98, 0x22, 0x42, 0xe3, 0x76, 0xf5, 0xc3, 0x47, 0x0b, 0xf4, 0x0e,
	0xae, 0x6f, 0x2d, 0x70, 0x73, 0x6b, 0x81, 0x1f, 0xb7, 0x16, 0xb8, 0xbc, 0xb3, 0x2a, 0x37, 0x77,
	0x56, 0xe5, 0xeb, 0x9d, 0x55, 0x39, 0xd9, 0x8d, 0x89, 0x98, 0x16, 0x13, 0x27, 0x62, 0xa9, 0x9b,
	0x14, 0xe9, 0xee, 0xec, 0x69, 0x88, 0xa6, 0x21, 0xa1, 0xee, 0xf9, 0xe2, 0x89, 0x10, 0xef, 0x32,
	0xcc, 0x27, 0xb5, 0x32, 0x8d, 0x27, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x80, 0x46, 0x89, 0xc1,
	0x47, 0x04, 0x00, 0x00,
}

func (m *Prize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Prize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPrize(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPrize(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x52
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExpiresAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpiresAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintPrize(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	if m.UpdatedAtHeight != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.UpdatedAtHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAtHeight != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.CreatedAtHeight))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrize(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.WinnerAddress) > 0 {
		i -= len(m.WinnerAddress)
		copy(dAtA[i:], m.WinnerAddress)
		i = encodeVarintPrize(dAtA, i, uint64(len(m.WinnerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.PrizeId != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.PrizeId))
		i--
		dAtA[i] = 0x18
	}
	if m.DrawId != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.DrawId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrizeIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrizeIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrizeIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrizeId != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.PrizeId))
		i--
		dAtA[i] = 0x18
	}
	if m.DrawId != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.DrawId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPrize(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrizeIDsCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrizeIDsCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrizeIDsCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrizesIds) > 0 {
		for iNdEx := len(m.PrizesIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrizesIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrize(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrize(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Prize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPrize(uint64(m.PoolId))
	}
	if m.DrawId != 0 {
		n += 1 + sovPrize(uint64(m.DrawId))
	}
	if m.PrizeId != 0 {
		n += 1 + sovPrize(uint64(m.PrizeId))
	}
	if m.State != 0 {
		n += 1 + sovPrize(uint64(m.State))
	}
	l = len(m.WinnerAddress)
	if l > 0 {
		n += 1 + l + sovPrize(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPrize(uint64(l))
	if m.CreatedAtHeight != 0 {
		n += 1 + sovPrize(uint64(m.CreatedAtHeight))
	}
	if m.UpdatedAtHeight != 0 {
		n += 1 + sovPrize(uint64(m.UpdatedAtHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpiresAt)
	n += 1 + l + sovPrize(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovPrize(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovPrize(uint64(l))
	return n
}

func (m *PrizeIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPrize(uint64(m.PoolId))
	}
	if m.DrawId != 0 {
		n += 1 + sovPrize(uint64(m.DrawId))
	}
	if m.PrizeId != 0 {
		n += 1 + sovPrize(uint64(m.PrizeId))
	}
	return n
}

func (m *PrizeIDsCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrizesIds) > 0 {
		for _, e := range m.PrizesIds {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	return n
}

func sovPrize(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrize(x uint64) (n int) {
	return sovPrize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Prize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawId", wireType)
			}
			m.DrawId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeId", wireType)
			}
			m.PrizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PrizeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtHeight", wireType)
			}
			m.CreatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtHeight", wireType)
			}
			m.UpdatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrizeIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrizeIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrizeIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawId", wireType)
			}
			m.DrawId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeId", wireType)
			}
			m.PrizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrizeIDsCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrizeIDsCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrizeIDsCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizesIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizesIds = append(m.PrizesIds, PrizeIDs{})
			if err := m.PrizesIds[len(m.PrizesIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrize
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrize
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrize
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrize        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrize          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrize = fmt.Errorf("proto: unexpected end of group")
)
