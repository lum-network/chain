// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/millions/prize_batch.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrizeBatch struct {
	PoolPercent     uint64                                 `protobuf:"varint,1,opt,name=pool_percent,json=poolPercent,proto3" json:"pool_percent,omitempty"`
	Quantity        uint64                                 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	DrawProbability github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=draw_probability,json=drawProbability,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"draw_probability"`
}

func (m *PrizeBatch) Reset()         { *m = PrizeBatch{} }
func (m *PrizeBatch) String() string { return proto.CompactTextString(m) }
func (*PrizeBatch) ProtoMessage()    {}
func (*PrizeBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9bb1d8a04f50c53, []int{0}
}
func (m *PrizeBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrizeBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrizeBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrizeBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrizeBatch.Merge(m, src)
}
func (m *PrizeBatch) XXX_Size() int {
	return m.Size()
}
func (m *PrizeBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_PrizeBatch.DiscardUnknown(m)
}

var xxx_messageInfo_PrizeBatch proto.InternalMessageInfo

func (m *PrizeBatch) GetPoolPercent() uint64 {
	if m != nil {
		return m.PoolPercent
	}
	return 0
}

func (m *PrizeBatch) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func init() {
	proto.RegisterType((*PrizeBatch)(nil), "lum.network.millions.PrizeBatch")
}

func init() {
	proto.RegisterFile("lum/network/millions/prize_batch.proto", fileDescriptor_d9bb1d8a04f50c53)
}

var fileDescriptor_d9bb1d8a04f50c53 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x40, 0x08, 0x0c, 0x12, 0x28, 0xea, 0x50, 0x75, 0x70, 0x0b, 0x43, 0xd5, 0xa5,
	0xf6, 0xc0, 0x0d, 0x22, 0x24, 0xd6, 0xa8, 0x1b, 0x2c, 0x51, 0xe2, 0x5a, 0x89, 0x55, 0x3b, 0xcf,
	0x38, 0x8e, 0x4a, 0x39, 0x05, 0xa7, 0xe0, 0x2c, 0x1d, 0x3b, 0x22, 0x86, 0x0a, 0x25, 0x17, 0x41,
	0x4e, 0x5b, 0xca, 0x64, 0xbf, 0xff, 0x7d, 0xfa, 0xa4, 0xf7, 0xe3, 0xb1, 0xaa, 0x35, 0x2b, 0x85,
	0x5b, 0x82, 0x5d, 0x30, 0x2d, 0x95, 0x92, 0x50, 0x56, 0xcc, 0x58, 0xf9, 0x2e, 0x92, 0x2c, 0x75,
	0xbc, 0xa0, 0xc6, 0x82, 0x83, 0xb0, 0xa7, 0x6a, 0x4d, 0xf7, 0x1c, 0x3d, 0x70, 0x83, 0x5e, 0x0e,
	0x39, 0x74, 0x00, 0xf3, 0xbf, 0x1d, 0x7b, 0xff, 0x89, 0x30, 0x8e, 0xbd, 0x21, 0xf2, 0x82, 0xf0,
	0x0e, 0x5f, 0x1b, 0x00, 0x95, 0x18, 0x61, 0xb9, 0x28, 0x5d, 0x1f, 0x8d, 0xd0, 0xe4, 0x6c, 0x76,
	0xe5, 0xb3, 0x78, 0x17, 0x85, 0x03, 0x7c, 0xf1, 0x5a, 0xa7, 0xa5, 0x93, 0x6e, 0xd5, 0x3f, 0xe9,
	0xd6, 0x7f, 0x73, 0xf8, 0x8c, 0x6f, 0xe7, 0x36, 0x5d, 0x26, 0xc6, 0x42, 0x96, 0x66, 0x52, 0x79,
	0xe6, 0x74, 0x84, 0x26, 0x97, 0x11, 0x5d, 0x6f, 0x87, 0xc1, 0xf7, 0x76, 0x38, 0xce, 0xa5, 0x2b,
	0xea, 0x8c, 0x72, 0xd0, 0x8c, 0x43, 0xa5, 0xa1, 0xda, 0x3f, 0xd3, 0x6a, 0xbe, 0x60, 0x6e, 0x65,
	0x44, 0x45, 0x1f, 0x05, 0x9f, 0xdd, 0x78, 0x4f, 0x7c, 0xd4, 0x44, 0x4f, 0xeb, 0x86, 0xa0, 0x4d,
	0x43, 0xd0, 0x4f, 0x43, 0xd0, 0x47, 0x4b, 0x82, 0x4d, 0x4b, 0x82, 0xaf, 0x96, 0x04, 0x2f, 0xd3,
	0x7f, 0x4a, 0x55, 0xeb, 0xe9, 0xa1, 0x21, 0x5e, 0xa4, 0xb2, 0x64, 0x6f, 0xc7, 0xa6, 0x3a, 0x7b,
	0x76, 0xde, 0x1d, 0xfe, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x0c, 0xdf, 0xd1, 0x4e, 0x01,
	0x00, 0x00,
}

func (m *PrizeBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrizeBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrizeBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DrawProbability.Size()
		i -= size
		if _, err := m.DrawProbability.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPrizeBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Quantity != 0 {
		i = encodeVarintPrizeBatch(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolPercent != 0 {
		i = encodeVarintPrizeBatch(dAtA, i, uint64(m.PoolPercent))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrizeBatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrizeBatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrizeBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolPercent != 0 {
		n += 1 + sovPrizeBatch(uint64(m.PoolPercent))
	}
	if m.Quantity != 0 {
		n += 1 + sovPrizeBatch(uint64(m.Quantity))
	}
	l = m.DrawProbability.Size()
	n += 1 + l + sovPrizeBatch(uint64(l))
	return n
}

func sovPrizeBatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrizeBatch(x uint64) (n int) {
	return sovPrizeBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrizeBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrizeBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrizeBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrizeBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPercent", wireType)
			}
			m.PoolPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrizeBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolPercent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrizeBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawProbability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrizeBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrizeBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrizeBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DrawProbability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrizeBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrizeBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrizeBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrizeBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrizeBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrizeBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrizeBatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrizeBatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrizeBatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrizeBatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrizeBatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrizeBatch = fmt.Errorf("proto: unexpected end of group")
)
