// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/millions/pool.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolState the state of a Pool
// Deposits are only accepted for Pools in a Ready state
//
// TODO:
// Pool state KILLED is not available in the current implementation
// Introduce the capability to:
// - Kill a Pool and withdraw or migrate all deposits to another Pool via
// Governance proposal
type PoolState int32

const (
	PoolState_Unspecified PoolState = 0
	PoolState_Created     PoolState = 1
	PoolState_Ready       PoolState = 2
	PoolState_Paused      PoolState = 3
	PoolState_Closing     PoolState = 4
	PoolState_Closed      PoolState = 5
)

var PoolState_name = map[int32]string{
	0: "POOL_STATE_UNSPECIFIED",
	1: "POOL_STATE_CREATED",
	2: "POOL_STATE_READY",
	3: "POOL_STATE_PAUSED",
	4: "POOL_STATE_CLOSING",
	5: "POOL_STATE_CLOSED",
}

var PoolState_value = map[string]int32{
	"POOL_STATE_UNSPECIFIED": 0,
	"POOL_STATE_CREATED":     1,
	"POOL_STATE_READY":       2,
	"POOL_STATE_PAUSED":      3,
	"POOL_STATE_CLOSING":     4,
	"POOL_STATE_CLOSED":      5,
}

func (x PoolState) String() string {
	return proto.EnumName(PoolState_name, int32(x))
}

func (PoolState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1401529e8cac8ff, []int{0}
}

type PoolClosingStep int32

const (
	PoolClosingStep_Unspecified PoolClosingStep = 0
	PoolClosingStep_Withdraw    PoolClosingStep = 1
	PoolClosingStep_Draw        PoolClosingStep = 2
)

var PoolClosingStep_name = map[int32]string{
	0: "POOL_CLOSING_STEP_UNSPECIFIED",
	1: "POOL_CLOSING_STEP_WITHDRAW",
	2: "POOL_CLOSING_STEP_DRAW",
}

var PoolClosingStep_value = map[string]int32{
	"POOL_CLOSING_STEP_UNSPECIFIED": 0,
	"POOL_CLOSING_STEP_WITHDRAW":    1,
	"POOL_CLOSING_STEP_DRAW":        2,
}

func (x PoolClosingStep) String() string {
	return proto.EnumName(PoolClosingStep_name, int32(x))
}

func (PoolClosingStep) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1401529e8cac8ff, []int{1}
}

// PoolType the type of Pool
// Each PoolType implements a dedicated runner which applies its own Pool
// Lifecycle in order to deliver yield and distribute prizes
type PoolType int32

const (
	PoolType_Unspecified PoolType = 0
	PoolType_Staking     PoolType = 1
)

var PoolType_name = map[int32]string{
	0: "POOL_TYPE_UNSPECIFIED",
	1: "POOL_TYPE_STAKING",
}

var PoolType_value = map[string]int32{
	"POOL_TYPE_UNSPECIFIED": 0,
	"POOL_TYPE_STAKING":     1,
}

func (x PoolType) String() string {
	return proto.EnumName(PoolType_name, int32(x))
}

func (PoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1401529e8cac8ff, []int{2}
}

type FeeTakerType int32

const (
	FeeTakerType_Unspecified        FeeTakerType = 0
	FeeTakerType_LocalAddr          FeeTakerType = 1
	FeeTakerType_LocalModuleAccount FeeTakerType = 2
	FeeTakerType_RemoteAddr         FeeTakerType = 3
)

var FeeTakerType_name = map[int32]string{
	0: "FEE_TAKER_TYPE_UNSPECIFIED",
	1: "FEE_TAKER_TYPE_LOCAL_ADDR",
	2: "FEE_TAKER_TYPE_LOCAL_MODULE_ACCOUNT",
	3: "FEE_TAKER_TYPE_REMOTE_ADDR",
}

var FeeTakerType_value = map[string]int32{
	"FEE_TAKER_TYPE_UNSPECIFIED":          0,
	"FEE_TAKER_TYPE_LOCAL_ADDR":           1,
	"FEE_TAKER_TYPE_LOCAL_MODULE_ACCOUNT": 2,
	"FEE_TAKER_TYPE_REMOTE_ADDR":          3,
}

func (x FeeTakerType) String() string {
	return proto.EnumName(FeeTakerType_name, int32(x))
}

func (FeeTakerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1401529e8cac8ff, []int{3}
}

type FeeTaker struct {
	Destination string                                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"amount"`
	Type        FeeTakerType                           `protobuf:"varint,3,opt,name=type,proto3,enum=lum.network.millions.FeeTakerType" json:"type,omitempty"`
}

func (m *FeeTaker) Reset()         { *m = FeeTaker{} }
func (m *FeeTaker) String() string { return proto.CompactTextString(m) }
func (*FeeTaker) ProtoMessage()    {}
func (*FeeTaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1401529e8cac8ff, []int{0}
}
func (m *FeeTaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeTaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeTaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeTaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeTaker.Merge(m, src)
}
func (m *FeeTaker) XXX_Size() int {
	return m.Size()
}
func (m *FeeTaker) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeTaker.DiscardUnknown(m)
}

var xxx_messageInfo_FeeTaker proto.InternalMessageInfo

func (m *FeeTaker) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *FeeTaker) GetType() FeeTakerType {
	if m != nil {
		return m.Type
	}
	return FeeTakerType_Unspecified
}

type Pool struct {
	PoolId              uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Denom               string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	NativeDenom         string                                 `protobuf:"bytes,3,opt,name=native_denom,json=nativeDenom,proto3" json:"native_denom,omitempty"`
	ChainId             string                                 `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConnectionId        string                                 `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	TransferChannelId   string                                 `protobuf:"bytes,6,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
	IcaDepositPortId    string                                 `protobuf:"bytes,7,opt,name=ica_deposit_port_id,json=icaDepositPortId,proto3" json:"ica_deposit_port_id,omitempty"`
	IcaPrizepoolPortId  string                                 `protobuf:"bytes,8,opt,name=ica_prizepool_port_id,json=icaPrizepoolPortId,proto3" json:"ica_prizepool_port_id,omitempty"`
	PoolType            PoolType                               `protobuf:"varint,9,opt,name=pool_type,json=poolType,proto3,enum=lum.network.millions.PoolType" json:"pool_type,omitempty"`
	Validators          []PoolValidator                        `protobuf:"bytes,10,rep,name=validators,proto3" json:"validators"`
	Bech32PrefixAccAddr string                                 `protobuf:"bytes,11,opt,name=bech32_prefix_acc_addr,json=bech32PrefixAccAddr,proto3" json:"bech32_prefix_acc_addr,omitempty"`
	Bech32PrefixValAddr string                                 `protobuf:"bytes,12,opt,name=bech32_prefix_val_addr,json=bech32PrefixValAddr,proto3" json:"bech32_prefix_val_addr,omitempty"`
	MinDepositAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=min_deposit_amount,json=minDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_deposit_amount"`
	DrawSchedule        DrawSchedule                           `protobuf:"bytes,14,opt,name=draw_schedule,json=drawSchedule,proto3" json:"draw_schedule"`
	PrizeStrategy       PrizeStrategy                          `protobuf:"bytes,15,opt,name=prize_strategy,json=prizeStrategy,proto3" json:"prize_strategy"`
	UnbondingDuration   time.Duration                          `protobuf:"bytes,16,opt,name=unbonding_duration,json=unbondingDuration,proto3,stdduration" json:"unbonding_duration"`
	MaxUnbondingEntries github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,17,opt,name=max_unbonding_entries,json=maxUnbondingEntries,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_unbonding_entries"`
	LocalAddress        string                                 `protobuf:"bytes,18,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	IcaDepositAddress   string                                 `protobuf:"bytes,19,opt,name=ica_deposit_address,json=icaDepositAddress,proto3" json:"ica_deposit_address,omitempty"`
	IcaPrizepoolAddress string                                 `protobuf:"bytes,20,opt,name=ica_prizepool_address,json=icaPrizepoolAddress,proto3" json:"ica_prizepool_address,omitempty"`
	NextDrawId          uint64                                 `protobuf:"varint,22,opt,name=next_draw_id,json=nextDrawId,proto3" json:"next_draw_id,omitempty"`
	TvlAmount           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,23,opt,name=tvl_amount,json=tvlAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tvl_amount"`
	DepositorsCount     uint64                                 `protobuf:"varint,24,opt,name=depositors_count,json=depositorsCount,proto3" json:"depositors_count,omitempty"`
	SponsorshipAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,25,opt,name=sponsorship_amount,json=sponsorshipAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sponsorship_amount"`
	LastDrawCreatedAt   *time.Time                             `protobuf:"bytes,27,opt,name=last_draw_created_at,json=lastDrawCreatedAt,proto3,stdtime" json:"last_draw_created_at,omitempty"`
	LastDrawState       DrawState                              `protobuf:"varint,28,opt,name=last_draw_state,json=lastDrawState,proto3,enum=lum.network.millions.DrawState" json:"last_draw_state,omitempty"`
	AvailablePrizePool  types1.Coin                            `protobuf:"bytes,29,opt,name=available_prize_pool,json=availablePrizePool,proto3" json:"available_prize_pool"`
	FeeTakers           []FeeTaker                             `protobuf:"bytes,30,rep,name=fee_takers,json=feeTakers,proto3" json:"fee_takers"`
	ClosingStep         PoolClosingStep                        `protobuf:"varint,31,opt,name=closing_step,json=closingStep,proto3,enum=lum.network.millions.PoolClosingStep" json:"closing_step,omitempty"`
	State               PoolState                              `protobuf:"varint,32,opt,name=state,proto3,enum=lum.network.millions.PoolState" json:"state,omitempty"`
	CreatedAtHeight     int64                                  `protobuf:"varint,33,opt,name=created_at_height,json=createdAtHeight,proto3" json:"created_at_height,omitempty"`
	UpdatedAtHeight     int64                                  `protobuf:"varint,34,opt,name=updated_at_height,json=updatedAtHeight,proto3" json:"updated_at_height,omitempty"`
	CreatedAt           time.Time                              `protobuf:"bytes,35,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt           time.Time                              `protobuf:"bytes,36,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1401529e8cac8ff, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Pool) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Pool) GetNativeDenom() string {
	if m != nil {
		return m.NativeDenom
	}
	return ""
}

func (m *Pool) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Pool) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *Pool) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

func (m *Pool) GetIcaDepositPortId() string {
	if m != nil {
		return m.IcaDepositPortId
	}
	return ""
}

func (m *Pool) GetIcaPrizepoolPortId() string {
	if m != nil {
		return m.IcaPrizepoolPortId
	}
	return ""
}

func (m *Pool) GetPoolType() PoolType {
	if m != nil {
		return m.PoolType
	}
	return PoolType_Unspecified
}

func (m *Pool) GetValidators() []PoolValidator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Pool) GetBech32PrefixAccAddr() string {
	if m != nil {
		return m.Bech32PrefixAccAddr
	}
	return ""
}

func (m *Pool) GetBech32PrefixValAddr() string {
	if m != nil {
		return m.Bech32PrefixValAddr
	}
	return ""
}

func (m *Pool) GetDrawSchedule() DrawSchedule {
	if m != nil {
		return m.DrawSchedule
	}
	return DrawSchedule{}
}

func (m *Pool) GetPrizeStrategy() PrizeStrategy {
	if m != nil {
		return m.PrizeStrategy
	}
	return PrizeStrategy{}
}

func (m *Pool) GetUnbondingDuration() time.Duration {
	if m != nil {
		return m.UnbondingDuration
	}
	return 0
}

func (m *Pool) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *Pool) GetIcaDepositAddress() string {
	if m != nil {
		return m.IcaDepositAddress
	}
	return ""
}

func (m *Pool) GetIcaPrizepoolAddress() string {
	if m != nil {
		return m.IcaPrizepoolAddress
	}
	return ""
}

func (m *Pool) GetNextDrawId() uint64 {
	if m != nil {
		return m.NextDrawId
	}
	return 0
}

func (m *Pool) GetDepositorsCount() uint64 {
	if m != nil {
		return m.DepositorsCount
	}
	return 0
}

func (m *Pool) GetLastDrawCreatedAt() *time.Time {
	if m != nil {
		return m.LastDrawCreatedAt
	}
	return nil
}

func (m *Pool) GetLastDrawState() DrawState {
	if m != nil {
		return m.LastDrawState
	}
	return DrawState_Unspecified
}

func (m *Pool) GetAvailablePrizePool() types1.Coin {
	if m != nil {
		return m.AvailablePrizePool
	}
	return types1.Coin{}
}

func (m *Pool) GetFeeTakers() []FeeTaker {
	if m != nil {
		return m.FeeTakers
	}
	return nil
}

func (m *Pool) GetClosingStep() PoolClosingStep {
	if m != nil {
		return m.ClosingStep
	}
	return PoolClosingStep_Unspecified
}

func (m *Pool) GetState() PoolState {
	if m != nil {
		return m.State
	}
	return PoolState_Unspecified
}

func (m *Pool) GetCreatedAtHeight() int64 {
	if m != nil {
		return m.CreatedAtHeight
	}
	return 0
}

func (m *Pool) GetUpdatedAtHeight() int64 {
	if m != nil {
		return m.UpdatedAtHeight
	}
	return 0
}

func (m *Pool) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Pool) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

type PoolValidator struct {
	OperatorAddress string                                 `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	IsEnabled       bool                                   `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	BondedAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=bonded_amount,json=bondedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonded_amount"`
}

func (m *PoolValidator) Reset()         { *m = PoolValidator{} }
func (m *PoolValidator) String() string { return proto.CompactTextString(m) }
func (*PoolValidator) ProtoMessage()    {}
func (*PoolValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1401529e8cac8ff, []int{2}
}
func (m *PoolValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolValidator.Merge(m, src)
}
func (m *PoolValidator) XXX_Size() int {
	return m.Size()
}
func (m *PoolValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolValidator.DiscardUnknown(m)
}

var xxx_messageInfo_PoolValidator proto.InternalMessageInfo

func (m *PoolValidator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *PoolValidator) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func init() {
	proto.RegisterEnum("lum.network.millions.PoolState", PoolState_name, PoolState_value)
	proto.RegisterEnum("lum.network.millions.PoolClosingStep", PoolClosingStep_name, PoolClosingStep_value)
	proto.RegisterEnum("lum.network.millions.PoolType", PoolType_name, PoolType_value)
	proto.RegisterEnum("lum.network.millions.FeeTakerType", FeeTakerType_name, FeeTakerType_value)
	proto.RegisterType((*FeeTaker)(nil), "lum.network.millions.FeeTaker")
	proto.RegisterType((*Pool)(nil), "lum.network.millions.Pool")
	proto.RegisterType((*PoolValidator)(nil), "lum.network.millions.PoolValidator")
}

func init() { proto.RegisterFile("lum/network/millions/pool.proto", fileDescriptor_c1401529e8cac8ff) }

var fileDescriptor_c1401529e8cac8ff = []byte{
	// 1566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4d, 0x6f, 0xdb, 0xc8,
	0x19, 0x36, 0x63, 0xd9, 0x91, 0xc6, 0x52, 0x4c, 0x8f, 0x1d, 0x2f, 0xcd, 0x6d, 0x24, 0xc6, 0xd9,
	0x16, 0xde, 0x74, 0x2d, 0x21, 0x0e, 0xda, 0x4b, 0x51, 0x14, 0xb4, 0x44, 0x27, 0xda, 0xb5, 0x63,
	0x95, 0x92, 0x37, 0xd8, 0xa2, 0x05, 0x3b, 0x22, 0xc7, 0xd2, 0xc0, 0x14, 0x87, 0x20, 0x47, 0x8e,
	0xdd, 0x5f, 0x50, 0xe8, 0xb4, 0xc7, 0x5e, 0x84, 0x1e, 0x7a, 0xed, 0xb1, 0x3f, 0x22, 0x87, 0x1e,
	0x16, 0x3d, 0x15, 0x3d, 0x6c, 0x8b, 0xa4, 0xf7, 0xfe, 0x85, 0x62, 0x3e, 0x28, 0xc9, 0x5f, 0xf1,
	0xc6, 0x27, 0x71, 0xe6, 0x7d, 0xde, 0x67, 0xde, 0xef, 0x19, 0x81, 0x4a, 0x38, 0x1c, 0xd4, 0x22,
	0xcc, 0xde, 0xd0, 0xe4, 0xa4, 0x36, 0x20, 0x61, 0x48, 0x68, 0x94, 0xd6, 0x62, 0x4a, 0xc3, 0x6a,
	0x9c, 0x50, 0x46, 0xe1, 0x5a, 0x38, 0x1c, 0x54, 0x15, 0xa0, 0x9a, 0x01, 0xcc, 0xb5, 0x1e, 0xed,
	0x51, 0x01, 0xa8, 0xf1, 0x2f, 0x89, 0x35, 0xcb, 0x3d, 0x4a, 0x7b, 0x21, 0xae, 0x89, 0x55, 0x77,
	0x78, 0x5c, 0x0b, 0x86, 0x09, 0x62, 0x84, 0x46, 0x4a, 0x5e, 0xb9, 0x2c, 0x67, 0x64, 0x80, 0x53,
	0x86, 0x06, 0x71, 0x46, 0xe0, 0xd3, 0x74, 0x40, 0xd3, 0x5a, 0x17, 0xa5, 0xb8, 0x76, 0xfa, 0xac,
	0x8b, 0x19, 0x7a, 0x56, 0xf3, 0x29, 0xc9, 0x08, 0x36, 0xa4, 0xdc, 0x93, 0x27, 0xcb, 0x45, 0xc6,
	0x7d, 0xad, 0x23, 0x41, 0x82, 0xde, 0x28, 0xc0, 0xd6, 0x8d, 0x00, 0x2f, 0xf5, 0xfb, 0x38, 0x18,
	0x86, 0x58, 0x21, 0x3f, 0xbf, 0x3e, 0x26, 0x09, 0xf9, 0x03, 0xf6, 0x52, 0x96, 0x20, 0x86, 0x7b,
	0xe7, 0x12, 0xba, 0xf9, 0x57, 0x0d, 0xe4, 0xf7, 0x30, 0xee, 0xa0, 0x13, 0x9c, 0x40, 0x0b, 0x2c,
	0x05, 0x38, 0x65, 0x24, 0x12, 0x3e, 0x1b, 0x9a, 0xa5, 0x6d, 0x15, 0xdc, 0xd9, 0x2d, 0xb8, 0x07,
	0x16, 0xd1, 0x80, 0x0e, 0x23, 0x66, 0xdc, 0xe3, 0xc2, 0xdd, 0xea, 0xdb, 0xef, 0x2b, 0x73, 0xff,
	0xfa, 0xbe, 0xf2, 0x93, 0x1e, 0x61, 0xfd, 0x61, 0xb7, 0xea, 0xd3, 0x81, 0xf2, 0x4a, 0xfd, 0x6c,
	0xa7, 0xc1, 0x49, 0x8d, 0x9d, 0xc7, 0x38, 0xad, 0x36, 0xb0, 0xef, 0x2a, 0x6d, 0xf8, 0x73, 0x90,
	0xe3, 0x9b, 0xc6, 0xbc, 0xa5, 0x6d, 0x3d, 0xd8, 0xd9, 0xac, 0x5e, 0x97, 0xa3, 0x6a, 0x66, 0x57,
	0xe7, 0x3c, 0xc6, 0xae, 0xc0, 0x6f, 0xfe, 0x5d, 0x07, 0xb9, 0x16, 0xa5, 0x21, 0xfc, 0x04, 0xdc,
	0xe7, 0x39, 0xf6, 0x48, 0x20, 0xcc, 0xcc, 0xb9, 0x8b, 0x7c, 0xd9, 0x0c, 0xe0, 0x1a, 0x58, 0x08,
	0x70, 0x44, 0x07, 0xd2, 0x40, 0x57, 0x2e, 0xe0, 0x63, 0x50, 0xe4, 0x1e, 0x9c, 0x62, 0x4f, 0x0a,
	0xe7, 0xa5, 0x6b, 0x72, 0xaf, 0x21, 0x20, 0x1b, 0x20, 0xef, 0xf7, 0x11, 0x89, 0x38, 0x65, 0x4e,
	0x88, 0xef, 0x8b, 0x75, 0x33, 0x80, 0x4f, 0x40, 0xc9, 0xa7, 0x51, 0x84, 0x7d, 0x1e, 0x03, 0x2e,
	0x5f, 0x10, 0xf2, 0xe2, 0x74, 0xb3, 0x19, 0xc0, 0x2a, 0x58, 0x65, 0x09, 0x8a, 0xd2, 0x63, 0x9c,
	0x78, 0x7e, 0x1f, 0x45, 0x11, 0x16, 0xd6, 0x2d, 0x0a, 0xe8, 0x4a, 0x26, 0xaa, 0x4b, 0x49, 0x33,
	0x80, 0xdb, 0x60, 0x95, 0xf8, 0xc8, 0x0b, 0x70, 0x4c, 0x53, 0xc2, 0xbc, 0x98, 0x26, 0x8c, 0xe3,
	0xef, 0x0b, 0xbc, 0x4e, 0x7c, 0xd4, 0x90, 0x92, 0x16, 0x4d, 0x58, 0x33, 0x80, 0xcf, 0xc0, 0x43,
	0x0e, 0x17, 0x49, 0x14, 0x9e, 0x67, 0x0a, 0x79, 0xa1, 0x00, 0x89, 0x8f, 0x5a, 0x99, 0x4c, 0xa9,
	0xfc, 0x02, 0x14, 0x04, 0x52, 0x44, 0xba, 0x20, 0x22, 0x5d, 0xbe, 0x3e, 0xd2, 0x3c, 0xa4, 0x22,
	0xca, 0xf9, 0x58, 0x7d, 0xc1, 0x26, 0x00, 0xa7, 0x28, 0x24, 0x01, 0x62, 0x34, 0x49, 0x0d, 0x60,
	0xcd, 0x6f, 0x2d, 0xed, 0x3c, 0xb9, 0x59, 0xfb, 0xeb, 0x0c, 0xbb, 0x9b, 0xe3, 0x25, 0xe1, 0xce,
	0x28, 0xc3, 0xe7, 0x60, 0xbd, 0x8b, 0xfd, 0xfe, 0xf3, 0x1d, 0x2f, 0x4e, 0xf0, 0x31, 0x39, 0xf3,
	0x90, 0xef, 0x7b, 0x28, 0x08, 0x12, 0x63, 0x49, 0xd8, 0xbe, 0x2a, 0xa5, 0x2d, 0x21, 0xb4, 0x7d,
	0xdf, 0x0e, 0x82, 0xe4, 0xaa, 0xd2, 0x29, 0x0a, 0xa5, 0x52, 0xf1, 0xaa, 0xd2, 0xd7, 0x28, 0x14,
	0x4a, 0xbf, 0x05, 0x70, 0x40, 0xa2, 0x49, 0x4c, 0x55, 0xa9, 0x96, 0x3e, 0xba, 0x54, 0x9b, 0x11,
	0x73, 0xf5, 0x01, 0x89, 0x54, 0x0a, 0x6c, 0x59, 0xb4, 0x07, 0xa0, 0x74, 0xa1, 0xdb, 0x8c, 0x07,
	0x96, 0xb6, 0xb5, 0x74, 0x53, 0xf5, 0x36, 0x12, 0xf4, 0xa6, 0xad, 0x90, 0x2a, 0x28, 0xc5, 0x60,
	0x66, 0x0f, 0xb6, 0xc0, 0x83, 0x8b, 0x2d, 0x69, 0x2c, 0x0b, 0xbe, 0x9b, 0xa2, 0xcc, 0xb1, 0x6d,
	0x05, 0x55, 0x84, 0xa5, 0x78, 0x76, 0x13, 0xba, 0x00, 0x0e, 0xa3, 0x2e, 0x8d, 0x02, 0x12, 0xf5,
	0xbc, 0x6c, 0x74, 0x19, 0xba, 0x60, 0xdd, 0xa8, 0xca, 0xd9, 0x55, 0xcd, 0x66, 0x57, 0xb5, 0xa1,
	0x00, 0xbb, 0x79, 0xce, 0xf5, 0xa7, 0x7f, 0x57, 0x34, 0x77, 0x65, 0xa2, 0x9e, 0x09, 0x61, 0x17,
	0x3c, 0x1c, 0xa0, 0x33, 0x6f, 0xca, 0x8b, 0x23, 0x96, 0x10, 0x9c, 0x1a, 0x2b, 0x77, 0x8a, 0xea,
	0xea, 0x00, 0x9d, 0x1d, 0x65, 0x5c, 0x8e, 0xa4, 0x82, 0xbf, 0x04, 0xa5, 0x90, 0xfa, 0x2a, 0xbf,
	0x38, 0x4d, 0x0d, 0x28, 0xb8, 0x8d, 0x7f, 0xfc, 0x6d, 0x7b, 0x4d, 0xcd, 0x48, 0x5b, 0x4a, 0xda,
	0x2c, 0x21, 0x51, 0xcf, 0x2d, 0x0a, 0xb8, 0xda, 0x83, 0x2f, 0x2f, 0x76, 0x52, 0x46, 0xb2, 0x7a,
	0x0b, 0xc9, 0xca, 0xb4, 0xc7, 0x32, 0xa6, 0xfd, 0xcb, 0x4d, 0x96, 0x71, 0xad, 0xdd, 0xc2, 0xb5,
	0x3a, 0xdb, 0x7e, 0x19, 0x9b, 0x05, 0x8a, 0x11, 0x3e, 0x63, 0x9e, 0x28, 0x1a, 0x12, 0x18, 0xeb,
	0x62, 0x50, 0x01, 0xbe, 0xc7, 0x8b, 0xa3, 0x19, 0xc0, 0x03, 0x00, 0xd8, 0x69, 0x98, 0xd5, 0xe9,
	0x27, 0x77, 0x8a, 0x68, 0x81, 0x9d, 0x86, 0xaa, 0x40, 0x3f, 0x07, 0xba, 0x0a, 0x02, 0x4d, 0x52,
	0xcf, 0x17, 0xa4, 0x86, 0x38, 0x74, 0x79, 0xba, 0x5f, 0x17, 0xd0, 0xdf, 0x01, 0x98, 0xc6, 0x34,
	0x4a, 0x69, 0x92, 0xf6, 0x49, 0x9c, 0x59, 0xb0, 0x71, 0x27, 0x0b, 0x56, 0x66, 0x98, 0x94, 0x25,
	0x47, 0x60, 0x2d, 0x44, 0xa9, 0x72, 0xdd, 0x4f, 0x30, 0x62, 0x38, 0xf0, 0x10, 0x33, 0x3e, 0x15,
	0xb5, 0x68, 0x5e, 0xa9, 0xc5, 0x4e, 0x76, 0x8f, 0x8a, 0x62, 0xd4, 0xbe, 0x15, 0xc5, 0xc8, 0x19,
	0x78, 0xa0, 0xea, 0x52, 0xdf, 0x66, 0xf0, 0x05, 0x58, 0x9e, 0xd2, 0xa6, 0x0c, 0x31, 0x6c, 0xfc,
	0x48, 0xcc, 0xb5, 0xca, 0x07, 0x7a, 0x90, 0xc3, 0xdc, 0x52, 0x46, 0x26, 0x96, 0xf0, 0xd7, 0x60,
	0x0d, 0x9d, 0x22, 0x12, 0xa2, 0x6e, 0x88, 0x65, 0xba, 0x3d, 0x9e, 0x39, 0xe3, 0x91, 0xea, 0x15,
	0x95, 0x64, 0x7e, 0x8d, 0x57, 0xd5, 0x35, 0x5e, 0xad, 0x53, 0x12, 0xa9, 0xbe, 0x83, 0x13, 0x65,
	0x91, 0x74, 0x71, 0x23, 0xd5, 0x01, 0x38, 0xc6, 0xd8, 0x63, 0xfc, 0xc6, 0x4a, 0x8d, 0xb2, 0x18,
	0x98, 0xe5, 0x0f, 0x5f, 0x6c, 0x8a, 0xad, 0x70, 0xac, 0xd6, 0xbc, 0x94, 0x8b, 0x7e, 0x48, 0x53,
	0xde, 0x67, 0x29, 0xc3, 0xb1, 0x51, 0x11, 0xde, 0xfd, 0xf8, 0xe6, 0xb9, 0x5b, 0x97, 0xe8, 0x36,
	0xc3, 0xb1, 0xbb, 0xe4, 0x4f, 0x17, 0xf0, 0x67, 0x60, 0x41, 0x06, 0xc8, 0xfa, 0x50, 0x80, 0x38,
	0x85, 0x0c, 0x90, 0x44, 0xc3, 0xa7, 0x60, 0x65, 0x9a, 0x2e, 0xaf, 0x8f, 0x49, 0xaf, 0xcf, 0x8c,
	0xc7, 0x96, 0xb6, 0x35, 0xef, 0x2e, 0xfb, 0x59, 0x1e, 0x5e, 0x8a, 0x6d, 0x8e, 0x1d, 0xc6, 0xc1,
	0x25, 0xec, 0xa6, 0xc4, 0x2a, 0xc1, 0x04, 0x5b, 0x07, 0x60, 0xa6, 0x0c, 0x9e, 0xfc, 0xa0, 0x32,
	0x98, 0x13, 0x65, 0x50, 0x98, 0x1c, 0xcb, 0x49, 0xa6, 0x07, 0x1a, 0x9f, 0x7d, 0x0c, 0xc9, 0xc4,
	0x9e, 0x2f, 0x73, 0xf9, 0x87, 0xfa, 0xfa, 0x97, 0xb9, 0xbc, 0xa9, 0x7f, 0xba, 0xf9, 0x56, 0x03,
	0xa5, 0x0b, 0xb7, 0x17, 0xac, 0x03, 0x9d, 0xc6, 0x38, 0xe1, 0xdf, 0x93, 0xe6, 0xd7, 0x6e, 0x69,
	0xfe, 0xe5, 0x4c, 0x23, 0x6b, 0xfc, 0x47, 0x00, 0x90, 0xd4, 0xc3, 0x11, 0x2f, 0x90, 0x40, 0x3c,
	0x44, 0xf2, 0x6e, 0x81, 0xa4, 0x8e, 0xdc, 0x80, 0x6d, 0x50, 0xe2, 0x03, 0x90, 0x7b, 0x21, 0xdb,
	0x6e, 0xfe, 0x4e, 0x6d, 0x57, 0x94, 0x24, 0xb2, 0xe3, 0x9e, 0xfe, 0x4f, 0x03, 0x85, 0x49, 0x36,
	0xe1, 0x4f, 0xc1, 0x7a, 0xeb, 0xf0, 0x70, 0xdf, 0x6b, 0x77, 0xec, 0x8e, 0xe3, 0x1d, 0xbd, 0x6a,
	0xb7, 0x9c, 0x7a, 0x73, 0xaf, 0xe9, 0x34, 0xf4, 0x39, 0x73, 0x79, 0x34, 0xb6, 0x96, 0x8e, 0xa2,
	0x34, 0xc6, 0x3e, 0x39, 0x26, 0x98, 0x3f, 0x6f, 0xe0, 0x0c, 0xb8, 0xee, 0x3a, 0x76, 0xc7, 0x69,
	0xe8, 0x9a, 0xb9, 0x34, 0x1a, 0x5b, 0xf7, 0x55, 0xf3, 0xc1, 0x0a, 0xd0, 0x67, 0x40, 0xae, 0x63,
	0x37, 0xbe, 0xd1, 0xef, 0x99, 0x85, 0xd1, 0xd8, 0x5a, 0x70, 0x31, 0x0a, 0xce, 0xe1, 0x63, 0xb0,
	0x32, 0x03, 0x68, 0xd9, 0x47, 0x6d, 0xa7, 0xa1, 0xcf, 0x9b, 0x60, 0x34, 0xb6, 0x16, 0x5b, 0x68,
	0x98, 0x5e, 0x3d, 0x68, 0xff, 0xb0, 0xdd, 0x7c, 0xf5, 0x42, 0xcf, 0xa9, 0x83, 0x64, 0xf1, 0x5e,
	0xe2, 0xe1, 0x20, 0xa7, 0xa1, 0x2f, 0x48, 0x1e, 0x8e, 0xc1, 0x81, 0x99, 0xfb, 0xe3, 0x5f, 0xca,
	0xda, 0xd3, 0x3f, 0x6b, 0x60, 0xf9, 0x52, 0x0b, 0xc0, 0x1d, 0xf0, 0x48, 0x28, 0x2b, 0x6e, 0xaf,
	0xdd, 0x71, 0x5a, 0xb7, 0xb9, 0xff, 0x05, 0x30, 0xaf, 0xea, 0xbc, 0x6e, 0x76, 0x5e, 0x36, 0x5c,
	0xfb, 0xb5, 0xae, 0x99, 0xc5, 0xd1, 0xd8, 0xca, 0xbf, 0x26, 0xac, 0xcf, 0xa7, 0x0e, 0xfc, 0x4c,
	0x45, 0xf6, 0x02, 0x5a, 0x20, 0xef, 0x99, 0xf9, 0xd1, 0xd8, 0xca, 0xf1, 0x21, 0xa3, 0x2c, 0xfc,
	0x3d, 0xc8, 0x67, 0x2f, 0x2b, 0xf8, 0x14, 0x3c, 0x14, 0x7a, 0x9d, 0x6f, 0x5a, 0xb7, 0x26, 0x64,
	0x53, 0x85, 0x40, 0x60, 0xdb, 0x1d, 0xfb, 0x2b, 0x1e, 0x26, 0x95, 0x8f, 0x36, 0x43, 0x27, 0x24,
	0xea, 0xa9, 0x13, 0xfe, 0xab, 0x81, 0xe2, 0xec, 0x33, 0x19, 0xd6, 0x80, 0xb9, 0xe7, 0x38, 0x5e,
	0xc7, 0xfe, 0xca, 0x71, 0x7f, 0xd0, 0x59, 0x5f, 0x80, 0x8d, 0x4b, 0x0a, 0xfb, 0x87, 0x75, 0x7b,
	0xdf, 0xb3, 0x1b, 0x0d, 0x57, 0xd7, 0xcc, 0xd2, 0x68, 0x6c, 0x15, 0xf6, 0xb3, 0xdb, 0x16, 0xfe,
	0x0a, 0x3c, 0xb9, 0x16, 0x7d, 0x70, 0xd8, 0x38, 0xda, 0x77, 0x3c, 0xbb, 0x5e, 0x3f, 0x3c, 0x7a,
	0xd5, 0xd1, 0xef, 0x99, 0xeb, 0xa3, 0xb1, 0x05, 0x85, 0xde, 0x01, 0xe5, 0xaf, 0x1d, 0xdb, 0x17,
	0xd7, 0x11, 0xac, 0x5e, 0xb1, 0xcf, 0x75, 0x0e, 0x0e, 0x3b, 0x8e, 0x3c, 0x6f, 0xde, 0x7c, 0x30,
	0x1a, 0x5b, 0xc0, 0xc5, 0x03, 0xca, 0x30, 0x3f, 0x50, 0xba, 0xb9, 0xfb, 0xe2, 0xed, 0xbb, 0xb2,
	0xf6, 0xdd, 0xbb, 0xb2, 0xf6, 0x9f, 0x77, 0x65, 0xed, 0xdb, 0xf7, 0xe5, 0xb9, 0xef, 0xde, 0x97,
	0xe7, 0xfe, 0xf9, 0xbe, 0x3c, 0xf7, 0x9b, 0xed, 0x99, 0x66, 0x09, 0x87, 0x83, 0xed, 0xec, 0x5f,
	0x8f, 0x78, 0xba, 0xd7, 0xce, 0xa6, 0xff, 0x7e, 0x44, 0xdf, 0x74, 0x17, 0xc5, 0x94, 0x78, 0xfe,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xab, 0x71, 0x34, 0x36, 0x0e, 0x00, 0x00,
}

func (m *FeeTaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeTaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeTaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPool(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa2
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPool(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	if m.UpdatedAtHeight != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.UpdatedAtHeight))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.CreatedAtHeight != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.CreatedAtHeight))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.State != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.ClosingStep != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.ClosingStep))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.FeeTakers) > 0 {
		for iNdEx := len(m.FeeTakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	{
		size, err := m.AvailablePrizePool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	if m.LastDrawState != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastDrawState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.LastDrawCreatedAt != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastDrawCreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastDrawCreatedAt):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintPool(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	{
		size := m.SponsorshipAmount.Size()
		i -= size
		if _, err := m.SponsorshipAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	if m.DepositorsCount != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.DepositorsCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	{
		size := m.TvlAmount.Size()
		i -= size
		if _, err := m.TvlAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	if m.NextDrawId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.NextDrawId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.IcaPrizepoolAddress) > 0 {
		i -= len(m.IcaPrizepoolAddress)
		copy(dAtA[i:], m.IcaPrizepoolAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.IcaPrizepoolAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.IcaDepositAddress) > 0 {
		i -= len(m.IcaDepositAddress)
		copy(dAtA[i:], m.IcaDepositAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.IcaDepositAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.LocalAddress) > 0 {
		i -= len(m.LocalAddress)
		copy(dAtA[i:], m.LocalAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.LocalAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	{
		size := m.MaxUnbondingEntries.Size()
		i -= size
		if _, err := m.MaxUnbondingEntries.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingDuration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintPool(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.PrizeStrategy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.DrawSchedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.MinDepositAmount.Size()
		i -= size
		if _, err := m.MinDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.Bech32PrefixValAddr) > 0 {
		i -= len(m.Bech32PrefixValAddr)
		copy(dAtA[i:], m.Bech32PrefixValAddr)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Bech32PrefixValAddr)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Bech32PrefixAccAddr) > 0 {
		i -= len(m.Bech32PrefixAccAddr)
		copy(dAtA[i:], m.Bech32PrefixAccAddr)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Bech32PrefixAccAddr)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.PoolType != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.IcaPrizepoolPortId) > 0 {
		i -= len(m.IcaPrizepoolPortId)
		copy(dAtA[i:], m.IcaPrizepoolPortId)
		i = encodeVarintPool(dAtA, i, uint64(len(m.IcaPrizepoolPortId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IcaDepositPortId) > 0 {
		i -= len(m.IcaDepositPortId)
		copy(dAtA[i:], m.IcaDepositPortId)
		i = encodeVarintPool(dAtA, i, uint64(len(m.IcaDepositPortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintPool(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintPool(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintPool(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NativeDenom) > 0 {
		i -= len(m.NativeDenom)
		copy(dAtA[i:], m.NativeDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.NativeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BondedAmount.Size()
		i -= size
		if _, err := m.BondedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeTaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPool(uint64(l))
	if m.Type != 0 {
		n += 1 + sovPool(uint64(m.Type))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.NativeDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.IcaDepositPortId)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.IcaPrizepoolPortId)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.PoolType != 0 {
		n += 1 + sovPool(uint64(m.PoolType))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovPool(uint64(l))
		}
	}
	l = len(m.Bech32PrefixAccAddr)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Bech32PrefixValAddr)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.MinDepositAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.DrawSchedule.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.PrizeStrategy.Size()
	n += 1 + l + sovPool(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingDuration)
	n += 2 + l + sovPool(uint64(l))
	l = m.MaxUnbondingEntries.Size()
	n += 2 + l + sovPool(uint64(l))
	l = len(m.LocalAddress)
	if l > 0 {
		n += 2 + l + sovPool(uint64(l))
	}
	l = len(m.IcaDepositAddress)
	if l > 0 {
		n += 2 + l + sovPool(uint64(l))
	}
	l = len(m.IcaPrizepoolAddress)
	if l > 0 {
		n += 2 + l + sovPool(uint64(l))
	}
	if m.NextDrawId != 0 {
		n += 2 + sovPool(uint64(m.NextDrawId))
	}
	l = m.TvlAmount.Size()
	n += 2 + l + sovPool(uint64(l))
	if m.DepositorsCount != 0 {
		n += 2 + sovPool(uint64(m.DepositorsCount))
	}
	l = m.SponsorshipAmount.Size()
	n += 2 + l + sovPool(uint64(l))
	if m.LastDrawCreatedAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastDrawCreatedAt)
		n += 2 + l + sovPool(uint64(l))
	}
	if m.LastDrawState != 0 {
		n += 2 + sovPool(uint64(m.LastDrawState))
	}
	l = m.AvailablePrizePool.Size()
	n += 2 + l + sovPool(uint64(l))
	if len(m.FeeTakers) > 0 {
		for _, e := range m.FeeTakers {
			l = e.Size()
			n += 2 + l + sovPool(uint64(l))
		}
	}
	if m.ClosingStep != 0 {
		n += 2 + sovPool(uint64(m.ClosingStep))
	}
	if m.State != 0 {
		n += 2 + sovPool(uint64(m.State))
	}
	if m.CreatedAtHeight != 0 {
		n += 2 + sovPool(uint64(m.CreatedAtHeight))
	}
	if m.UpdatedAtHeight != 0 {
		n += 2 + sovPool(uint64(m.UpdatedAtHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 2 + l + sovPool(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt)
	n += 2 + l + sovPool(uint64(l))
	return n
}

func (m *PoolValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.IsEnabled {
		n += 2
	}
	l = m.BondedAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeTaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeTaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeTaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FeeTakerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaDepositPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaDepositPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaPrizepoolPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaPrizepoolPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolType", wireType)
			}
			m.PoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolType |= PoolType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, PoolValidator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32PrefixAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32PrefixAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32PrefixValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32PrefixValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DrawSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrizeStrategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnbondingEntries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxUnbondingEntries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaDepositAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaDepositAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaPrizepoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcaPrizepoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDrawId", wireType)
			}
			m.NextDrawId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDrawId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvlAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TvlAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorsCount", wireType)
			}
			m.DepositorsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositorsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SponsorshipAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SponsorshipAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDrawCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDrawCreatedAt == nil {
				m.LastDrawCreatedAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastDrawCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDrawState", wireType)
			}
			m.LastDrawState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDrawState |= DrawState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailablePrizePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailablePrizePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTakers = append(m.FeeTakers, FeeTaker{})
			if err := m.FeeTakers[len(m.FeeTakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingStep", wireType)
			}
			m.ClosingStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosingStep |= PoolClosingStep(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PoolState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtHeight", wireType)
			}
			m.CreatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtHeight", wireType)
			}
			m.UpdatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
