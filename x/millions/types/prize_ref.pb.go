// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumnetwork/millions/prize_ref.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrizeRef struct {
	Amount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	PrizeId       uint64                                 `protobuf:"varint,2,opt,name=prize_id,json=prizeId,proto3" json:"prize_id,omitempty"`
	WinnerAddress string                                 `protobuf:"bytes,3,opt,name=winner_address,json=winnerAddress,proto3" json:"winner_address,omitempty"`
}

func (m *PrizeRef) Reset()         { *m = PrizeRef{} }
func (m *PrizeRef) String() string { return proto.CompactTextString(m) }
func (*PrizeRef) ProtoMessage()    {}
func (*PrizeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e29149e9a79f481, []int{0}
}
func (m *PrizeRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrizeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrizeRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrizeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrizeRef.Merge(m, src)
}
func (m *PrizeRef) XXX_Size() int {
	return m.Size()
}
func (m *PrizeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PrizeRef.DiscardUnknown(m)
}

var xxx_messageInfo_PrizeRef proto.InternalMessageInfo

func (m *PrizeRef) GetPrizeId() uint64 {
	if m != nil {
		return m.PrizeId
	}
	return 0
}

func (m *PrizeRef) GetWinnerAddress() string {
	if m != nil {
		return m.WinnerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*PrizeRef)(nil), "lumnetwork.millions.PrizeRef")
}

func init() {
	proto.RegisterFile("lumnetwork/millions/prize_ref.proto", fileDescriptor_8e29149e9a79f481)
}

var fileDescriptor_8e29149e9a79f481 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0x29, 0xcd, 0xcd,
	0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0xcf, 0xcd, 0xcc, 0xc9, 0xc9, 0xcc, 0xcf, 0x2b, 0xd6,
	0x2f, 0x28, 0xca, 0xac, 0x4a, 0x8d, 0x2f, 0x4a, 0x4d, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x46, 0x28, 0xd2, 0x83, 0x29, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xcb, 0xeb, 0x83,
	0x58, 0x10, 0xa5, 0x52, 0x92, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0xf1, 0x10, 0x09, 0x08, 0x07,
	0x22, 0xa5, 0xb4, 0x83, 0x91, 0x8b, 0x23, 0x00, 0x64, 0x72, 0x50, 0x6a, 0x9a, 0x90, 0x1b, 0x17,
	0x5b, 0x62, 0x6e, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x93, 0xde, 0x89,
	0x7b, 0xf2, 0x0c, 0xb7, 0xee, 0xc9, 0xab, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7,
	0xe7, 0x42, 0x75, 0x43, 0x29, 0xdd, 0xe2, 0x94, 0x6c, 0xfd, 0x92, 0xca, 0x82, 0xd4, 0x62, 0x3d,
	0xcf, 0xbc, 0x92, 0x20, 0xa8, 0x6e, 0x21, 0x79, 0x2e, 0x0e, 0x88, 0x6b, 0x33, 0x53, 0x24, 0x98,
	0x14, 0x18, 0x35, 0x58, 0x9c, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x0c, 0x62, 0x07, 0x8b, 0x7a, 0xa6,
	0x08, 0x39, 0x73, 0xf1, 0x95, 0x67, 0xe6, 0xe5, 0xa5, 0x16, 0xc5, 0x27, 0xa6, 0xa4, 0x14, 0xa5,
	0x16, 0x17, 0x4b, 0x30, 0x83, 0x2d, 0x94, 0x01, 0x29, 0xbb, 0xb4, 0x45, 0x57, 0x04, 0xea, 0x46,
	0x47, 0x88, 0x6c, 0x70, 0x49, 0x51, 0x66, 0x5e, 0x7a, 0x10, 0x2f, 0x44, 0x0f, 0x54, 0xd0, 0xc9,
	0xfd, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58,
	0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x74, 0x91, 0xdc, 0x9b, 0x53,
	0x9a, 0xab, 0x0b, 0x0b, 0xcb, 0xe4, 0x8c, 0xc4, 0xcc, 0x3c, 0xfd, 0x0a, 0x44, 0x98, 0x82, 0x9d,
	0x9e, 0xc4, 0x06, 0x0e, 0x0a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xed, 0x90, 0xd7,
	0x77, 0x01, 0x00, 0x00,
}

func (m *PrizeRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrizeRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrizeRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WinnerAddress) > 0 {
		i -= len(m.WinnerAddress)
		copy(dAtA[i:], m.WinnerAddress)
		i = encodeVarintPrizeRef(dAtA, i, uint64(len(m.WinnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PrizeId != 0 {
		i = encodeVarintPrizeRef(dAtA, i, uint64(m.PrizeId))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPrizeRef(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPrizeRef(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrizeRef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrizeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovPrizeRef(uint64(l))
	if m.PrizeId != 0 {
		n += 1 + sovPrizeRef(uint64(m.PrizeId))
	}
	l = len(m.WinnerAddress)
	if l > 0 {
		n += 1 + l + sovPrizeRef(uint64(l))
	}
	return n
}

func sovPrizeRef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrizeRef(x uint64) (n int) {
	return sovPrizeRef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrizeRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrizeRef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrizeRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrizeRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrizeRef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrizeRef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrizeRef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeId", wireType)
			}
			m.PrizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrizeRef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrizeRef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrizeRef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrizeRef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrizeRef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrizeRef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrizeRef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrizeRef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrizeRef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrizeRef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrizeRef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrizeRef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrizeRef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrizeRef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrizeRef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrizeRef = fmt.Errorf("proto: unexpected end of group")
)
