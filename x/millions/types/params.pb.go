// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/millions/params.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// min_deposit_amount the minimum deposit amount accepted by pool
	// configurations
	MinDepositAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=min_deposit_amount,json=minDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_deposit_amount"`
	// max_prize_strategy_batches the maximum prize strategy batches accepted by
	// pool configurations
	MaxPrizeStrategyBatches uint64 `protobuf:"varint,2,opt,name=max_prize_strategy_batches,json=maxPrizeStrategyBatches,proto3" json:"max_prize_strategy_batches,omitempty"`
	// max_prize_batch_quantity the maximum prize batch quantity accepted by pool
	// configurations
	MaxPrizeBatchQuantity uint64 `protobuf:"varint,3,opt,name=max_prize_batch_quantity,json=maxPrizeBatchQuantity,proto3" json:"max_prize_batch_quantity,omitempty"`
	// min_draw_schedule_delta the minimum delta between draws accepted by pool
	// configurations
	MinDrawScheduleDelta time.Duration `protobuf:"bytes,4,opt,name=min_draw_schedule_delta,json=minDrawScheduleDelta,proto3,stdduration" json:"min_draw_schedule_delta"`
	// max_draw_schedule_delta the maximum delta between draws accepted by pool
	// configurations
	MaxDrawScheduleDelta time.Duration `protobuf:"bytes,5,opt,name=max_draw_schedule_delta,json=maxDrawScheduleDelta,proto3,stdduration" json:"max_draw_schedule_delta"`
	// prize_expiration_delta the prize clawback expiration delta (common to all
	// pools)
	PrizeExpirationDelta time.Duration `protobuf:"bytes,6,opt,name=prize_expiration_delta,json=prizeExpirationDelta,proto3,stdduration" json:"prize_expiration_delta"`
	// min_deposit_draw_delta the minimum delta before a draw for a deposit to be
	// accepted during the time weighted balance computation for a draw
	MinDepositDrawDelta time.Duration `protobuf:"bytes,8,opt,name=min_deposit_draw_delta,json=minDepositDrawDelta,proto3,stdduration" json:"min_deposit_draw_delta"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f37cb471281f845, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxPrizeStrategyBatches() uint64 {
	if m != nil {
		return m.MaxPrizeStrategyBatches
	}
	return 0
}

func (m *Params) GetMaxPrizeBatchQuantity() uint64 {
	if m != nil {
		return m.MaxPrizeBatchQuantity
	}
	return 0
}

func (m *Params) GetMinDrawScheduleDelta() time.Duration {
	if m != nil {
		return m.MinDrawScheduleDelta
	}
	return 0
}

func (m *Params) GetMaxDrawScheduleDelta() time.Duration {
	if m != nil {
		return m.MaxDrawScheduleDelta
	}
	return 0
}

func (m *Params) GetPrizeExpirationDelta() time.Duration {
	if m != nil {
		return m.PrizeExpirationDelta
	}
	return 0
}

func (m *Params) GetMinDepositDrawDelta() time.Duration {
	if m != nil {
		return m.MinDepositDrawDelta
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "lum.network.millions.Params")
}

func init() { proto.RegisterFile("lum/network/millions/params.proto", fileDescriptor_1f37cb471281f845) }

var fileDescriptor_1f37cb471281f845 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3d, 0x6f, 0xd3, 0x40,
	0x1c, 0xc6, 0x63, 0x08, 0x21, 0x1c, 0x4b, 0x65, 0x42, 0x6b, 0x32, 0x38, 0x81, 0x01, 0x65, 0xc9,
	0x9d, 0x04, 0x03, 0x03, 0x13, 0x51, 0x10, 0x82, 0xa9, 0xa4, 0x0b, 0x54, 0x48, 0xa7, 0x8b, 0x7d,
	0x38, 0xa7, 0xde, 0x8b, 0xb9, 0x17, 0xc5, 0xe1, 0x53, 0x30, 0xf2, 0x91, 0xba, 0xd1, 0x11, 0x31,
	0x14, 0x94, 0x7c, 0x11, 0xe4, 0x3b, 0x9b, 0x54, 0x82, 0x81, 0x4e, 0xf6, 0xe9, 0xff, 0x3c, 0x3f,
	0xfd, 0x5f, 0x1e, 0xf0, 0x90, 0x3b, 0x81, 0x24, 0xb5, 0x6b, 0xa5, 0xcf, 0x90, 0x60, 0x9c, 0x33,
	0x25, 0x0d, 0x2a, 0x89, 0x26, 0xc2, 0xc0, 0x52, 0x2b, 0xab, 0xe2, 0x01, 0x77, 0x02, 0x36, 0x12,
	0xd8, 0x4a, 0x86, 0x83, 0x42, 0x15, 0xca, 0x0b, 0x50, 0xfd, 0x17, 0xb4, 0xc3, 0xb4, 0x50, 0xaa,
	0xe0, 0x14, 0xf9, 0xd7, 0xd2, 0x7d, 0x44, 0xb9, 0xd3, 0xc4, 0x32, 0x25, 0x43, 0xfd, 0xd1, 0xb7,
	0x2e, 0xe8, 0x1d, 0x7b, 0x78, 0xfc, 0x01, 0xc4, 0x82, 0x49, 0x9c, 0xd3, 0x52, 0x19, 0x66, 0x31,
	0x11, 0xca, 0x49, 0x9b, 0x44, 0xe3, 0x68, 0x72, 0x67, 0x06, 0xcf, 0x2f, 0x47, 0x9d, 0x1f, 0x97,
	0xa3, 0xc7, 0x05, 0xb3, 0x2b, 0xb7, 0x84, 0x99, 0x12, 0x28, 0x53, 0x46, 0x28, 0xd3, 0x7c, 0xa6,
	0x26, 0x3f, 0x43, 0x76, 0x53, 0x52, 0x03, 0x5f, 0x4b, 0xbb, 0x38, 0x10, 0x4c, 0xce, 0x03, 0xe8,
	0x85, 0xe7, 0xc4, 0xcf, 0xc1, 0x50, 0x90, 0x0a, 0x97, 0x9a, 0x7d, 0xa6, 0xd8, 0x58, 0x4d, 0x2c,
	0x2d, 0x36, 0x78, 0x49, 0x6c, 0xb6, 0xa2, 0x26, 0xb9, 0x31, 0x8e, 0x26, 0xdd, 0xc5, 0x91, 0x20,
	0xd5, 0x71, 0x2d, 0x38, 0x69, 0xea, 0xb3, 0x50, 0x8e, 0x9f, 0x81, 0x64, 0x6f, 0xf6, 0x1e, 0xfc,
	0xc9, 0x11, 0x69, 0x99, 0xdd, 0x24, 0x37, 0xbd, 0xf5, 0x7e, 0x6b, 0xf5, 0x96, 0xb7, 0x4d, 0x31,
	0x3e, 0x05, 0x47, 0x7e, 0x26, 0x4d, 0xd6, 0xd8, 0x64, 0x2b, 0x9a, 0x3b, 0x4e, 0x71, 0x4e, 0xb9,
	0x25, 0x49, 0x77, 0x1c, 0x4d, 0xee, 0x3e, 0x79, 0x00, 0xc3, 0x82, 0x60, 0xbb, 0x20, 0x38, 0x6f,
	0x16, 0x34, 0xeb, 0xd7, 0x33, 0x7f, 0xfd, 0x39, 0x8a, 0x16, 0x83, 0x7a, 0x1a, 0x4d, 0xd6, 0x27,
	0x0d, 0x61, 0x5e, 0x03, 0x3c, 0x9b, 0x54, 0xff, 0x64, 0xdf, 0xba, 0x0e, 0x9b, 0x54, 0x7f, 0xb3,
	0xdf, 0x83, 0xc3, 0x30, 0x2c, 0xad, 0x4a, 0x16, 0x3c, 0x0d, 0xba, 0x77, 0x0d, 0xb4, 0x47, 0xbc,
	0xfc, 0x43, 0x08, 0xe8, 0x77, 0xe0, 0xf0, 0xea, 0x99, 0x7d, 0xfb, 0x01, 0xdd, 0xff, 0x7f, 0xf4,
	0xbd, 0xfd, 0x7d, 0xeb, 0xe6, 0x3d, 0xf9, 0x4d, 0xb7, 0x7f, 0xfb, 0xa0, 0x3f, 0x7b, 0x75, 0xbe,
	0x4d, 0xa3, 0x8b, 0x6d, 0x1a, 0xfd, 0xda, 0xa6, 0xd1, 0x97, 0x5d, 0xda, 0xb9, 0xd8, 0xa5, 0x9d,
	0xef, 0xbb, 0xb4, 0x73, 0x3a, 0xbd, 0x12, 0x1e, 0xee, 0xc4, 0xb4, 0x4d, 0x79, 0xb6, 0x22, 0x4c,
	0xa2, 0x6a, 0x9f, 0x76, 0x9f, 0xa3, 0x65, 0xcf, 0x37, 0xf0, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf6, 0x46, 0xb0, 0x29, 0x12, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MinDepositDrawDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinDepositDrawDelta):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.PrizeExpirationDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PrizeExpirationDelta):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MaxDrawScheduleDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxDrawScheduleDelta):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintParams(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MinDrawScheduleDelta, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinDrawScheduleDelta):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintParams(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if m.MaxPrizeBatchQuantity != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxPrizeBatchQuantity))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPrizeStrategyBatches != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxPrizeStrategyBatches))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.MinDepositAmount.Size()
		i -= size
		if _, err := m.MinDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinDepositAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxPrizeStrategyBatches != 0 {
		n += 1 + sovParams(uint64(m.MaxPrizeStrategyBatches))
	}
	if m.MaxPrizeBatchQuantity != 0 {
		n += 1 + sovParams(uint64(m.MaxPrizeBatchQuantity))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinDrawScheduleDelta)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxDrawScheduleDelta)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.PrizeExpirationDelta)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinDepositDrawDelta)
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrizeStrategyBatches", wireType)
			}
			m.MaxPrizeStrategyBatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPrizeStrategyBatches |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrizeBatchQuantity", wireType)
			}
			m.MaxPrizeBatchQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPrizeBatchQuantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDrawScheduleDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MinDrawScheduleDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDrawScheduleDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MaxDrawScheduleDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeExpirationDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.PrizeExpirationDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositDrawDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MinDepositDrawDelta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
