// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumnetwork/dfract/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DepositsQueryType int32

const (
	DepositsQueryType_TypePendingWithdrawal DepositsQueryType = 0
	DepositsQueryType_TypePendingMint       DepositsQueryType = 1
	DepositsQueryType_TypeMinted            DepositsQueryType = 2
)

var DepositsQueryType_name = map[int32]string{
	0: "PENDING_WITHDRAWAL",
	1: "PENDING_MINT",
	2: "MINTED",
}

var DepositsQueryType_value = map[string]int32{
	"PENDING_WITHDRAWAL": 0,
	"PENDING_MINT":       1,
	"MINTED":             2,
}

func (x DepositsQueryType) String() string {
	return proto.EnumName(DepositsQueryType_name, int32(x))
}

func (DepositsQueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{0}
}

type QueryModuleAccountBalanceRequest struct {
}

func (m *QueryModuleAccountBalanceRequest) Reset()         { *m = QueryModuleAccountBalanceRequest{} }
func (m *QueryModuleAccountBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleAccountBalanceRequest) ProtoMessage()    {}
func (*QueryModuleAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{0}
}
func (m *QueryModuleAccountBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleAccountBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleAccountBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleAccountBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleAccountBalanceRequest.Merge(m, src)
}
func (m *QueryModuleAccountBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleAccountBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleAccountBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleAccountBalanceRequest proto.InternalMessageInfo

type QueryModuleAccountBalanceResponse struct {
	ModuleAccountBalance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=module_account_balance,json=moduleAccountBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"module_account_balance" yaml:"coins"`
}

func (m *QueryModuleAccountBalanceResponse) Reset()         { *m = QueryModuleAccountBalanceResponse{} }
func (m *QueryModuleAccountBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleAccountBalanceResponse) ProtoMessage()    {}
func (*QueryModuleAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{1}
}
func (m *QueryModuleAccountBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleAccountBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleAccountBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleAccountBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleAccountBalanceResponse.Merge(m, src)
}
func (m *QueryModuleAccountBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleAccountBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleAccountBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleAccountBalanceResponse proto.InternalMessageInfo

func (m *QueryModuleAccountBalanceResponse) GetModuleAccountBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ModuleAccountBalance
	}
	return nil
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetDepositsForAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetDepositsForAddressRequest) Reset()         { *m = QueryGetDepositsForAddressRequest{} }
func (m *QueryGetDepositsForAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositsForAddressRequest) ProtoMessage()    {}
func (*QueryGetDepositsForAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{4}
}
func (m *QueryGetDepositsForAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositsForAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositsForAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositsForAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositsForAddressRequest.Merge(m, src)
}
func (m *QueryGetDepositsForAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositsForAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositsForAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositsForAddressRequest proto.InternalMessageInfo

func (m *QueryGetDepositsForAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryFetchDepositsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Type       DepositsQueryType  `protobuf:"varint,2,opt,name=type,proto3,enum=lumnetwork.dfract.DepositsQueryType" json:"type,omitempty"`
}

func (m *QueryFetchDepositsRequest) Reset()         { *m = QueryFetchDepositsRequest{} }
func (m *QueryFetchDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFetchDepositsRequest) ProtoMessage()    {}
func (*QueryFetchDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{5}
}
func (m *QueryFetchDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchDepositsRequest.Merge(m, src)
}
func (m *QueryFetchDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchDepositsRequest proto.InternalMessageInfo

func (m *QueryFetchDepositsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryFetchDepositsRequest) GetType() DepositsQueryType {
	if m != nil {
		return m.Type
	}
	return DepositsQueryType_TypePendingWithdrawal
}

type QueryGetDepositsForAddressResponse struct {
	DepositsPendingWithdrawal *Deposit `protobuf:"bytes,1,opt,name=deposits_pending_withdrawal,json=depositsPendingWithdrawal,proto3" json:"deposits_pending_withdrawal,omitempty"`
	DepositsPendingMint       *Deposit `protobuf:"bytes,2,opt,name=deposits_pending_mint,json=depositsPendingMint,proto3" json:"deposits_pending_mint,omitempty"`
	DepositsMinted            *Deposit `protobuf:"bytes,3,opt,name=deposits_minted,json=depositsMinted,proto3" json:"deposits_minted,omitempty"`
}

func (m *QueryGetDepositsForAddressResponse) Reset()         { *m = QueryGetDepositsForAddressResponse{} }
func (m *QueryGetDepositsForAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositsForAddressResponse) ProtoMessage()    {}
func (*QueryGetDepositsForAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{6}
}
func (m *QueryGetDepositsForAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositsForAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositsForAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositsForAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositsForAddressResponse.Merge(m, src)
}
func (m *QueryGetDepositsForAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositsForAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositsForAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositsForAddressResponse proto.InternalMessageInfo

func (m *QueryGetDepositsForAddressResponse) GetDepositsPendingWithdrawal() *Deposit {
	if m != nil {
		return m.DepositsPendingWithdrawal
	}
	return nil
}

func (m *QueryGetDepositsForAddressResponse) GetDepositsPendingMint() *Deposit {
	if m != nil {
		return m.DepositsPendingMint
	}
	return nil
}

func (m *QueryGetDepositsForAddressResponse) GetDepositsMinted() *Deposit {
	if m != nil {
		return m.DepositsMinted
	}
	return nil
}

type QueryFetchDepositsResponse struct {
	Deposits   []Deposit           `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFetchDepositsResponse) Reset()         { *m = QueryFetchDepositsResponse{} }
func (m *QueryFetchDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFetchDepositsResponse) ProtoMessage()    {}
func (*QueryFetchDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63c69d94d8775bd, []int{7}
}
func (m *QueryFetchDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchDepositsResponse.Merge(m, src)
}
func (m *QueryFetchDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchDepositsResponse proto.InternalMessageInfo

func (m *QueryFetchDepositsResponse) GetDeposits() []Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryFetchDepositsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterEnum("lumnetwork.dfract.DepositsQueryType", DepositsQueryType_name, DepositsQueryType_value)
	proto.RegisterType((*QueryModuleAccountBalanceRequest)(nil), "lumnetwork.dfract.QueryModuleAccountBalanceRequest")
	proto.RegisterType((*QueryModuleAccountBalanceResponse)(nil), "lumnetwork.dfract.QueryModuleAccountBalanceResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "lumnetwork.dfract.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lumnetwork.dfract.QueryParamsResponse")
	proto.RegisterType((*QueryGetDepositsForAddressRequest)(nil), "lumnetwork.dfract.QueryGetDepositsForAddressRequest")
	proto.RegisterType((*QueryFetchDepositsRequest)(nil), "lumnetwork.dfract.QueryFetchDepositsRequest")
	proto.RegisterType((*QueryGetDepositsForAddressResponse)(nil), "lumnetwork.dfract.QueryGetDepositsForAddressResponse")
	proto.RegisterType((*QueryFetchDepositsResponse)(nil), "lumnetwork.dfract.QueryFetchDepositsResponse")
}

func init() { proto.RegisterFile("lumnetwork/dfract/query.proto", fileDescriptor_b63c69d94d8775bd) }

var fileDescriptor_b63c69d94d8775bd = []byte{
	// 840 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xa4, 0x6d, 0x80, 0xa1, 0xa4, 0xe9, 0xc4, 0x41, 0xf6, 0x12, 0xd6, 0x66, 0xd5, 0x06,
	0x2b, 0x34, 0xbb, 0x8a, 0x0b, 0x02, 0x21, 0x90, 0xb0, 0xeb, 0x24, 0x44, 0xc2, 0x96, 0x59, 0x45,
	0x8a, 0xd4, 0x8b, 0x35, 0xde, 0x1d, 0xd6, 0xab, 0x7a, 0x77, 0xb6, 0xbb, 0x63, 0x82, 0x55, 0x71,
	0xe1, 0x04, 0x39, 0xf1, 0x43, 0x1c, 0x7d, 0xe2, 0xc6, 0x19, 0xc4, 0xbf, 0xd0, 0x63, 0x25, 0x2e,
	0x9c, 0x0a, 0x4a, 0xf8, 0x0b, 0xf8, 0x0b, 0xd0, 0xce, 0x0f, 0xd7, 0xae, 0xd7, 0x76, 0x73, 0xf2,
	0x7a, 0xdf, 0xfb, 0xbe, 0xf7, 0xbd, 0xef, 0xcd, 0xbe, 0x81, 0x6f, 0xf6, 0x07, 0x41, 0x48, 0xd8,
	0x29, 0x8d, 0x1f, 0x58, 0xee, 0x17, 0x31, 0x76, 0x98, 0xf5, 0x70, 0x40, 0xe2, 0xa1, 0x19, 0xc5,
	0x94, 0x51, 0x74, 0xf3, 0x59, 0xd8, 0x14, 0x61, 0x6d, 0xcb, 0xa3, 0xd4, 0xeb, 0x13, 0x0b, 0x47,
	0xbe, 0x85, 0xc3, 0x90, 0x32, 0xcc, 0x7c, 0x1a, 0x26, 0x02, 0xa0, 0xe5, 0x3d, 0xea, 0x51, 0xfe,
	0x68, 0xa5, 0x4f, 0xf2, 0xad, 0xee, 0xd0, 0x24, 0xa0, 0x89, 0xd5, 0xc5, 0x09, 0xb1, 0xbe, 0xdc,
	0xeb, 0x12, 0x86, 0xf7, 0x2c, 0x87, 0xfa, 0xa1, 0x8c, 0xef, 0x4c, 0xc6, 0x79, 0xfd, 0x71, 0x56,
	0x84, 0x3d, 0x3f, 0xe4, 0x25, 0x14, 0xd7, 0xac, 0xe2, 0x08, 0xc7, 0x38, 0x50, 0x0a, 0x4a, 0xb3,
	0x71, 0x97, 0x44, 0x34, 0xf1, 0x99, 0x48, 0x30, 0x0c, 0x58, 0xfe, 0x3c, 0x2d, 0xd1, 0xa4, 0xee,
	0xa0, 0x4f, 0x6a, 0x8e, 0x43, 0x07, 0x21, 0xab, 0xe3, 0x3e, 0x0e, 0x1d, 0x62, 0x93, 0x87, 0x03,
	0x92, 0x30, 0xe3, 0x0f, 0x00, 0xdf, 0x5a, 0x90, 0x94, 0x44, 0x34, 0x4c, 0x08, 0xfa, 0x01, 0xc0,
	0xd7, 0x03, 0x9e, 0xd0, 0xc1, 0x22, 0xa3, 0xd3, 0x15, 0x29, 0x05, 0x50, 0xbe, 0x52, 0x79, 0xb5,
	0x5a, 0x34, 0x45, 0x63, 0x66, 0xda, 0x98, 0x29, 0x5b, 0x32, 0xef, 0x51, 0x3f, 0xac, 0x7f, 0xf2,
	0xf8, 0x69, 0x29, 0xf7, 0xdf, 0xd3, 0xd2, 0xf5, 0x21, 0x0e, 0xfa, 0x1f, 0x1a, 0xa9, 0x19, 0x89,
	0xf1, 0xeb, 0xdf, 0xa5, 0x8a, 0xe7, 0xb3, 0xde, 0xa0, 0x6b, 0x3a, 0x34, 0xb0, 0xa4, 0x2b, 0xe2,
	0x67, 0x37, 0x71, 0x1f, 0x58, 0x6c, 0x18, 0x91, 0x84, 0x13, 0x24, 0x76, 0x3e, 0xc8, 0xd0, 0x66,
	0xe4, 0x21, 0xe2, 0xc2, 0xdb, 0xdc, 0x13, 0xd5, 0x4f, 0x0b, 0x6e, 0x4c, 0xbd, 0x95, 0x0d, 0xbc,
	0x0f, 0x57, 0x85, 0x77, 0x05, 0x50, 0x06, 0x5c, 0xef, 0xcc, 0xbc, 0x4d, 0x01, 0xa9, 0x5f, 0x4d,
	0xf5, 0xda, 0x32, 0xdd, 0xf8, 0x58, 0xda, 0x73, 0x48, 0x58, 0x43, 0x98, 0x9b, 0x1c, 0xd0, 0xb8,
	0xe6, 0xba, 0x31, 0x49, 0x54, 0x51, 0x54, 0x80, 0x2f, 0x61, 0xf1, 0x86, 0xd3, 0xbf, 0x62, 0xab,
	0xbf, 0xc6, 0x08, 0xc0, 0x22, 0xc7, 0x1f, 0x10, 0xe6, 0xf4, 0x14, 0x83, 0xc2, 0x1d, 0x40, 0xf8,
	0x6c, 0xea, 0x52, 0xd9, 0xf6, 0x94, 0x93, 0xe2, 0x88, 0x2a, 0x3f, 0xdb, 0xd8, 0x53, 0x83, 0xb3,
	0x27, 0x90, 0xe8, 0x03, 0x78, 0x35, 0xf5, 0xab, 0xb0, 0x52, 0x06, 0x95, 0xb5, 0xea, 0xad, 0x8c,
	0xde, 0x54, 0x65, 0xae, 0xe5, 0x78, 0x18, 0x11, 0x9b, 0x23, 0x8c, 0x9f, 0x57, 0xa0, 0xb1, 0xa8,
	0x3f, 0x69, 0xdf, 0x7d, 0xf8, 0x86, 0x3c, 0x5a, 0x49, 0x27, 0x22, 0xa1, 0xeb, 0x87, 0x5e, 0xe7,
	0xd4, 0x67, 0x3d, 0x37, 0xc6, 0xa7, 0xb8, 0x2f, 0x95, 0x6b, 0xf3, 0xeb, 0xda, 0x45, 0x05, 0x6f,
	0x0b, 0xf4, 0xc9, 0x18, 0x8c, 0x5a, 0x70, 0x73, 0x86, 0x3b, 0xf0, 0x43, 0xc6, 0xbb, 0x59, 0xcc,
	0xba, 0xf1, 0x1c, 0x6b, 0xd3, 0x0f, 0x19, 0xba, 0x07, 0x6f, 0x8c, 0xf9, 0x52, 0x1e, 0xe2, 0x16,
	0xae, 0x2c, 0x65, 0x5a, 0x53, 0x90, 0x26, 0x47, 0x18, 0xbf, 0x00, 0xa8, 0x65, 0xcd, 0x4d, 0xfa,
	0xf1, 0x11, 0x7c, 0x59, 0x01, 0xe4, 0x07, 0xb0, 0x80, 0x5c, 0x9e, 0xa8, 0x31, 0x02, 0x1d, 0x4e,
	0x8d, 0x5d, 0xb4, 0xf9, 0xf6, 0xd2, 0xb1, 0x8b, 0xd2, 0x93, 0x73, 0xdf, 0xf9, 0x0e, 0xc0, 0x9b,
	0x33, 0x93, 0x45, 0x7b, 0x10, 0xb5, 0xf7, 0x5b, 0x8d, 0xa3, 0xd6, 0x61, 0xe7, 0xe4, 0xe8, 0xf8,
	0xd3, 0x86, 0x5d, 0x3b, 0xa9, 0x7d, 0xb6, 0x9e, 0xd3, 0x8a, 0x67, 0xa3, 0xf2, 0x66, 0x9a, 0x31,
	0x3b, 0x83, 0xdb, 0xf0, 0xba, 0x82, 0x34, 0x8f, 0x5a, 0xc7, 0xeb, 0x40, 0xdb, 0x38, 0x1b, 0x95,
	0x6f, 0x4c, 0x24, 0x73, 0x6b, 0x35, 0xb8, 0x9a, 0x86, 0xf7, 0x1b, 0xeb, 0x2b, 0xda, 0xda, 0xd9,
	0xa8, 0x0c, 0xd3, 0x04, 0xe1, 0x58, 0xf5, 0xdb, 0x6b, 0xf0, 0x1a, 0xd7, 0x80, 0x7e, 0x07, 0x30,
	0x9f, 0xb5, 0x4d, 0xd0, 0xdd, 0x0c, 0x8f, 0x96, 0x2d, 0x28, 0xed, 0xdd, 0xcb, 0x81, 0x84, 0x4b,
	0x46, 0xf5, 0x9b, 0x3f, 0xff, 0xfd, 0x69, 0xe5, 0x0e, 0xda, 0xb1, 0xfa, 0x83, 0x60, 0xf7, 0xb9,
	0x2d, 0x99, 0xbd, 0xc9, 0xd0, 0x23, 0xb8, 0x2a, 0x56, 0x00, 0xba, 0x3d, 0xaf, 0xe6, 0xd4, 0xae,
	0xd1, 0xb6, 0x97, 0xa5, 0x49, 0x31, 0x06, 0x17, 0xb3, 0x85, 0xb4, 0x2c, 0x31, 0x62, 0xcf, 0xa0,
	0xdf, 0x00, 0xdc, 0xcc, 0xfc, 0x06, 0xd1, 0x5c, 0x03, 0x16, 0xad, 0x24, 0xed, 0xbd, 0x4b, 0xa2,
	0xa4, 0x54, 0x93, 0x4b, 0xad, 0xa0, 0xed, 0x2c, 0xa9, 0xea, 0x00, 0x5b, 0x8f, 0xe4, 0x7a, 0xfb,
	0x1a, 0xfd, 0x08, 0xe0, 0x6b, 0x53, 0x9f, 0x08, 0xba, 0x33, 0xaf, 0x70, 0xd6, 0x06, 0xd4, 0x76,
	0x5f, 0x30, 0x5b, 0xca, 0xbb, 0xc5, 0xe5, 0xe9, 0x68, 0x6b, 0x91, 0xbc, 0xfa, 0xfe, 0xe3, 0x73,
	0x1d, 0x3c, 0x39, 0xd7, 0xc1, 0x3f, 0xe7, 0x3a, 0xf8, 0xfe, 0x42, 0xcf, 0x3d, 0xb9, 0xd0, 0x73,
	0x7f, 0x5d, 0xe8, 0xb9, 0xfb, 0xef, 0x4c, 0xdc, 0x39, 0x93, 0x0c, 0x4e, 0x0f, 0xfb, 0xa1, 0xf5,
	0x95, 0x62, 0xe2, 0x97, 0x4f, 0x77, 0x95, 0xdf, 0xa2, 0x77, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0xbf, 0x7a, 0x6e, 0x23, 0x3a, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	ModuleAccountBalance(ctx context.Context, in *QueryModuleAccountBalanceRequest, opts ...grpc.CallOption) (*QueryModuleAccountBalanceResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetDepositsForAddress(ctx context.Context, in *QueryGetDepositsForAddressRequest, opts ...grpc.CallOption) (*QueryGetDepositsForAddressResponse, error)
	FetchDeposits(ctx context.Context, in *QueryFetchDepositsRequest, opts ...grpc.CallOption) (*QueryFetchDepositsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ModuleAccountBalance(ctx context.Context, in *QueryModuleAccountBalanceRequest, opts ...grpc.CallOption) (*QueryModuleAccountBalanceResponse, error) {
	out := new(QueryModuleAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/lumnetwork.dfract.Query/ModuleAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lumnetwork.dfract.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositsForAddress(ctx context.Context, in *QueryGetDepositsForAddressRequest, opts ...grpc.CallOption) (*QueryGetDepositsForAddressResponse, error) {
	out := new(QueryGetDepositsForAddressResponse)
	err := c.cc.Invoke(ctx, "/lumnetwork.dfract.Query/GetDepositsForAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FetchDeposits(ctx context.Context, in *QueryFetchDepositsRequest, opts ...grpc.CallOption) (*QueryFetchDepositsResponse, error) {
	out := new(QueryFetchDepositsResponse)
	err := c.cc.Invoke(ctx, "/lumnetwork.dfract.Query/FetchDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	ModuleAccountBalance(context.Context, *QueryModuleAccountBalanceRequest) (*QueryModuleAccountBalanceResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetDepositsForAddress(context.Context, *QueryGetDepositsForAddressRequest) (*QueryGetDepositsForAddressResponse, error)
	FetchDeposits(context.Context, *QueryFetchDepositsRequest) (*QueryFetchDepositsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ModuleAccountBalance(ctx context.Context, req *QueryModuleAccountBalanceRequest) (*QueryModuleAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleAccountBalance not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetDepositsForAddress(ctx context.Context, req *QueryGetDepositsForAddressRequest) (*QueryGetDepositsForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositsForAddress not implemented")
}
func (*UnimplementedQueryServer) FetchDeposits(ctx context.Context, req *QueryFetchDepositsRequest) (*QueryFetchDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDeposits not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ModuleAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumnetwork.dfract.Query/ModuleAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleAccountBalance(ctx, req.(*QueryModuleAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumnetwork.dfract.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositsForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDepositsForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositsForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumnetwork.dfract.Query/GetDepositsForAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositsForAddress(ctx, req.(*QueryGetDepositsForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FetchDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFetchDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FetchDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumnetwork.dfract.Query/FetchDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FetchDeposits(ctx, req.(*QueryFetchDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lumnetwork.dfract.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModuleAccountBalance",
			Handler:    _Query_ModuleAccountBalance_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetDepositsForAddress",
			Handler:    _Query_GetDepositsForAddress_Handler,
		},
		{
			MethodName: "FetchDeposits",
			Handler:    _Query_FetchDeposits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lumnetwork/dfract/query.proto",
}

func (m *QueryModuleAccountBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleAccountBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleAccountBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleAccountBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleAccountBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleAccountBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleAccountBalance) > 0 {
		for iNdEx := len(m.ModuleAccountBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModuleAccountBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositsForAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositsForAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositsForAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositsForAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositsForAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositsForAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositsMinted != nil {
		{
			size, err := m.DepositsMinted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DepositsPendingMint != nil {
		{
			size, err := m.DepositsPendingMint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DepositsPendingWithdrawal != nil {
		{
			size, err := m.DepositsPendingWithdrawal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryModuleAccountBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleAccountBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModuleAccountBalance) > 0 {
		for _, e := range m.ModuleAccountBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDepositsForAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFetchDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	return n
}

func (m *QueryGetDepositsForAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositsPendingWithdrawal != nil {
		l = m.DepositsPendingWithdrawal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DepositsPendingMint != nil {
		l = m.DepositsPendingMint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DepositsMinted != nil {
		l = m.DepositsMinted.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFetchDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryModuleAccountBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleAccountBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleAccountBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccountBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccountBalance = append(m.ModuleAccountBalance, types.Coin{})
			if err := m.ModuleAccountBalance[len(m.ModuleAccountBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositsForAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositsForAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositsForAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DepositsQueryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositsForAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositsForAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositsForAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositsPendingWithdrawal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositsPendingWithdrawal == nil {
				m.DepositsPendingWithdrawal = &Deposit{}
			}
			if err := m.DepositsPendingWithdrawal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositsPendingMint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositsPendingMint == nil {
				m.DepositsPendingMint = &Deposit{}
			}
			if err := m.DepositsPendingMint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositsMinted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositsMinted == nil {
				m.DepositsMinted = &Deposit{}
			}
			if err := m.DepositsMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
