// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dfract/proposal.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SpendAndAdjustDistribution struct {
	Amount  types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
	Address string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SpendAndAdjustDistribution) Reset()         { *m = SpendAndAdjustDistribution{} }
func (m *SpendAndAdjustDistribution) String() string { return proto.CompactTextString(m) }
func (*SpendAndAdjustDistribution) ProtoMessage()    {}
func (*SpendAndAdjustDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7847e6fdc37fddb, []int{0}
}
func (m *SpendAndAdjustDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendAndAdjustDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendAndAdjustDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendAndAdjustDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendAndAdjustDistribution.Merge(m, src)
}
func (m *SpendAndAdjustDistribution) XXX_Size() int {
	return m.Size()
}
func (m *SpendAndAdjustDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendAndAdjustDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_SpendAndAdjustDistribution proto.InternalMessageInfo

func (m *SpendAndAdjustDistribution) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *SpendAndAdjustDistribution) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type SpendAndAdjustProposal struct {
	Title            string                        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SpendDestination string                        `protobuf:"bytes,3,opt,name=spend_destination,json=spendDestination,proto3" json:"spend_destination,omitempty"`
	MintAmount       types.Coin                    `protobuf:"bytes,4,opt,name=mint_amount,json=mintAmount,proto3" json:"mint_amount"`
	Distribution     []*SpendAndAdjustDistribution `protobuf:"bytes,5,rep,name=distribution,proto3" json:"distribution,omitempty"`
}

func (m *SpendAndAdjustProposal) Reset()      { *m = SpendAndAdjustProposal{} }
func (*SpendAndAdjustProposal) ProtoMessage() {}
func (*SpendAndAdjustProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7847e6fdc37fddb, []int{1}
}
func (m *SpendAndAdjustProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendAndAdjustProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendAndAdjustProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendAndAdjustProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendAndAdjustProposal.Merge(m, src)
}
func (m *SpendAndAdjustProposal) XXX_Size() int {
	return m.Size()
}
func (m *SpendAndAdjustProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendAndAdjustProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SpendAndAdjustProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SpendAndAdjustDistribution)(nil), "lum.network.dfract.SpendAndAdjustDistribution")
	proto.RegisterType((*SpendAndAdjustProposal)(nil), "lum.network.dfract.SpendAndAdjustProposal")
}

func init() { proto.RegisterFile("dfract/proposal.proto", fileDescriptor_e7847e6fdc37fddb) }

var fileDescriptor_e7847e6fdc37fddb = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xbd, 0x6e, 0xd5, 0x30,
	0x18, 0x4d, 0xfa, 0x87, 0xea, 0xcb, 0x00, 0x56, 0x41, 0xb7, 0x19, 0x7c, 0xa3, 0x0e, 0xe8, 0x4a,
	0x55, 0x6d, 0xb5, 0x0c, 0x48, 0x4c, 0xdc, 0xd2, 0x85, 0x0d, 0x85, 0x8d, 0xe5, 0xca, 0x89, 0x4d,
	0x6a, 0x48, 0xfc, 0x45, 0xf1, 0x97, 0x02, 0x6f, 0xc0, 0xc8, 0xc8, 0xd8, 0x91, 0x07, 0x60, 0xe3,
	0x05, 0x3a, 0x56, 0x4c, 0x4c, 0x08, 0xe5, 0xbe, 0x08, 0x4a, 0x6c, 0xc4, 0xad, 0x10, 0x12, 0x5b,
	0x8e, 0xcf, 0xc9, 0xf1, 0x39, 0x9f, 0x3f, 0x72, 0x4f, 0xbd, 0x6a, 0x65, 0x81, 0xa2, 0x69, 0xa1,
	0x01, 0x27, 0x2b, 0xde, 0xb4, 0x80, 0x40, 0x69, 0xd5, 0xd5, 0xdc, 0x6a, 0x7c, 0x0b, 0xed, 0x1b,
	0xee, 0x25, 0xc9, 0x5e, 0x09, 0x25, 0x8c, 0xb4, 0x18, 0xbe, 0xbc, 0x32, 0xd9, 0x2f, 0xc0, 0xd5,
	0xe0, 0x96, 0x9e, 0xf0, 0x20, 0x50, 0xcc, 0x23, 0x91, 0x4b, 0xa7, 0xc5, 0xc5, 0x71, 0xae, 0x51,
	0x1e, 0x8b, 0x02, 0x8c, 0xf5, 0xfc, 0x01, 0x90, 0xe4, 0x45, 0xa3, 0xad, 0x5a, 0x58, 0xb5, 0x50,
	0xaf, 0x3b, 0x87, 0x67, 0xc6, 0x61, 0x6b, 0xf2, 0x0e, 0x0d, 0x58, 0xfa, 0x88, 0xec, 0xc8, 0x1a,
	0x3a, 0x8b, 0xd3, 0x38, 0x8d, 0xe7, 0x93, 0x93, 0x7d, 0x1e, 0xcc, 0x07, 0x3b, 0x1e, 0xec, 0xf8,
	0x53, 0x30, 0xf6, 0x74, 0xeb, 0xea, 0xc7, 0x2c, 0xca, 0x82, 0x9c, 0x4e, 0xc9, 0x2d, 0xa9, 0x54,
	0xab, 0x9d, 0x9b, 0x6e, 0xa4, 0xf1, 0x7c, 0x37, 0xfb, 0x0d, 0x0f, 0xbe, 0x6e, 0x90, 0xfb, 0x37,
	0x6f, 0x7c, 0x1e, 0x6a, 0xd3, 0x3d, 0xb2, 0x8d, 0x06, 0x2b, 0x3d, 0x5e, 0xb6, 0x9b, 0x79, 0x40,
	0x53, 0x32, 0x51, 0xda, 0x15, 0xad, 0x69, 0x86, 0x48, 0xc1, 0x6e, 0xfd, 0x88, 0x1e, 0x92, 0xbb,
	0x6e, 0x70, 0x5c, 0x2a, 0xed, 0xd0, 0x58, 0x39, 0xea, 0x36, 0x47, 0xdd, 0x9d, 0x91, 0x38, 0xfb,
	0x73, 0x4e, 0x9f, 0x90, 0x49, 0x6d, 0x2c, 0x2e, 0x43, 0xaf, 0xad, 0xff, 0xeb, 0x45, 0x86, 0x7f,
	0x16, 0xbe, 0x5b, 0x46, 0x6e, 0xab, 0xb5, 0x21, 0x4d, 0xb7, 0xd3, 0xcd, 0xf9, 0xe4, 0x84, 0xf3,
	0xbf, 0x9f, 0x8b, 0xff, 0x7b, 0xb4, 0xd9, 0x0d, 0x8f, 0xc7, 0x0f, 0x3e, 0x5c, 0xce, 0xa2, 0x4f,
	0x97, 0xb3, 0xe8, 0xdb, 0x97, 0xa3, 0x24, 0x64, 0x29, 0xe1, 0x62, 0x2d, 0x8a, 0x45, 0x6d, 0xf1,
	0xf4, 0xd9, 0xe7, 0x9e, 0xc5, 0x57, 0x3d, 0x8b, 0xaf, 0x7b, 0x16, 0xff, 0xec, 0x59, 0xfc, 0x71,
	0xc5, 0xa2, 0xeb, 0x15, 0x8b, 0xbe, 0xaf, 0x58, 0xf4, 0xf2, 0xb0, 0x34, 0x78, 0xde, 0xe5, 0xbc,
	0x80, 0x5a, 0x54, 0x5d, 0x7d, 0x14, 0xd2, 0x88, 0xe2, 0x5c, 0x1a, 0x2b, 0xde, 0x89, 0xb0, 0x67,
	0xf8, 0xbe, 0xd1, 0x2e, 0xdf, 0x19, 0x17, 0xe0, 0xe1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b,
	0x94, 0xe3, 0x2e, 0x7e, 0x02, 0x00, 0x00,
}

func (this *SpendAndAdjustDistribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpendAndAdjustDistribution)
	if !ok {
		that2, ok := that.(SpendAndAdjustDistribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(&that1.Amount) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *SpendAndAdjustProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpendAndAdjustProposal)
	if !ok {
		that2, ok := that.(SpendAndAdjustProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.SpendDestination != that1.SpendDestination {
		return false
	}
	if !this.MintAmount.Equal(&that1.MintAmount) {
		return false
	}
	if len(this.Distribution) != len(that1.Distribution) {
		return false
	}
	for i := range this.Distribution {
		if !this.Distribution[i].Equal(that1.Distribution[i]) {
			return false
		}
	}
	return true
}
func (m *SpendAndAdjustDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendAndAdjustDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendAndAdjustDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SpendAndAdjustProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendAndAdjustProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendAndAdjustProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Distribution) > 0 {
		for iNdEx := len(m.Distribution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distribution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.MintAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.SpendDestination) > 0 {
		i -= len(m.SpendDestination)
		copy(dAtA[i:], m.SpendDestination)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.SpendDestination)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpendAndAdjustDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *SpendAndAdjustProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.SpendDestination)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.MintAmount.Size()
	n += 1 + l + sovProposal(uint64(l))
	if len(m.Distribution) > 0 {
		for _, e := range m.Distribution {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpendAndAdjustDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendAndAdjustDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendAndAdjustDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendAndAdjustProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendAndAdjustProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendAndAdjustProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendDestination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendDestination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distribution = append(m.Distribution, &SpendAndAdjustDistribution{})
			if err := m.Distribution[len(m.Distribution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
