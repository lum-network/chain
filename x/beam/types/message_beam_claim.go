package types

import (
	errorsmod "cosmossdk.io/errors"
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var _ sdk.Msg = &MsgClaimBeam{}

// NewMsgClaimBeam Build a MsgClaimBeam instance
func NewMsgClaimBeam(claimer string, id string, secret string) *MsgClaimBeam {
	return &MsgClaimBeam{
		ClaimerAddress: claimer,
		Id:             id,
		Secret:         secret,
	}
}

// Route dunno
func (msg MsgClaimBeam) Route() string {
	return RouterKey
}

// Type Return the message type
func (msg MsgClaimBeam) Type() string {
	return "ClaimBeam"
}

// GetSigners Return the list of signers for the given message
func (msg *MsgClaimBeam) GetSigners() []sdk.AccAddress {
	updater, err := sdk.AccAddressFromBech32(msg.GetClaimerAddress())
	if err != nil {
		panic(err)
	}
	return []sdk.AccAddress{updater}
}

// GetSignBytes Return the generated bytes from the signature
func (msg *MsgClaimBeam) GetSignBytes() []byte {
	bz := ModuleCdc.MustMarshalJSON(msg)
	return sdk.MustSortJSON(bz)
}

// ValidateBasic Validate the msg payload
func (msg *MsgClaimBeam) ValidateBasic() error {
	// Ensure the address is correct and that we are able to acquire it
	_, err := sdk.AccAddressFromBech32(msg.GetClaimerAddress())
	if err != nil {
		return errorsmod.Wrapf(sdkerrors.ErrInvalidAddress, "Invalid creator address (%s)", err)
	}

	return nil
}
