// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumnetwork/beam/beam.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BeamState int32

const (
	BeamState_StateUnspecified BeamState = 0
	BeamState_StateOpen        BeamState = 1
	BeamState_StateCanceled    BeamState = 2
	BeamState_StateClosed      BeamState = 3
)

var BeamState_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "OPEN",
	2: "CANCELED",
	3: "CLOSED",
}

var BeamState_value = map[string]int32{
	"UNSPECIFIED": 0,
	"OPEN":        1,
	"CANCELED":    2,
	"CLOSED":      3,
}

func (x BeamState) String() string {
	return proto.EnumName(BeamState_name, int32(x))
}

func (BeamState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{0}
}

type BeamMedia struct {
	Mimetype     string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	Url          string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ThumbnailUrl string `protobuf:"bytes,3,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
}

func (m *BeamMedia) Reset()         { *m = BeamMedia{} }
func (m *BeamMedia) String() string { return proto.CompactTextString(m) }
func (*BeamMedia) ProtoMessage()    {}
func (*BeamMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{0}
}
func (m *BeamMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamMedia.Merge(m, src)
}
func (m *BeamMedia) XXX_Size() int {
	return m.Size()
}
func (m *BeamMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamMedia.DiscardUnknown(m)
}

var xxx_messageInfo_BeamMedia proto.InternalMessageInfo

func (m *BeamMedia) GetMimetype() string {
	if m != nil {
		return m.Mimetype
	}
	return ""
}

func (m *BeamMedia) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BeamMedia) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

type BeamReviewer struct {
	ReviewerId  string `protobuf:"bytes,1,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsAnonymous bool   `protobuf:"varint,3,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
}

func (m *BeamReviewer) Reset()         { *m = BeamReviewer{} }
func (m *BeamReviewer) String() string { return proto.CompactTextString(m) }
func (*BeamReviewer) ProtoMessage()    {}
func (*BeamReviewer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{1}
}
func (m *BeamReviewer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamReviewer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamReviewer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamReviewer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamReviewer.Merge(m, src)
}
func (m *BeamReviewer) XXX_Size() int {
	return m.Size()
}
func (m *BeamReviewer) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamReviewer.DiscardUnknown(m)
}

var xxx_messageInfo_BeamReviewer proto.InternalMessageInfo

func (m *BeamReviewer) GetReviewerId() string {
	if m != nil {
		return m.ReviewerId
	}
	return ""
}

func (m *BeamReviewer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BeamReviewer) GetIsAnonymous() bool {
	if m != nil {
		return m.IsAnonymous
	}
	return false
}

type BeamVerifier struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *BeamVerifier) Reset()         { *m = BeamVerifier{} }
func (m *BeamVerifier) String() string { return proto.CompactTextString(m) }
func (*BeamVerifier) ProtoMessage()    {}
func (*BeamVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{2}
}
func (m *BeamVerifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamVerifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamVerifier.Merge(m, src)
}
func (m *BeamVerifier) XXX_Size() int {
	return m.Size()
}
func (m *BeamVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_BeamVerifier proto.InternalMessageInfo

func (m *BeamVerifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BeamVerifier) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BeamVerifier) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type BeamReward struct {
	Trigger   string                          `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Amount    float32                         `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	MaxAmount float32                         `protobuf:"fixed32,3,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	Currency  string                          `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Status    string                          `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Details   []*BeamReward_BeamRewardDetails `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *BeamReward) Reset()         { *m = BeamReward{} }
func (m *BeamReward) String() string { return proto.CompactTextString(m) }
func (*BeamReward) ProtoMessage()    {}
func (*BeamReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{3}
}
func (m *BeamReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamReward.Merge(m, src)
}
func (m *BeamReward) XXX_Size() int {
	return m.Size()
}
func (m *BeamReward) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamReward.DiscardUnknown(m)
}

var xxx_messageInfo_BeamReward proto.InternalMessageInfo

func (m *BeamReward) GetTrigger() string {
	if m != nil {
		return m.Trigger
	}
	return ""
}

func (m *BeamReward) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BeamReward) GetMaxAmount() float32 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *BeamReward) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *BeamReward) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BeamReward) GetDetails() []*BeamReward_BeamRewardDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type BeamReward_BeamRewardDetails struct {
	Type      string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Amount    float32 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	MaxAmount float32 `protobuf:"fixed32,3,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	Status    string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *BeamReward_BeamRewardDetails) Reset()         { *m = BeamReward_BeamRewardDetails{} }
func (m *BeamReward_BeamRewardDetails) String() string { return proto.CompactTextString(m) }
func (*BeamReward_BeamRewardDetails) ProtoMessage()    {}
func (*BeamReward_BeamRewardDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{3, 0}
}
func (m *BeamReward_BeamRewardDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamReward_BeamRewardDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamReward_BeamRewardDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamReward_BeamRewardDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamReward_BeamRewardDetails.Merge(m, src)
}
func (m *BeamReward_BeamRewardDetails) XXX_Size() int {
	return m.Size()
}
func (m *BeamReward_BeamRewardDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamReward_BeamRewardDetails.DiscardUnknown(m)
}

var xxx_messageInfo_BeamReward_BeamRewardDetails proto.InternalMessageInfo

func (m *BeamReward_BeamRewardDetails) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BeamReward_BeamRewardDetails) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BeamReward_BeamRewardDetails) GetMaxAmount() float32 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *BeamReward_BeamRewardDetails) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type BeamMerchantReview struct {
	OrderId          string                                        `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ReviewId         string                                        `protobuf:"bytes,2,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	MerchantUrl      string                                        `protobuf:"bytes,3,opt,name=merchant_url,json=merchantUrl,proto3" json:"merchant_url,omitempty"`
	RatingUrl        string                                        `protobuf:"bytes,4,opt,name=rating_url,json=ratingUrl,proto3" json:"rating_url,omitempty"`
	ReviewUrl        string                                        `protobuf:"bytes,5,opt,name=review_url,json=reviewUrl,proto3" json:"review_url,omitempty"`
	CollectionMethod string                                        `protobuf:"bytes,6,opt,name=collection_method,json=collectionMethod,proto3" json:"collection_method,omitempty"`
	Timestamp        string                                        `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ratings          *BeamMerchantReview_BeamMerchantReviewRating  `protobuf:"bytes,8,opt,name=ratings,proto3" json:"ratings,omitempty"`
	Title            string                                        `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Content          *BeamMerchantReview_BeamMerchantReviewContent `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *BeamMerchantReview) Reset()         { *m = BeamMerchantReview{} }
func (m *BeamMerchantReview) String() string { return proto.CompactTextString(m) }
func (*BeamMerchantReview) ProtoMessage()    {}
func (*BeamMerchantReview) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{4}
}
func (m *BeamMerchantReview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamMerchantReview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamMerchantReview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamMerchantReview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamMerchantReview.Merge(m, src)
}
func (m *BeamMerchantReview) XXX_Size() int {
	return m.Size()
}
func (m *BeamMerchantReview) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamMerchantReview.DiscardUnknown(m)
}

var xxx_messageInfo_BeamMerchantReview proto.InternalMessageInfo

func (m *BeamMerchantReview) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *BeamMerchantReview) GetReviewId() string {
	if m != nil {
		return m.ReviewId
	}
	return ""
}

func (m *BeamMerchantReview) GetMerchantUrl() string {
	if m != nil {
		return m.MerchantUrl
	}
	return ""
}

func (m *BeamMerchantReview) GetRatingUrl() string {
	if m != nil {
		return m.RatingUrl
	}
	return ""
}

func (m *BeamMerchantReview) GetReviewUrl() string {
	if m != nil {
		return m.ReviewUrl
	}
	return ""
}

func (m *BeamMerchantReview) GetCollectionMethod() string {
	if m != nil {
		return m.CollectionMethod
	}
	return ""
}

func (m *BeamMerchantReview) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *BeamMerchantReview) GetRatings() *BeamMerchantReview_BeamMerchantReviewRating {
	if m != nil {
		return m.Ratings
	}
	return nil
}

func (m *BeamMerchantReview) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BeamMerchantReview) GetContent() *BeamMerchantReview_BeamMerchantReviewContent {
	if m != nil {
		return m.Content
	}
	return nil
}

type BeamMerchantReview_BeamMerchantReviewRating struct {
	Overall         float32 `protobuf:"fixed32,1,opt,name=overall,proto3" json:"overall,omitempty"`
	CustomerService float32 `protobuf:"fixed32,2,opt,name=customer_service,json=customerService,proto3" json:"customer_service,omitempty"`
	Nps             float32 `protobuf:"fixed32,3,opt,name=nps,proto3" json:"nps,omitempty"`
}

func (m *BeamMerchantReview_BeamMerchantReviewRating) Reset() {
	*m = BeamMerchantReview_BeamMerchantReviewRating{}
}
func (m *BeamMerchantReview_BeamMerchantReviewRating) String() string {
	return proto.CompactTextString(m)
}
func (*BeamMerchantReview_BeamMerchantReviewRating) ProtoMessage() {}
func (*BeamMerchantReview_BeamMerchantReviewRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{4, 0}
}
func (m *BeamMerchantReview_BeamMerchantReviewRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamMerchantReview_BeamMerchantReviewRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamMerchantReview_BeamMerchantReviewRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewRating.Merge(m, src)
}
func (m *BeamMerchantReview_BeamMerchantReviewRating) XXX_Size() int {
	return m.Size()
}
func (m *BeamMerchantReview_BeamMerchantReviewRating) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewRating.DiscardUnknown(m)
}

var xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewRating proto.InternalMessageInfo

func (m *BeamMerchantReview_BeamMerchantReviewRating) GetOverall() float32 {
	if m != nil {
		return m.Overall
	}
	return 0
}

func (m *BeamMerchantReview_BeamMerchantReviewRating) GetCustomerService() float32 {
	if m != nil {
		return m.CustomerService
	}
	return 0
}

func (m *BeamMerchantReview_BeamMerchantReviewRating) GetNps() float32 {
	if m != nil {
		return m.Nps
	}
	return 0
}

type BeamMerchantReview_BeamMerchantReviewContent struct {
	Overall         string `protobuf:"bytes,1,opt,name=overall,proto3" json:"overall,omitempty"`
	CustomerService string `protobuf:"bytes,2,opt,name=customer_service,json=customerService,proto3" json:"customer_service,omitempty"`
}

func (m *BeamMerchantReview_BeamMerchantReviewContent) Reset() {
	*m = BeamMerchantReview_BeamMerchantReviewContent{}
}
func (m *BeamMerchantReview_BeamMerchantReviewContent) String() string {
	return proto.CompactTextString(m)
}
func (*BeamMerchantReview_BeamMerchantReviewContent) ProtoMessage() {}
func (*BeamMerchantReview_BeamMerchantReviewContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{4, 1}
}
func (m *BeamMerchantReview_BeamMerchantReviewContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamMerchantReview_BeamMerchantReviewContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamMerchantReview_BeamMerchantReviewContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewContent.Merge(m, src)
}
func (m *BeamMerchantReview_BeamMerchantReviewContent) XXX_Size() int {
	return m.Size()
}
func (m *BeamMerchantReview_BeamMerchantReviewContent) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewContent.DiscardUnknown(m)
}

var xxx_messageInfo_BeamMerchantReview_BeamMerchantReviewContent proto.InternalMessageInfo

func (m *BeamMerchantReview_BeamMerchantReviewContent) GetOverall() string {
	if m != nil {
		return m.Overall
	}
	return ""
}

func (m *BeamMerchantReview_BeamMerchantReviewContent) GetCustomerService() string {
	if m != nil {
		return m.CustomerService
	}
	return ""
}

type BeamProductReview struct {
	OrderId          string                                      `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ReviewId         string                                      `protobuf:"bytes,2,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	RatingUrl        string                                      `protobuf:"bytes,3,opt,name=rating_url,json=ratingUrl,proto3" json:"rating_url,omitempty"`
	ReviewUrl        string                                      `protobuf:"bytes,4,opt,name=review_url,json=reviewUrl,proto3" json:"review_url,omitempty"`
	CollectionMethod string                                      `protobuf:"bytes,5,opt,name=collection_method,json=collectionMethod,proto3" json:"collection_method,omitempty"`
	Timestamp        string                                      `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ratings          *BeamProductReview_BeamProductReviewRating  `protobuf:"bytes,7,opt,name=ratings,proto3" json:"ratings,omitempty"`
	Title            string                                      `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Content          *BeamProductReview_BeamProductReviewContent `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	Medias           []*BeamMedia                                `protobuf:"bytes,10,rep,name=medias,proto3" json:"medias,omitempty"`
	Products         []*BeamProductReview_BeamProduct            `protobuf:"bytes,11,rep,name=products,proto3" json:"products,omitempty"`
}

func (m *BeamProductReview) Reset()         { *m = BeamProductReview{} }
func (m *BeamProductReview) String() string { return proto.CompactTextString(m) }
func (*BeamProductReview) ProtoMessage()    {}
func (*BeamProductReview) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{5}
}
func (m *BeamProductReview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamProductReview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamProductReview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamProductReview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamProductReview.Merge(m, src)
}
func (m *BeamProductReview) XXX_Size() int {
	return m.Size()
}
func (m *BeamProductReview) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamProductReview.DiscardUnknown(m)
}

var xxx_messageInfo_BeamProductReview proto.InternalMessageInfo

func (m *BeamProductReview) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *BeamProductReview) GetReviewId() string {
	if m != nil {
		return m.ReviewId
	}
	return ""
}

func (m *BeamProductReview) GetRatingUrl() string {
	if m != nil {
		return m.RatingUrl
	}
	return ""
}

func (m *BeamProductReview) GetReviewUrl() string {
	if m != nil {
		return m.ReviewUrl
	}
	return ""
}

func (m *BeamProductReview) GetCollectionMethod() string {
	if m != nil {
		return m.CollectionMethod
	}
	return ""
}

func (m *BeamProductReview) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *BeamProductReview) GetRatings() *BeamProductReview_BeamProductReviewRating {
	if m != nil {
		return m.Ratings
	}
	return nil
}

func (m *BeamProductReview) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BeamProductReview) GetContent() *BeamProductReview_BeamProductReviewContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BeamProductReview) GetMedias() []*BeamMedia {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *BeamProductReview) GetProducts() []*BeamProductReview_BeamProduct {
	if m != nil {
		return m.Products
	}
	return nil
}

type BeamProductReview_BeamProductReviewRating struct {
	Overall float32 `protobuf:"fixed32,1,opt,name=overall,proto3" json:"overall,omitempty"`
	Quality float32 `protobuf:"fixed32,2,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (m *BeamProductReview_BeamProductReviewRating) Reset() {
	*m = BeamProductReview_BeamProductReviewRating{}
}
func (m *BeamProductReview_BeamProductReviewRating) String() string {
	return proto.CompactTextString(m)
}
func (*BeamProductReview_BeamProductReviewRating) ProtoMessage() {}
func (*BeamProductReview_BeamProductReviewRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{5, 0}
}
func (m *BeamProductReview_BeamProductReviewRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamProductReview_BeamProductReviewRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamProductReview_BeamProductReviewRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamProductReview_BeamProductReviewRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamProductReview_BeamProductReviewRating.Merge(m, src)
}
func (m *BeamProductReview_BeamProductReviewRating) XXX_Size() int {
	return m.Size()
}
func (m *BeamProductReview_BeamProductReviewRating) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamProductReview_BeamProductReviewRating.DiscardUnknown(m)
}

var xxx_messageInfo_BeamProductReview_BeamProductReviewRating proto.InternalMessageInfo

func (m *BeamProductReview_BeamProductReviewRating) GetOverall() float32 {
	if m != nil {
		return m.Overall
	}
	return 0
}

func (m *BeamProductReview_BeamProductReviewRating) GetQuality() float32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

type BeamProductReview_BeamProductReviewContent struct {
	Overall string `protobuf:"bytes,1,opt,name=overall,proto3" json:"overall,omitempty"`
	Pros    string `protobuf:"bytes,2,opt,name=pros,proto3" json:"pros,omitempty"`
	Cons    string `protobuf:"bytes,3,opt,name=cons,proto3" json:"cons,omitempty"`
}

func (m *BeamProductReview_BeamProductReviewContent) Reset() {
	*m = BeamProductReview_BeamProductReviewContent{}
}
func (m *BeamProductReview_BeamProductReviewContent) String() string {
	return proto.CompactTextString(m)
}
func (*BeamProductReview_BeamProductReviewContent) ProtoMessage() {}
func (*BeamProductReview_BeamProductReviewContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{5, 1}
}
func (m *BeamProductReview_BeamProductReviewContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamProductReview_BeamProductReviewContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamProductReview_BeamProductReviewContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamProductReview_BeamProductReviewContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamProductReview_BeamProductReviewContent.Merge(m, src)
}
func (m *BeamProductReview_BeamProductReviewContent) XXX_Size() int {
	return m.Size()
}
func (m *BeamProductReview_BeamProductReviewContent) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamProductReview_BeamProductReviewContent.DiscardUnknown(m)
}

var xxx_messageInfo_BeamProductReview_BeamProductReviewContent proto.InternalMessageInfo

func (m *BeamProductReview_BeamProductReviewContent) GetOverall() string {
	if m != nil {
		return m.Overall
	}
	return ""
}

func (m *BeamProductReview_BeamProductReviewContent) GetPros() string {
	if m != nil {
		return m.Pros
	}
	return ""
}

func (m *BeamProductReview_BeamProductReviewContent) GetCons() string {
	if m != nil {
		return m.Cons
	}
	return ""
}

type BeamProductReview_BeamProduct struct {
	Name string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string                                        `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Urls []string                                      `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	Ids  *BeamProductReview_BeamProduct_BeamProductIds `protobuf:"bytes,4,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (m *BeamProductReview_BeamProduct) Reset()         { *m = BeamProductReview_BeamProduct{} }
func (m *BeamProductReview_BeamProduct) String() string { return proto.CompactTextString(m) }
func (*BeamProductReview_BeamProduct) ProtoMessage()    {}
func (*BeamProductReview_BeamProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{5, 2}
}
func (m *BeamProductReview_BeamProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamProductReview_BeamProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamProductReview_BeamProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamProductReview_BeamProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamProductReview_BeamProduct.Merge(m, src)
}
func (m *BeamProductReview_BeamProduct) XXX_Size() int {
	return m.Size()
}
func (m *BeamProductReview_BeamProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamProductReview_BeamProduct.DiscardUnknown(m)
}

var xxx_messageInfo_BeamProductReview_BeamProduct proto.InternalMessageInfo

func (m *BeamProductReview_BeamProduct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BeamProductReview_BeamProduct) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BeamProductReview_BeamProduct) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *BeamProductReview_BeamProduct) GetIds() *BeamProductReview_BeamProduct_BeamProductIds {
	if m != nil {
		return m.Ids
	}
	return nil
}

type BeamProductReview_BeamProduct_BeamProductIds struct {
	Gtins []string `protobuf:"bytes,1,rep,name=gtins,proto3" json:"gtins,omitempty"`
	Mpns  []string `protobuf:"bytes,2,rep,name=mpns,proto3" json:"mpns,omitempty"`
	Skus  []string `protobuf:"bytes,3,rep,name=skus,proto3" json:"skus,omitempty"`
	Asins []string `protobuf:"bytes,4,rep,name=asins,proto3" json:"asins,omitempty"`
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) Reset() {
	*m = BeamProductReview_BeamProduct_BeamProductIds{}
}
func (m *BeamProductReview_BeamProduct_BeamProductIds) String() string {
	return proto.CompactTextString(m)
}
func (*BeamProductReview_BeamProduct_BeamProductIds) ProtoMessage() {}
func (*BeamProductReview_BeamProduct_BeamProductIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{5, 2, 0}
}
func (m *BeamProductReview_BeamProduct_BeamProductIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamProductReview_BeamProduct_BeamProductIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamProductReview_BeamProduct_BeamProductIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamProductReview_BeamProduct_BeamProductIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamProductReview_BeamProduct_BeamProductIds.Merge(m, src)
}
func (m *BeamProductReview_BeamProduct_BeamProductIds) XXX_Size() int {
	return m.Size()
}
func (m *BeamProductReview_BeamProduct_BeamProductIds) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamProductReview_BeamProduct_BeamProductIds.DiscardUnknown(m)
}

var xxx_messageInfo_BeamProductReview_BeamProduct_BeamProductIds proto.InternalMessageInfo

func (m *BeamProductReview_BeamProduct_BeamProductIds) GetGtins() []string {
	if m != nil {
		return m.Gtins
	}
	return nil
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) GetMpns() []string {
	if m != nil {
		return m.Mpns
	}
	return nil
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) GetSkus() []string {
	if m != nil {
		return m.Skus
	}
	return nil
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) GetAsins() []string {
	if m != nil {
		return m.Asins
	}
	return nil
}

type BeamData struct {
	Reward          *BeamReward          `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	Verifier        *BeamVerifier        `protobuf:"bytes,2,opt,name=verifier,proto3" json:"verifier,omitempty"`
	Reviewer        *BeamReviewer        `protobuf:"bytes,3,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	MerchantReview  *BeamMerchantReview  `protobuf:"bytes,4,opt,name=merchant_review,json=merchantReview,proto3" json:"merchant_review,omitempty"`
	ProductsReviews []*BeamProductReview `protobuf:"bytes,5,rep,name=products_reviews,json=productsReviews,proto3" json:"products_reviews,omitempty"`
}

func (m *BeamData) Reset()         { *m = BeamData{} }
func (m *BeamData) String() string { return proto.CompactTextString(m) }
func (*BeamData) ProtoMessage()    {}
func (*BeamData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{6}
}
func (m *BeamData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeamData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeamData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeamData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeamData.Merge(m, src)
}
func (m *BeamData) XXX_Size() int {
	return m.Size()
}
func (m *BeamData) XXX_DiscardUnknown() {
	xxx_messageInfo_BeamData.DiscardUnknown(m)
}

var xxx_messageInfo_BeamData proto.InternalMessageInfo

func (m *BeamData) GetReward() *BeamReward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *BeamData) GetVerifier() *BeamVerifier {
	if m != nil {
		return m.Verifier
	}
	return nil
}

func (m *BeamData) GetReviewer() *BeamReviewer {
	if m != nil {
		return m.Reviewer
	}
	return nil
}

func (m *BeamData) GetMerchantReview() *BeamMerchantReview {
	if m != nil {
		return m.MerchantReview
	}
	return nil
}

func (m *BeamData) GetProductsReviews() []*BeamProductReview {
	if m != nil {
		return m.ProductsReviews
	}
	return nil
}

type Beam struct {
	CreatorAddress      string     `protobuf:"bytes,1,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	Id                  string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Amount              types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	Status              BeamState  `protobuf:"varint,4,opt,name=status,proto3,enum=lumnetwork.beam.BeamState" json:"status,omitempty"`
	Secret              string     `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	ClaimAddress        string     `protobuf:"bytes,6,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
	FundsWithdrawn      bool       `protobuf:"varint,7,opt,name=funds_withdrawn,json=fundsWithdrawn,proto3" json:"funds_withdrawn,omitempty"`
	Claimed             bool       `protobuf:"varint,8,opt,name=claimed,proto3" json:"claimed,omitempty"`
	CancelReason        string     `protobuf:"bytes,9,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
	HideContent         bool       `protobuf:"varint,10,opt,name=hide_content,json=hideContent,proto3" json:"hide_content,omitempty"`
	Schema              string     `protobuf:"bytes,11,opt,name=schema,proto3" json:"schema,omitempty"`
	Data                *BeamData  `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`
	ClaimExpiresAtBlock int32      `protobuf:"varint,13,opt,name=claim_expires_at_block,json=claimExpiresAtBlock,proto3" json:"claim_expires_at_block,omitempty"`
	ClosesAtBlock       int32      `protobuf:"varint,14,opt,name=closes_at_block,json=closesAtBlock,proto3" json:"closes_at_block,omitempty"`
	CreatedAt           time.Time  `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	ClosedAt            time.Time  `protobuf:"bytes,16,opt,name=closed_at,json=closedAt,proto3,stdtime" json:"closed_at"`
}

func (m *Beam) Reset()         { *m = Beam{} }
func (m *Beam) String() string { return proto.CompactTextString(m) }
func (*Beam) ProtoMessage()    {}
func (*Beam) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a6cc49d48ce9e1, []int{7}
}
func (m *Beam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Beam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Beam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Beam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Beam.Merge(m, src)
}
func (m *Beam) XXX_Size() int {
	return m.Size()
}
func (m *Beam) XXX_DiscardUnknown() {
	xxx_messageInfo_Beam.DiscardUnknown(m)
}

var xxx_messageInfo_Beam proto.InternalMessageInfo

func (m *Beam) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *Beam) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Beam) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Beam) GetStatus() BeamState {
	if m != nil {
		return m.Status
	}
	return BeamState_StateUnspecified
}

func (m *Beam) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Beam) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

func (m *Beam) GetFundsWithdrawn() bool {
	if m != nil {
		return m.FundsWithdrawn
	}
	return false
}

func (m *Beam) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func (m *Beam) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

func (m *Beam) GetHideContent() bool {
	if m != nil {
		return m.HideContent
	}
	return false
}

func (m *Beam) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Beam) GetData() *BeamData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Beam) GetClaimExpiresAtBlock() int32 {
	if m != nil {
		return m.ClaimExpiresAtBlock
	}
	return 0
}

func (m *Beam) GetClosesAtBlock() int32 {
	if m != nil {
		return m.ClosesAtBlock
	}
	return 0
}

func (m *Beam) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Beam) GetClosedAt() time.Time {
	if m != nil {
		return m.ClosedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("lumnetwork.beam.BeamState", BeamState_name, BeamState_value)
	proto.RegisterType((*BeamMedia)(nil), "lumnetwork.beam.BeamMedia")
	proto.RegisterType((*BeamReviewer)(nil), "lumnetwork.beam.BeamReviewer")
	proto.RegisterType((*BeamVerifier)(nil), "lumnetwork.beam.BeamVerifier")
	proto.RegisterType((*BeamReward)(nil), "lumnetwork.beam.BeamReward")
	proto.RegisterType((*BeamReward_BeamRewardDetails)(nil), "lumnetwork.beam.BeamReward.BeamRewardDetails")
	proto.RegisterType((*BeamMerchantReview)(nil), "lumnetwork.beam.BeamMerchantReview")
	proto.RegisterType((*BeamMerchantReview_BeamMerchantReviewRating)(nil), "lumnetwork.beam.BeamMerchantReview.BeamMerchantReviewRating")
	proto.RegisterType((*BeamMerchantReview_BeamMerchantReviewContent)(nil), "lumnetwork.beam.BeamMerchantReview.BeamMerchantReviewContent")
	proto.RegisterType((*BeamProductReview)(nil), "lumnetwork.beam.BeamProductReview")
	proto.RegisterType((*BeamProductReview_BeamProductReviewRating)(nil), "lumnetwork.beam.BeamProductReview.BeamProductReviewRating")
	proto.RegisterType((*BeamProductReview_BeamProductReviewContent)(nil), "lumnetwork.beam.BeamProductReview.BeamProductReviewContent")
	proto.RegisterType((*BeamProductReview_BeamProduct)(nil), "lumnetwork.beam.BeamProductReview.BeamProduct")
	proto.RegisterType((*BeamProductReview_BeamProduct_BeamProductIds)(nil), "lumnetwork.beam.BeamProductReview.BeamProduct.BeamProductIds")
	proto.RegisterType((*BeamData)(nil), "lumnetwork.beam.BeamData")
	proto.RegisterType((*Beam)(nil), "lumnetwork.beam.Beam")
}

func init() { proto.RegisterFile("lumnetwork/beam/beam.proto", fileDescriptor_e8a6cc49d48ce9e1) }

var fileDescriptor_e8a6cc49d48ce9e1 = []byte{
	// 1438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4b, 0x6f, 0x1b, 0xb7,
	0x16, 0xb6, 0x2c, 0x59, 0x1a, 0x1d, 0xd9, 0x96, 0xc2, 0x1b, 0x24, 0x93, 0xc9, 0x8d, 0xad, 0xab,
	0xe0, 0x36, 0x4e, 0x8b, 0x48, 0x88, 0xb3, 0x28, 0xfa, 0x5a, 0xc8, 0xb2, 0x5a, 0xb8, 0x88, 0xe3,
	0x60, 0x1c, 0x27, 0x40, 0x51, 0x54, 0xa5, 0x66, 0x68, 0x89, 0xc8, 0xcc, 0x50, 0x21, 0x39, 0x7e,
	0xfc, 0x84, 0x7a, 0x95, 0x45, 0xb7, 0x06, 0xfa, 0x67, 0x0a, 0x64, 0x19, 0x74, 0xd5, 0x55, 0x5b,
	0x24, 0xff, 0xa3, 0x28, 0x48, 0xce, 0x8c, 0xe4, 0x87, 0x1c, 0x27, 0xdd, 0x0c, 0x78, 0xbe, 0xf3,
	0x24, 0xf9, 0x91, 0x3c, 0x03, 0x4e, 0x10, 0x87, 0x11, 0x91, 0xfb, 0x8c, 0x3f, 0x6f, 0xf5, 0x09,
	0x0e, 0xf5, 0xa7, 0x39, 0xe2, 0x4c, 0x32, 0x54, 0x1d, 0xeb, 0x9a, 0x0a, 0x76, 0xae, 0x0e, 0xd8,
	0x80, 0x69, 0x5d, 0x4b, 0x8d, 0x8c, 0x99, 0xb3, 0x3c, 0x60, 0x6c, 0x10, 0x90, 0x96, 0x96, 0xfa,
	0xf1, 0x6e, 0x4b, 0xd2, 0x90, 0x08, 0x89, 0xc3, 0x51, 0x62, 0xb0, 0xe4, 0x31, 0x11, 0x32, 0xd1,
	0xea, 0x63, 0x41, 0x5a, 0x7b, 0xf7, 0xfb, 0x44, 0xe2, 0xfb, 0x2d, 0x8f, 0xd1, 0xc8, 0xe8, 0x1b,
	0x3f, 0x40, 0x79, 0x8d, 0xe0, 0x70, 0x93, 0xf8, 0x14, 0x23, 0x07, 0xac, 0x90, 0x86, 0x44, 0x1e,
	0x8e, 0x88, 0x9d, 0xab, 0xe7, 0x56, 0xca, 0x6e, 0x26, 0xa3, 0x1a, 0xe4, 0x63, 0x1e, 0xd8, 0xb3,
	0x1a, 0x56, 0x43, 0x74, 0x1b, 0x16, 0xe4, 0x30, 0x0e, 0xfb, 0x11, 0xa6, 0x41, 0x4f, 0xe9, 0xf2,
	0x5a, 0x37, 0x9f, 0x81, 0x3b, 0x3c, 0x68, 0xec, 0xc2, 0xbc, 0x8a, 0xef, 0x92, 0x3d, 0x4a, 0xf6,
	0x09, 0x47, 0xcb, 0x50, 0xe1, 0xc9, 0xb8, 0x47, 0xfd, 0x24, 0x0b, 0xa4, 0xd0, 0x86, 0x8f, 0x10,
	0x14, 0x22, 0x1c, 0x92, 0x24, 0x91, 0x1e, 0xa3, 0xff, 0xc1, 0x3c, 0x15, 0x3d, 0x1c, 0xb1, 0xe8,
	0x30, 0x64, 0xb1, 0xd0, 0x89, 0x2c, 0xb7, 0x42, 0x45, 0x3b, 0x85, 0x1a, 0xae, 0xc9, 0xf3, 0x94,
	0x70, 0xba, 0x4b, 0x09, 0xcf, 0xc2, 0xe4, 0x26, 0xc2, 0x9c, 0x9d, 0xc2, 0x7f, 0xa1, 0x2c, 0xe8,
	0x20, 0xc2, 0x32, 0xe6, 0x24, 0x29, 0x7f, 0x0c, 0x34, 0x7e, 0x9b, 0x05, 0x30, 0xc5, 0xef, 0x63,
	0xee, 0x23, 0x1b, 0x4a, 0x92, 0xd3, 0xc1, 0x80, 0xf0, 0x24, 0x6a, 0x2a, 0xa2, 0x6b, 0x50, 0xc4,
	0x21, 0x8b, 0x23, 0xa9, 0x63, 0xcf, 0xba, 0x89, 0x84, 0x6e, 0x01, 0x84, 0xf8, 0xa0, 0x97, 0xe8,
	0xf2, 0x5a, 0x57, 0x0e, 0xf1, 0x41, 0xdb, 0xa8, 0x1d, 0xb0, 0xbc, 0x98, 0x73, 0x12, 0x79, 0x87,
	0x76, 0xc1, 0x2c, 0x77, 0x2a, 0xab, 0x90, 0x42, 0x62, 0x19, 0x0b, 0x7b, 0x4e, 0x6b, 0x12, 0x09,
	0x7d, 0x03, 0x25, 0x9f, 0x48, 0x4c, 0x03, 0x61, 0x17, 0xeb, 0xf9, 0x95, 0xca, 0xea, 0xbd, 0xe6,
	0x29, 0xa6, 0x34, 0xc7, 0x25, 0x4f, 0x0c, 0xd7, 0x8d, 0x93, 0x9b, 0x7a, 0x3b, 0x7b, 0x70, 0xe5,
	0x8c, 0x56, 0xad, 0xda, 0xc4, 0xe6, 0xeb, 0xf1, 0x87, 0x4e, 0x6e, 0x3c, 0x81, 0xc2, 0xe4, 0x04,
	0x1a, 0x3f, 0xcf, 0x01, 0x32, 0x8c, 0xe3, 0xde, 0x10, 0x47, 0xd2, 0x30, 0x03, 0xdd, 0x00, 0x8b,
	0x71, 0x7f, 0x92, 0x14, 0x25, 0x2d, 0x6f, 0xf8, 0xe8, 0x26, 0x94, 0x0d, 0x3f, 0x94, 0xce, 0x6c,
	0x9e, 0x65, 0x80, 0x0d, 0x5f, 0x51, 0x23, 0x4c, 0x22, 0x4d, 0x70, 0xb0, 0x92, 0x62, 0x3b, 0x3c,
	0x50, 0x85, 0x72, 0x2c, 0x69, 0x34, 0xd0, 0x06, 0xa6, 0x9a, 0xb2, 0x41, 0x52, 0xb5, 0x09, 0xaf,
	0xd4, 0x73, 0x89, 0x5a, 0x23, 0x4a, 0xfd, 0x09, 0x5c, 0xf1, 0x58, 0x10, 0x10, 0x4f, 0x52, 0x16,
	0xf5, 0x42, 0x22, 0x87, 0xcc, 0xb7, 0x8b, 0xda, 0xaa, 0x36, 0x56, 0x6c, 0x6a, 0x5c, 0xf1, 0x29,
	0x3b, 0x80, 0x76, 0xc9, 0x84, 0xca, 0x00, 0xf4, 0x14, 0x4a, 0x26, 0xad, 0xb0, 0xad, 0x7a, 0x6e,
	0xa5, 0xb2, 0xfa, 0xe5, 0xb9, 0x7b, 0x77, 0x72, 0x65, 0xce, 0x81, 0x5c, 0x1d, 0xc4, 0x4d, 0x83,
	0xa1, 0xab, 0x30, 0x27, 0xa9, 0x0c, 0x88, 0x5d, 0xd6, 0x19, 0x8d, 0x80, 0x9e, 0x41, 0xc9, 0x63,
	0x91, 0x24, 0x91, 0xb4, 0x41, 0x67, 0xfb, 0xea, 0xc3, 0xb2, 0x75, 0x4c, 0x10, 0x37, 0x8d, 0xe6,
	0xbc, 0x00, 0x7b, 0x5a, 0x4d, 0xea, 0x8c, 0xb0, 0x3d, 0xc2, 0x71, 0x10, 0xe8, 0x5d, 0x9c, 0x75,
	0x53, 0x11, 0xdd, 0x85, 0x9a, 0x17, 0x0b, 0xc9, 0x42, 0xc2, 0x7b, 0x82, 0xf0, 0x3d, 0xea, 0x91,
	0x84, 0x50, 0xd5, 0x14, 0xdf, 0x36, 0xb0, 0x3a, 0xa7, 0xd1, 0x48, 0x24, 0x94, 0x52, 0x43, 0xe7,
	0x47, 0xb8, 0x31, 0xb5, 0xb0, 0xd3, 0x39, 0xcb, 0xef, 0xce, 0x59, 0x3e, 0x93, 0xb3, 0xf1, 0x6b,
	0xc9, 0x9c, 0x87, 0xc7, 0x9c, 0xf9, 0xb1, 0xf7, 0x6f, 0x59, 0x79, 0x92, 0x72, 0xf9, 0x8b, 0x29,
	0x57, 0xb8, 0x14, 0xe5, 0xe6, 0x2e, 0x43, 0xb9, 0xe2, 0x69, 0xca, 0x3d, 0x19, 0x53, 0xae, 0xa4,
	0x49, 0xf0, 0xf9, 0xb9, 0x24, 0x38, 0x31, 0xeb, 0xb3, 0xc8, 0x54, 0xc2, 0x59, 0x93, 0x84, 0xdb,
	0x19, 0x13, 0xae, 0xac, 0x73, 0x7d, 0xf1, 0x21, 0xb9, 0x4e, 0xd3, 0x0d, 0xad, 0x42, 0x31, 0x54,
	0xaf, 0x93, 0xb0, 0x41, 0x5f, 0x78, 0xce, 0x14, 0x1a, 0xfb, 0x14, 0xbb, 0x89, 0x25, 0xfa, 0x16,
	0xac, 0x91, 0x09, 0x2a, 0xec, 0x8a, 0xf6, 0x6a, 0xbe, 0x67, 0x2d, 0x99, 0xbf, 0xb3, 0x09, 0xd7,
	0xa7, 0x2c, 0xc8, 0x05, 0x6c, 0xb7, 0xa1, 0xf4, 0x22, 0xc6, 0x01, 0x95, 0x87, 0x09, 0xc9, 0x53,
	0xd1, 0xf9, 0xde, 0x9c, 0x9e, 0xf3, 0xe6, 0x7c, 0x01, 0x93, 0x11, 0x14, 0x46, 0x9c, 0x89, 0xf4,
	0x55, 0x54, 0x63, 0x85, 0x79, 0x2c, 0x12, 0x09, 0xbd, 0xf4, 0xd8, 0xf9, 0x3b, 0x07, 0x95, 0x89,
	0xf0, 0x97, 0x7c, 0x06, 0x11, 0x14, 0x62, 0x1e, 0xa8, 0x48, 0x79, 0x65, 0xa5, 0xc6, 0x68, 0x0b,
	0xf2, 0xd4, 0x37, 0x97, 0xf7, 0xb4, 0xab, 0x63, 0xea, 0xea, 0x4d, 0x8e, 0x37, 0x7c, 0xe1, 0xaa,
	0x48, 0x8e, 0x0f, 0x8b, 0x27, 0x61, 0x45, 0xa3, 0x81, 0xa4, 0x91, 0xb0, 0x73, 0x3a, 0xaf, 0x11,
	0x54, 0x31, 0xe1, 0x28, 0x52, 0x53, 0xd5, 0xc5, 0xa8, 0xb1, 0xc2, 0xc4, 0xf3, 0x38, 0x2b, 0x50,
	0x8d, 0x95, 0x37, 0x16, 0xca, 0xbb, 0x60, 0xbc, 0xb5, 0xa0, 0xde, 0x6c, 0x4b, 0xa5, 0x59, 0xc7,
	0x12, 0xa3, 0x07, 0x50, 0xe4, 0xfa, 0x7d, 0xd3, 0xf3, 0xaf, 0xac, 0xde, 0xbc, 0xe0, 0xad, 0x74,
	0x13, 0x53, 0xf4, 0x19, 0x58, 0x7b, 0x49, 0x17, 0xa1, 0xd7, 0xa8, 0xb2, 0x7a, 0xeb, 0x5c, 0xb7,
	0xb4, 0xd5, 0x70, 0x33, 0x73, 0xe5, 0x9a, 0x76, 0x32, 0x7a, 0x57, 0xa6, 0xb9, 0xa6, 0xdd, 0x90,
	0x9b, 0x99, 0xa3, 0x87, 0x50, 0xcd, 0xde, 0x31, 0x03, 0x26, 0x4b, 0x7f, 0xfb, 0x12, 0xb7, 0xb6,
	0xbb, 0x18, 0x9e, 0x7c, 0x4d, 0x37, 0xa1, 0x96, 0xf2, 0x37, 0x89, 0xa6, 0xfa, 0x08, 0x75, 0x0e,
	0x1a, 0xef, 0xde, 0x49, 0xb7, 0x9a, 0xfa, 0x1a, 0x59, 0x34, 0x7e, 0x99, 0x83, 0x82, 0x32, 0x43,
	0x77, 0xa0, 0xea, 0x71, 0x82, 0x25, 0xe3, 0x3d, 0xec, 0xfb, 0x9c, 0x08, 0x91, 0x30, 0x6b, 0x31,
	0x81, 0xdb, 0x06, 0x45, 0x8b, 0x30, 0x9b, 0x5d, 0x8b, 0xb3, 0xd4, 0x47, 0x9f, 0x66, 0x4d, 0x84,
	0x59, 0x97, 0x1b, 0x4d, 0xd3, 0x97, 0x36, 0x55, 0x5f, 0xda, 0x4c, 0xfa, 0xd2, 0x66, 0x87, 0xd1,
	0x68, 0xad, 0xf0, 0xea, 0x8f, 0xe5, 0x99, 0xac, 0xcb, 0x58, 0x3d, 0xd1, 0x46, 0x2c, 0x4e, 0x39,
	0xfd, 0xdb, 0x12, 0x4b, 0x92, 0xf5, 0x48, 0xaa, 0xf5, 0x20, 0x1e, 0x27, 0x32, 0xeb, 0x9d, 0xb4,
	0xa4, 0x1a, 0x56, 0x2f, 0xc0, 0x34, 0xcc, 0x6a, 0x37, 0xd7, 0xe5, 0xbc, 0x06, 0xd3, 0xca, 0xef,
	0x40, 0x75, 0x37, 0x8e, 0x7c, 0xd1, 0xdb, 0xa7, 0x72, 0xe8, 0x73, 0xbc, 0x1f, 0xe9, 0x9b, 0xd3,
	0x72, 0x17, 0x35, 0xfc, 0x2c, 0x45, 0xd5, 0x61, 0xd5, 0x8e, 0xc4, 0xd7, 0xd7, 0xa0, 0xe5, 0xa6,
	0xa2, 0xce, 0x83, 0x23, 0x8f, 0x04, 0x3d, 0x4e, 0xb0, 0x60, 0x51, 0xf2, 0x2e, 0xcf, 0x1b, 0xd0,
	0xd5, 0x98, 0x6a, 0x5c, 0x86, 0xd4, 0x27, 0xbd, 0xc9, 0x37, 0xda, 0x72, 0x2b, 0x0a, 0x4b, 0xaf,
	0x03, 0x35, 0x0f, 0x6f, 0x48, 0x42, 0x6c, 0x57, 0x92, 0x79, 0x68, 0x09, 0xdd, 0x83, 0x82, 0x8f,
	0x25, 0xb6, 0xe7, 0x93, 0xa5, 0x3c, 0x6f, 0x45, 0x14, 0xff, 0x5d, 0x6d, 0x86, 0x1e, 0xc0, 0x35,
	0x33, 0x6d, 0x72, 0x30, 0xa2, 0x9c, 0x88, 0x1e, 0x96, 0xbd, 0x7e, 0xc0, 0xbc, 0xe7, 0xf6, 0x42,
	0x3d, 0xb7, 0x32, 0xe7, 0xfe, 0x47, 0x6b, 0xbb, 0x46, 0xd9, 0x96, 0x6b, 0x4a, 0x85, 0x3e, 0x82,
	0xaa, 0x17, 0x30, 0x31, 0x69, 0xbd, 0xa8, 0xad, 0x17, 0x0c, 0x9c, 0xda, 0x75, 0x00, 0xf4, 0xd6,
	0x13, 0xbf, 0x87, 0xa5, 0x5d, 0xd5, 0x15, 0x39, 0x4d, 0xf3, 0x57, 0xd2, 0x4c, 0xff, 0x4a, 0x9a,
	0x4f, 0xd2, 0x07, 0x69, 0xcd, 0x52, 0xbb, 0xfb, 0xf2, 0xcf, 0xe5, 0x9c, 0x5b, 0x4e, 0xfc, 0xda,
	0x12, 0xb5, 0xa1, 0xac, 0xa3, 0xea, 0x18, 0xb5, 0xf7, 0x88, 0x61, 0x19, 0xb7, 0xb6, 0xfc, 0xf8,
	0xa7, 0x9c, 0xf9, 0x91, 0xd1, 0x4c, 0x40, 0xff, 0x87, 0xca, 0xce, 0xa3, 0xed, 0xc7, 0xdd, 0xce,
	0xc6, 0xd7, 0x1b, 0xdd, 0xf5, 0xda, 0x8c, 0x73, 0xf5, 0xe8, 0xb8, 0x5e, 0xd3, 0xba, 0x9d, 0x48,
	0x8c, 0x88, 0xa7, 0xce, 0xab, 0x8f, 0xae, 0x43, 0x61, 0xeb, 0x71, 0xf7, 0x51, 0x2d, 0xe7, 0x2c,
	0x1c, 0x1d, 0xd7, 0xcb, 0x5a, 0xbf, 0x35, 0x22, 0x11, 0x5a, 0x06, 0xab, 0xd3, 0x7e, 0xd4, 0xe9,
	0x3e, 0xec, 0xae, 0xd7, 0x66, 0x9d, 0x2b, 0x47, 0xc7, 0xf5, 0x05, 0xad, 0xec, 0xe8, 0x1d, 0x24,
	0xea, 0xf5, 0x2f, 0x76, 0x1e, 0x6e, 0x6d, 0x77, 0xd7, 0x6b, 0x79, 0xa7, 0x7a, 0x74, 0x5c, 0xaf,
	0x18, 0xb5, 0xae, 0x66, 0xad, 0xf3, 0xea, 0xcd, 0x52, 0xee, 0xf5, 0x9b, 0xa5, 0xdc, 0x5f, 0x6f,
	0x96, 0x72, 0x2f, 0xdf, 0x2e, 0xcd, 0xbc, 0x7e, 0xbb, 0x34, 0xf3, 0xfb, 0xdb, 0xa5, 0x99, 0xef,
	0xee, 0x0e, 0xa8, 0x1c, 0xc6, 0xfd, 0xa6, 0xc7, 0xc2, 0x56, 0x10, 0x87, 0xf7, 0xd2, 0xbf, 0x3f,
	0x6f, 0x88, 0x69, 0xd4, 0x3a, 0x30, 0x7f, 0x81, 0xaa, 0xeb, 0x16, 0xfd, 0xa2, 0x9e, 0xf8, 0x83,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x20, 0x50, 0xc9, 0x69, 0x25, 0x0e, 0x00, 0x00,
}

func (m *BeamMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThumbnailUrl) > 0 {
		i -= len(m.ThumbnailUrl)
		copy(dAtA[i:], m.ThumbnailUrl)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.ThumbnailUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mimetype) > 0 {
		i -= len(m.Mimetype)
		copy(dAtA[i:], m.Mimetype)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Mimetype)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamReviewer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamReviewer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamReviewer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAnonymous {
		i--
		if m.IsAnonymous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReviewerId) > 0 {
		i -= len(m.ReviewerId)
		copy(dAtA[i:], m.ReviewerId)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.ReviewerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamVerifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamVerifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamVerifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxAmount))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Trigger) > 0 {
		i -= len(m.Trigger)
		copy(dAtA[i:], m.Trigger)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Trigger)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamReward_BeamRewardDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamReward_BeamRewardDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamReward_BeamRewardDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxAmount))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamMerchantReview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamMerchantReview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamMerchantReview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Ratings != nil {
		{
			size, err := m.Ratings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CollectionMethod) > 0 {
		i -= len(m.CollectionMethod)
		copy(dAtA[i:], m.CollectionMethod)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.CollectionMethod)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReviewUrl) > 0 {
		i -= len(m.ReviewUrl)
		copy(dAtA[i:], m.ReviewUrl)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.ReviewUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RatingUrl) > 0 {
		i -= len(m.RatingUrl)
		copy(dAtA[i:], m.RatingUrl)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.RatingUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MerchantUrl) > 0 {
		i -= len(m.MerchantUrl)
		copy(dAtA[i:], m.MerchantUrl)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.MerchantUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReviewId) > 0 {
		i -= len(m.ReviewId)
		copy(dAtA[i:], m.ReviewId)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.ReviewId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamMerchantReview_BeamMerchantReviewRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamMerchantReview_BeamMerchantReviewRating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamMerchantReview_BeamMerchantReviewRating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nps != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Nps))))
		i--
		dAtA[i] = 0x1d
	}
	if m.CustomerService != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CustomerService))))
		i--
		dAtA[i] = 0x15
	}
	if m.Overall != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Overall))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *BeamMerchantReview_BeamMerchantReviewContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamMerchantReview_BeamMerchantReviewContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamMerchantReview_BeamMerchantReviewContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomerService) > 0 {
		i -= len(m.CustomerService)
		copy(dAtA[i:], m.CustomerService)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.CustomerService)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Overall) > 0 {
		i -= len(m.Overall)
		copy(dAtA[i:], m.Overall)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Overall)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamProductReview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamProductReview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamProductReview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Products) > 0 {
		for iNdEx := len(m.Products) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Products[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Medias) > 0 {
		for iNdEx := len(m.Medias) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Medias[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x42
	}
	if m.Ratings != nil {
		{
			size, err := m.Ratings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CollectionMethod) > 0 {
		i -= len(m.CollectionMethod)
		copy(dAtA[i:], m.CollectionMethod)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.CollectionMethod)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReviewUrl) > 0 {
		i -= len(m.ReviewUrl)
		copy(dAtA[i:], m.ReviewUrl)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.ReviewUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RatingUrl) > 0 {
		i -= len(m.RatingUrl)
		copy(dAtA[i:], m.RatingUrl)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.RatingUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReviewId) > 0 {
		i -= len(m.ReviewId)
		copy(dAtA[i:], m.ReviewId)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.ReviewId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamProductReview_BeamProductReviewRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamProductReview_BeamProductReviewRating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamProductReview_BeamProductReviewRating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quality != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Quality))))
		i--
		dAtA[i] = 0x15
	}
	if m.Overall != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Overall))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *BeamProductReview_BeamProductReviewContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamProductReview_BeamProductReviewContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamProductReview_BeamProductReviewContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cons) > 0 {
		i -= len(m.Cons)
		copy(dAtA[i:], m.Cons)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Cons)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pros) > 0 {
		i -= len(m.Pros)
		copy(dAtA[i:], m.Pros)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Pros)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Overall) > 0 {
		i -= len(m.Overall)
		copy(dAtA[i:], m.Overall)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Overall)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamProductReview_BeamProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamProductReview_BeamProduct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamProductReview_BeamProduct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ids != nil {
		{
			size, err := m.Ids.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintBeam(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asins) > 0 {
		for iNdEx := len(m.Asins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Asins[iNdEx])
			copy(dAtA[i:], m.Asins[iNdEx])
			i = encodeVarintBeam(dAtA, i, uint64(len(m.Asins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Skus) > 0 {
		for iNdEx := len(m.Skus) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Skus[iNdEx])
			copy(dAtA[i:], m.Skus[iNdEx])
			i = encodeVarintBeam(dAtA, i, uint64(len(m.Skus[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Mpns) > 0 {
		for iNdEx := len(m.Mpns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mpns[iNdEx])
			copy(dAtA[i:], m.Mpns[iNdEx])
			i = encodeVarintBeam(dAtA, i, uint64(len(m.Mpns[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Gtins) > 0 {
		for iNdEx := len(m.Gtins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Gtins[iNdEx])
			copy(dAtA[i:], m.Gtins[iNdEx])
			i = encodeVarintBeam(dAtA, i, uint64(len(m.Gtins[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeamData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeamData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductsReviews) > 0 {
		for iNdEx := len(m.ProductsReviews) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProductsReviews[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MerchantReview != nil {
		{
			size, err := m.MerchantReview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reviewer != nil {
		{
			size, err := m.Reviewer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Verifier != nil {
		{
			size, err := m.Verifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Beam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Beam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Beam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ClosedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClosedAt):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintBeam(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintBeam(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x7a
	if m.ClosesAtBlock != 0 {
		i = encodeVarintBeam(dAtA, i, uint64(m.ClosesAtBlock))
		i--
		dAtA[i] = 0x70
	}
	if m.ClaimExpiresAtBlock != 0 {
		i = encodeVarintBeam(dAtA, i, uint64(m.ClaimExpiresAtBlock))
		i--
		dAtA[i] = 0x68
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x5a
	}
	if m.HideContent {
		i--
		if m.HideContent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.CancelReason) > 0 {
		i -= len(m.CancelReason)
		copy(dAtA[i:], m.CancelReason)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.CancelReason)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FundsWithdrawn {
		i--
		if m.FundsWithdrawn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintBeam(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBeam(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintBeam(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBeam(dAtA []byte, offset int, v uint64) int {
	offset -= sovBeam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BeamMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.ThumbnailUrl)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	return n
}

func (m *BeamReviewer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReviewerId)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.IsAnonymous {
		n += 2
	}
	return n
}

func (m *BeamVerifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	return n
}

func (m *BeamReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trigger)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Amount != 0 {
		n += 5
	}
	if m.MaxAmount != 0 {
		n += 5
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	return n
}

func (m *BeamReward_BeamRewardDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Amount != 0 {
		n += 5
	}
	if m.MaxAmount != 0 {
		n += 5
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	return n
}

func (m *BeamMerchantReview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.ReviewId)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.MerchantUrl)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.RatingUrl)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.ReviewUrl)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.CollectionMethod)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Ratings != nil {
		l = m.Ratings.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	return n
}

func (m *BeamMerchantReview_BeamMerchantReviewRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Overall != 0 {
		n += 5
	}
	if m.CustomerService != 0 {
		n += 5
	}
	if m.Nps != 0 {
		n += 5
	}
	return n
}

func (m *BeamMerchantReview_BeamMerchantReviewContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Overall)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.CustomerService)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	return n
}

func (m *BeamProductReview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.ReviewId)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.RatingUrl)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.ReviewUrl)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.CollectionMethod)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Ratings != nil {
		l = m.Ratings.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	if len(m.Medias) > 0 {
		for _, e := range m.Medias {
			l = e.Size()
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	return n
}

func (m *BeamProductReview_BeamProductReviewRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Overall != 0 {
		n += 5
	}
	if m.Quality != 0 {
		n += 5
	}
	return n
}

func (m *BeamProductReview_BeamProductReviewContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Overall)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Pros)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Cons)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	return n
}

func (m *BeamProductReview_BeamProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	if m.Ids != nil {
		l = m.Ids.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	return n
}

func (m *BeamProductReview_BeamProduct_BeamProductIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gtins) > 0 {
		for _, s := range m.Gtins {
			l = len(s)
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	if len(m.Mpns) > 0 {
		for _, s := range m.Mpns {
			l = len(s)
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	if len(m.Skus) > 0 {
		for _, s := range m.Skus {
			l = len(s)
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	if len(m.Asins) > 0 {
		for _, s := range m.Asins {
			l = len(s)
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	return n
}

func (m *BeamData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Verifier != nil {
		l = m.Verifier.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Reviewer != nil {
		l = m.Reviewer.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.MerchantReview != nil {
		l = m.MerchantReview.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	if len(m.ProductsReviews) > 0 {
		for _, e := range m.ProductsReviews {
			l = e.Size()
			n += 1 + l + sovBeam(uint64(l))
		}
	}
	return n
}

func (m *Beam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBeam(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBeam(uint64(m.Status))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.FundsWithdrawn {
		n += 2
	}
	if m.Claimed {
		n += 2
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.HideContent {
		n += 2
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeam(uint64(l))
	}
	if m.ClaimExpiresAtBlock != 0 {
		n += 1 + sovBeam(uint64(m.ClaimExpiresAtBlock))
	}
	if m.ClosesAtBlock != 0 {
		n += 1 + sovBeam(uint64(m.ClosesAtBlock))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovBeam(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClosedAt)
	n += 2 + l + sovBeam(uint64(l))
	return n
}

func sovBeam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBeam(x uint64) (n int) {
	return sovBeam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BeamMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbnailUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbnailUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamReviewer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamReviewer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamReviewer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnonymous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAnonymous = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamVerifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamVerifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamVerifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trigger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxAmount = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &BeamReward_BeamRewardDetails{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamReward_BeamRewardDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamRewardDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamRewardDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxAmount = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamMerchantReview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamMerchantReview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamMerchantReview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ratings == nil {
				m.Ratings = &BeamMerchantReview_BeamMerchantReviewRating{}
			}
			if err := m.Ratings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &BeamMerchantReview_BeamMerchantReviewContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamMerchantReview_BeamMerchantReviewRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamMerchantReviewRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamMerchantReviewRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Overall = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerService", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CustomerService = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nps", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Nps = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamMerchantReview_BeamMerchantReviewContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamMerchantReviewContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamMerchantReviewContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Overall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamProductReview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamProductReview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamProductReview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ratings == nil {
				m.Ratings = &BeamProductReview_BeamProductReviewRating{}
			}
			if err := m.Ratings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &BeamProductReview_BeamProductReviewContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medias = append(m.Medias, &BeamMedia{})
			if err := m.Medias[len(m.Medias)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &BeamProductReview_BeamProduct{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamProductReview_BeamProductReviewRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamProductReviewRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamProductReviewRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Overall = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Quality = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamProductReview_BeamProductReviewContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamProductReviewContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamProductReviewContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Overall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pros", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pros = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cons = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamProductReview_BeamProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ids == nil {
				m.Ids = &BeamProductReview_BeamProduct_BeamProductIds{}
			}
			if err := m.Ids.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamProductReview_BeamProduct_BeamProductIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamProductIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamProductIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gtins = append(m.Gtins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mpns = append(m.Mpns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skus = append(m.Skus, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asins = append(m.Asins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeamData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &BeamReward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verifier == nil {
				m.Verifier = &BeamVerifier{}
			}
			if err := m.Verifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reviewer == nil {
				m.Reviewer = &BeamReviewer{}
			}
			if err := m.Reviewer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantReview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MerchantReview == nil {
				m.MerchantReview = &BeamMerchantReview{}
			}
			if err := m.MerchantReview.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductsReviews", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductsReviews = append(m.ProductsReviews, &BeamProductReview{})
			if err := m.ProductsReviews[len(m.ProductsReviews)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Beam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Beam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Beam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BeamState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundsWithdrawn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FundsWithdrawn = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideContent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideContent = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BeamData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimExpiresAtBlock", wireType)
			}
			m.ClaimExpiresAtBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimExpiresAtBlock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosesAtBlock", wireType)
			}
			m.ClosesAtBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosesAtBlock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBeam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBeam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBeam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBeam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBeam = fmt.Errorf("proto: unexpected end of group")
)
