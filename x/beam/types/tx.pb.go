// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum/network/beam/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgOpenBeam struct {
	Id                  string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatorAddress      string      `protobuf:"bytes,2,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	Secret              string      `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Amount              *types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Schema              string      `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	Data                *BeamData   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	ClaimAddress        string      `protobuf:"bytes,7,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
	ClaimExpiresAtBlock int32       `protobuf:"varint,8,opt,name=claim_expires_at_block,json=claimExpiresAtBlock,proto3" json:"claim_expires_at_block,omitempty"`
	ClosesAtBlock       int32       `protobuf:"varint,9,opt,name=closes_at_block,json=closesAtBlock,proto3" json:"closes_at_block,omitempty"`
}

func (m *MsgOpenBeam) Reset()         { *m = MsgOpenBeam{} }
func (m *MsgOpenBeam) String() string { return proto.CompactTextString(m) }
func (*MsgOpenBeam) ProtoMessage()    {}
func (*MsgOpenBeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce92dc88acd3545, []int{0}
}
func (m *MsgOpenBeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenBeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenBeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenBeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenBeam.Merge(m, src)
}
func (m *MsgOpenBeam) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenBeam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenBeam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenBeam proto.InternalMessageInfo

func (m *MsgOpenBeam) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgOpenBeam) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *MsgOpenBeam) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *MsgOpenBeam) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgOpenBeam) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *MsgOpenBeam) GetData() *BeamData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgOpenBeam) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

func (m *MsgOpenBeam) GetClaimExpiresAtBlock() int32 {
	if m != nil {
		return m.ClaimExpiresAtBlock
	}
	return 0
}

func (m *MsgOpenBeam) GetClosesAtBlock() int32 {
	if m != nil {
		return m.ClosesAtBlock
	}
	return 0
}

type MsgOpenBeamResponse struct {
}

func (m *MsgOpenBeamResponse) Reset()         { *m = MsgOpenBeamResponse{} }
func (m *MsgOpenBeamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOpenBeamResponse) ProtoMessage()    {}
func (*MsgOpenBeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce92dc88acd3545, []int{1}
}
func (m *MsgOpenBeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenBeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenBeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenBeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenBeamResponse.Merge(m, src)
}
func (m *MsgOpenBeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenBeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenBeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenBeamResponse proto.InternalMessageInfo

type MsgUpdateBeam struct {
	Id                  string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdaterAddress      string      `protobuf:"bytes,2,opt,name=updater_address,json=updaterAddress,proto3" json:"updater_address,omitempty"`
	Amount              *types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Status              BeamState   `protobuf:"varint,4,opt,name=status,proto3,enum=lum.network.beam.BeamState" json:"status,omitempty"`
	CancelReason        string      `protobuf:"bytes,5,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
	HideContent         bool        `protobuf:"varint,6,opt,name=hide_content,json=hideContent,proto3" json:"hide_content,omitempty"`
	Data                *BeamData   `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	ClaimAddress        string      `protobuf:"bytes,8,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
	ClaimExpiresAtBlock int32       `protobuf:"varint,9,opt,name=claim_expires_at_block,json=claimExpiresAtBlock,proto3" json:"claim_expires_at_block,omitempty"`
	ClosesAtBlock       int32       `protobuf:"varint,10,opt,name=closes_at_block,json=closesAtBlock,proto3" json:"closes_at_block,omitempty"`
}

func (m *MsgUpdateBeam) Reset()         { *m = MsgUpdateBeam{} }
func (m *MsgUpdateBeam) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBeam) ProtoMessage()    {}
func (*MsgUpdateBeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce92dc88acd3545, []int{2}
}
func (m *MsgUpdateBeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBeam.Merge(m, src)
}
func (m *MsgUpdateBeam) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBeam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBeam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBeam proto.InternalMessageInfo

func (m *MsgUpdateBeam) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgUpdateBeam) GetUpdaterAddress() string {
	if m != nil {
		return m.UpdaterAddress
	}
	return ""
}

func (m *MsgUpdateBeam) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgUpdateBeam) GetStatus() BeamState {
	if m != nil {
		return m.Status
	}
	return BeamState_StateUnspecified
}

func (m *MsgUpdateBeam) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

func (m *MsgUpdateBeam) GetHideContent() bool {
	if m != nil {
		return m.HideContent
	}
	return false
}

func (m *MsgUpdateBeam) GetData() *BeamData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgUpdateBeam) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

func (m *MsgUpdateBeam) GetClaimExpiresAtBlock() int32 {
	if m != nil {
		return m.ClaimExpiresAtBlock
	}
	return 0
}

func (m *MsgUpdateBeam) GetClosesAtBlock() int32 {
	if m != nil {
		return m.ClosesAtBlock
	}
	return 0
}

type MsgUpdateBeamResponse struct {
}

func (m *MsgUpdateBeamResponse) Reset()         { *m = MsgUpdateBeamResponse{} }
func (m *MsgUpdateBeamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBeamResponse) ProtoMessage()    {}
func (*MsgUpdateBeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce92dc88acd3545, []int{3}
}
func (m *MsgUpdateBeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBeamResponse.Merge(m, src)
}
func (m *MsgUpdateBeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBeamResponse proto.InternalMessageInfo

type MsgClaimBeam struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClaimerAddress string `protobuf:"bytes,2,opt,name=claimer_address,json=claimerAddress,proto3" json:"claimer_address,omitempty"`
	Secret         string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *MsgClaimBeam) Reset()         { *m = MsgClaimBeam{} }
func (m *MsgClaimBeam) String() string { return proto.CompactTextString(m) }
func (*MsgClaimBeam) ProtoMessage()    {}
func (*MsgClaimBeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce92dc88acd3545, []int{4}
}
func (m *MsgClaimBeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimBeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimBeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimBeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimBeam.Merge(m, src)
}
func (m *MsgClaimBeam) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimBeam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimBeam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimBeam proto.InternalMessageInfo

func (m *MsgClaimBeam) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgClaimBeam) GetClaimerAddress() string {
	if m != nil {
		return m.ClaimerAddress
	}
	return ""
}

func (m *MsgClaimBeam) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type MsgClaimBeamResponse struct {
}

func (m *MsgClaimBeamResponse) Reset()         { *m = MsgClaimBeamResponse{} }
func (m *MsgClaimBeamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimBeamResponse) ProtoMessage()    {}
func (*MsgClaimBeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce92dc88acd3545, []int{5}
}
func (m *MsgClaimBeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimBeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimBeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimBeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimBeamResponse.Merge(m, src)
}
func (m *MsgClaimBeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimBeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimBeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimBeamResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgOpenBeam)(nil), "lum.network.beam.MsgOpenBeam")
	proto.RegisterType((*MsgOpenBeamResponse)(nil), "lum.network.beam.MsgOpenBeamResponse")
	proto.RegisterType((*MsgUpdateBeam)(nil), "lum.network.beam.MsgUpdateBeam")
	proto.RegisterType((*MsgUpdateBeamResponse)(nil), "lum.network.beam.MsgUpdateBeamResponse")
	proto.RegisterType((*MsgClaimBeam)(nil), "lum.network.beam.MsgClaimBeam")
	proto.RegisterType((*MsgClaimBeamResponse)(nil), "lum.network.beam.MsgClaimBeamResponse")
}

func init() { proto.RegisterFile("lum/network/beam/tx.proto", fileDescriptor_4ce92dc88acd3545) }

var fileDescriptor_4ce92dc88acd3545 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6e, 0xd3, 0x4c,
	0x1c, 0xac, 0x93, 0x34, 0x4d, 0x36, 0x7f, 0xfa, 0xc9, 0x6d, 0xf3, 0xb9, 0xae, 0x70, 0x43, 0x10,
	0x6d, 0x38, 0x60, 0xab, 0x09, 0x12, 0xe7, 0x26, 0x70, 0x8c, 0x40, 0xae, 0xe0, 0xc0, 0xc5, 0x5a,
	0xaf, 0x57, 0x8e, 0x55, 0xdb, 0x6b, 0x79, 0xd7, 0x10, 0xee, 0x3c, 0x00, 0x4f, 0xc3, 0x33, 0xf4,
	0xd8, 0x23, 0x27, 0x84, 0x92, 0x03, 0xaf, 0x81, 0xbc, 0x5e, 0x3b, 0x81, 0xa4, 0xad, 0x22, 0x2e,
	0x51, 0x3c, 0x33, 0x9e, 0xfd, 0xed, 0x8c, 0x77, 0xc1, 0xb1, 0x9f, 0x04, 0x46, 0x88, 0xd9, 0x27,
	0x12, 0x5f, 0x1b, 0x36, 0x86, 0x81, 0xc1, 0x66, 0x7a, 0x14, 0x13, 0x46, 0xe4, 0xff, 0xfc, 0x24,
	0xd0, 0x05, 0xa5, 0xa7, 0x94, 0x7a, 0xe8, 0x12, 0x97, 0x70, 0xd2, 0x48, 0xff, 0x65, 0x3a, 0x55,
	0x43, 0x84, 0x06, 0x84, 0x1a, 0x36, 0xa4, 0xd8, 0xf8, 0x78, 0x61, 0x63, 0x06, 0x2f, 0x0c, 0x44,
	0xbc, 0x50, 0xf0, 0x27, 0x6b, 0x4b, 0xa4, 0x3f, 0x19, 0xd9, 0xfb, 0x55, 0x02, 0x8d, 0x09, 0x75,
	0xdf, 0x44, 0x38, 0x1c, 0x61, 0x18, 0xc8, 0x6d, 0x50, 0xf2, 0x1c, 0x45, 0xea, 0x4a, 0xfd, 0xba,
	0x59, 0xf2, 0x1c, 0xf9, 0x1c, 0xec, 0xa3, 0x18, 0x43, 0x46, 0x62, 0x0b, 0x3a, 0x4e, 0x8c, 0x29,
	0x55, 0x4a, 0x9c, 0x6c, 0x0b, 0xf8, 0x32, 0x43, 0xe5, 0x0e, 0xa8, 0x52, 0x8c, 0x62, 0xcc, 0x94,
	0x32, 0xe7, 0xc5, 0x93, 0xfc, 0x12, 0x54, 0x61, 0x40, 0x92, 0x90, 0x29, 0x95, 0xae, 0xd4, 0x6f,
	0x0c, 0x8e, 0xf5, 0x6c, 0x5c, 0x3d, 0x1d, 0x57, 0x17, 0xe3, 0xea, 0x63, 0xe2, 0x85, 0xa3, 0xca,
	0xcd, 0x8f, 0x53, 0xc9, 0x14, 0x72, 0x6e, 0x88, 0xa6, 0x38, 0x80, 0xca, 0xae, 0x30, 0xe4, 0x4f,
	0xf2, 0x0b, 0x50, 0x71, 0x20, 0x83, 0x4a, 0x95, 0xdb, 0xa9, 0xfa, 0xdf, 0x29, 0xe9, 0xe9, 0x3e,
	0x5e, 0x41, 0x06, 0x85, 0x1f, 0x57, 0xcb, 0x4f, 0x40, 0x0b, 0xf9, 0xd0, 0x0b, 0x8a, 0x5d, 0xec,
	0x71, 0xd3, 0x26, 0x07, 0xf3, 0x3d, 0x0c, 0x41, 0x27, 0x13, 0xe1, 0x59, 0xe4, 0xc5, 0x98, 0x5a,
	0x90, 0x59, 0xb6, 0x4f, 0xd0, 0xb5, 0x52, 0xeb, 0x4a, 0xfd, 0x5d, 0xf3, 0x80, 0xb3, 0xaf, 0x33,
	0xf2, 0x92, 0x8d, 0x52, 0x4a, 0x3e, 0x03, 0xfb, 0xc8, 0x27, 0x74, 0x55, 0x5d, 0xe7, 0xea, 0x56,
	0x06, 0x0b, 0x5d, 0xef, 0x08, 0x1c, 0xac, 0x04, 0x6d, 0x62, 0x1a, 0x91, 0x90, 0xe2, 0xde, 0xb7,
	0x32, 0x68, 0x4d, 0xa8, 0xfb, 0x2e, 0x72, 0x20, 0xc3, 0x77, 0x55, 0x90, 0x70, 0x76, 0xad, 0x02,
	0x01, 0xe7, 0xe3, 0x2f, 0xa3, 0x2e, 0x6f, 0x17, 0xf5, 0x10, 0x54, 0x29, 0x83, 0x2c, 0xa1, 0xbc,
	0xa3, 0xf6, 0xe0, 0x64, 0x73, 0xa8, 0x57, 0x0c, 0x32, 0x6c, 0x0a, 0x29, 0x4f, 0x14, 0x86, 0x08,
	0xfb, 0x56, 0x8c, 0x21, 0x25, 0xa1, 0xa8, 0xa9, 0x99, 0x81, 0x26, 0xc7, 0xe4, 0xc7, 0xa0, 0x39,
	0xf5, 0x1c, 0x6c, 0x21, 0x12, 0x32, 0x1c, 0x32, 0x5e, 0x5a, 0xcd, 0x6c, 0xa4, 0xd8, 0x38, 0x83,
	0x8a, 0x3e, 0xf7, 0xfe, 0xad, 0xcf, 0xda, 0x56, 0x7d, 0xd6, 0xb7, 0xea, 0x13, 0x6c, 0xea, 0xf3,
	0x7f, 0x70, 0xf4, 0x47, 0x6f, 0x45, 0xa3, 0x16, 0x68, 0x4e, 0xa8, 0x3b, 0x4e, 0xad, 0xef, 0x3c,
	0x52, 0x29, 0xb9, 0xde, 0xa7, 0x80, 0x1f, 0x38, 0x52, 0xbd, 0x0e, 0x38, 0x5c, 0x5d, 0x20, 0x5f,
	0x78, 0xf0, 0xa5, 0x04, 0xca, 0x13, 0xea, 0xca, 0x6f, 0x41, 0xad, 0x38, 0xcf, 0x8f, 0xd6, 0xf3,
	0x5c, 0xf9, 0x0a, 0xd5, 0xa7, 0xf7, 0xd2, 0xb9, 0xb3, 0xfc, 0x1e, 0x80, 0x95, 0x0f, 0xf4, 0x74,
	0xe3, 0x4b, 0x4b, 0x81, 0x7a, 0xfe, 0x80, 0xa0, 0xf0, 0xbd, 0x02, 0xf5, 0x65, 0x4e, 0xda, 0xc6,
	0xb7, 0x0a, 0x5e, 0x3d, 0xbb, 0x9f, 0xcf, 0x4d, 0x47, 0xe3, 0x9b, 0xb9, 0x26, 0xdd, 0xce, 0x35,
	0xe9, 0xe7, 0x5c, 0x93, 0xbe, 0x2e, 0xb4, 0x9d, 0xdb, 0x85, 0xb6, 0xf3, 0x7d, 0xa1, 0xed, 0x7c,
	0x78, 0xe6, 0x7a, 0x6c, 0x9a, 0xd8, 0x3a, 0x22, 0x81, 0xe1, 0x27, 0xc1, 0xf3, 0xfc, 0x52, 0x44,
	0x53, 0xe8, 0x85, 0xc6, 0x4c, 0xdc, 0xbf, 0x9f, 0x23, 0x4c, 0xed, 0x2a, 0xbf, 0x1e, 0x87, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xdd, 0x5e, 0x7f, 0xa0, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	OpenBeam(ctx context.Context, in *MsgOpenBeam, opts ...grpc.CallOption) (*MsgOpenBeamResponse, error)
	UpdateBeam(ctx context.Context, in *MsgUpdateBeam, opts ...grpc.CallOption) (*MsgUpdateBeamResponse, error)
	ClaimBeam(ctx context.Context, in *MsgClaimBeam, opts ...grpc.CallOption) (*MsgClaimBeamResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) OpenBeam(ctx context.Context, in *MsgOpenBeam, opts ...grpc.CallOption) (*MsgOpenBeamResponse, error) {
	out := new(MsgOpenBeamResponse)
	err := c.cc.Invoke(ctx, "/lum.network.beam.Msg/OpenBeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBeam(ctx context.Context, in *MsgUpdateBeam, opts ...grpc.CallOption) (*MsgUpdateBeamResponse, error) {
	out := new(MsgUpdateBeamResponse)
	err := c.cc.Invoke(ctx, "/lum.network.beam.Msg/UpdateBeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimBeam(ctx context.Context, in *MsgClaimBeam, opts ...grpc.CallOption) (*MsgClaimBeamResponse, error) {
	out := new(MsgClaimBeamResponse)
	err := c.cc.Invoke(ctx, "/lum.network.beam.Msg/ClaimBeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	OpenBeam(context.Context, *MsgOpenBeam) (*MsgOpenBeamResponse, error)
	UpdateBeam(context.Context, *MsgUpdateBeam) (*MsgUpdateBeamResponse, error)
	ClaimBeam(context.Context, *MsgClaimBeam) (*MsgClaimBeamResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) OpenBeam(ctx context.Context, req *MsgOpenBeam) (*MsgOpenBeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenBeam not implemented")
}
func (*UnimplementedMsgServer) UpdateBeam(ctx context.Context, req *MsgUpdateBeam) (*MsgUpdateBeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeam not implemented")
}
func (*UnimplementedMsgServer) ClaimBeam(ctx context.Context, req *MsgClaimBeam) (*MsgClaimBeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimBeam not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_OpenBeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpenBeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OpenBeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lum.network.beam.Msg/OpenBeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OpenBeam(ctx, req.(*MsgOpenBeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lum.network.beam.Msg/UpdateBeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBeam(ctx, req.(*MsgUpdateBeam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimBeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimBeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimBeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lum.network.beam.Msg/ClaimBeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimBeam(ctx, req.(*MsgClaimBeam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lum.network.beam.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenBeam",
			Handler:    _Msg_OpenBeam_Handler,
		},
		{
			MethodName: "UpdateBeam",
			Handler:    _Msg_UpdateBeam_Handler,
		},
		{
			MethodName: "ClaimBeam",
			Handler:    _Msg_ClaimBeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lum/network/beam/tx.proto",
}

func (m *MsgOpenBeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenBeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenBeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosesAtBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClosesAtBlock))
		i--
		dAtA[i] = 0x48
	}
	if m.ClaimExpiresAtBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimExpiresAtBlock))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOpenBeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenBeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenBeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosesAtBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClosesAtBlock))
		i--
		dAtA[i] = 0x50
	}
	if m.ClaimExpiresAtBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimExpiresAtBlock))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.HideContent {
		i--
		if m.HideContent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.CancelReason) > 0 {
		i -= len(m.CancelReason)
		copy(dAtA[i:], m.CancelReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CancelReason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UpdaterAddress) > 0 {
		i -= len(m.UpdaterAddress)
		copy(dAtA[i:], m.UpdaterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpdaterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimBeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimBeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimBeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClaimerAddress) > 0 {
		i -= len(m.ClaimerAddress)
		copy(dAtA[i:], m.ClaimerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimBeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimBeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimBeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgOpenBeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClaimExpiresAtBlock != 0 {
		n += 1 + sovTx(uint64(m.ClaimExpiresAtBlock))
	}
	if m.ClosesAtBlock != 0 {
		n += 1 + sovTx(uint64(m.ClosesAtBlock))
	}
	return n
}

func (m *MsgOpenBeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UpdaterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HideContent {
		n += 2
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClaimExpiresAtBlock != 0 {
		n += 1 + sovTx(uint64(m.ClaimExpiresAtBlock))
	}
	if m.ClosesAtBlock != 0 {
		n += 1 + sovTx(uint64(m.ClosesAtBlock))
	}
	return n
}

func (m *MsgUpdateBeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimBeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimBeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgOpenBeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenBeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenBeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BeamData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimExpiresAtBlock", wireType)
			}
			m.ClaimExpiresAtBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimExpiresAtBlock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosesAtBlock", wireType)
			}
			m.ClosesAtBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosesAtBlock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenBeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenBeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenBeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdaterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdaterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BeamState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideContent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideContent = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BeamData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimExpiresAtBlock", wireType)
			}
			m.ClaimExpiresAtBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimExpiresAtBlock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosesAtBlock", wireType)
			}
			m.ClosesAtBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosesAtBlock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimBeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimBeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimBeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimBeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimBeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimBeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
